//-----------------------------
//-- Generated By Denny(luhox@qq.com)
//-- Remarks: test.service
//-- Date Generated: 2020-10-09 10:48:01
//-----------------------------

package app.service;

import java.util.*;
import java.io.Serializable;
import org.apache.commons.lang3.StringUtils;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Service;
import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
import com.baomidou.mybatisplus.core.conditions.update.UpdateWrapper;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;

import app.utils.Common;
import app.entity.*;
import sld.webutils.*;
import tpa.entity.*;
import tpa.service.*;

/*
 *  测试用，发布后请删除
 */
@Service("BrowseService")
public class BrowseService {

	private static final Log logger = LogFactory.getLog(BrowseService.class);

	@Autowired
	@Qualifier("configService")
	private IConfigService svcconfig;

	@Autowired
	@Qualifier("curriculumService")
	private ICurriculumService svccurriculum;

	@Autowired
	@Qualifier("evaluationService")
	private IEvaluationService svcevaluation;

	@Autowired
	@Qualifier("evaluation_ip_recordService")
	private IEvaluation_ip_recordService svcevaluation_ip_record;

	@Autowired
	@Qualifier("evaluation_pointService")
	private IEvaluation_pointService svcevaluation_point;

	@Autowired
	@Qualifier("evaluation_resultService")
	private IEvaluation_resultService svcevaluation_result;

	@Autowired
	@Qualifier("evaluation_result_recordService")
	private IEvaluation_result_recordService svcevaluation_result_record;

	@Autowired
	@Qualifier("evaluation_typeService")
	private IEvaluation_typeService svcevaluation_type;

	@Autowired
	@Qualifier("experimentService")
	private IExperimentService svcexperiment;

	@Autowired
	@Qualifier("experiment_recordService")
	private IExperiment_recordService svcexperiment_record;

	@Autowired
	@Qualifier("link_experiment_curriculumService")
	private ILink_experiment_curriculumService svclink_experiment_curriculum;

	@Autowired
	@Qualifier("link_role_permitService")
	private ILink_role_permitService svclink_role_permit;

	@Autowired
	@Qualifier("link_student2groupService")
	private ILink_student2groupService svclink_student2group;

	@Autowired
	@Qualifier("link_user_roleService")
	private ILink_user_roleService svclink_user_role;

	@Autowired
	@Qualifier("messageService")
	private IMessageService svcmessage;

	@Autowired
	@Qualifier("permitService")
	private IPermitService svcpermit;

	@Autowired
	@Qualifier("roleService")
	private IRoleService svcrole;

	@Autowired
	@Qualifier("statisticService")
	private IStatisticService svcstatistic;

	@Autowired
	@Qualifier("studentService")
	private IStudentService svcstudent;

	@Autowired
	@Qualifier("student_groupService")
	private IStudent_groupService svcstudent_group;

	@Autowired
	@Qualifier("subjectService")
	private ISubjectService svcsubject;

	@Autowired
	@Qualifier("syslogService")
	private ISyslogService svcsyslog;

	@Autowired
	@Qualifier("userService")
	private IUserService svcuser;

	@Autowired
	@Qualifier("user_login_logService")
	private IUser_login_logService svcuser_login_log;

	@Autowired
	@Qualifier("vcurriculumService")
	private IVcurriculumService svcvcurriculum;

	@Autowired
	@Qualifier("vevaluationService")
	private IVevaluationService svcvevaluation;

	@Autowired
	@Qualifier("vevaluation_pointService")
	private IVevaluation_pointService svcvevaluation_point;

	@Autowired
	@Qualifier("vexperiment_recordService")
	private IVexperiment_recordService svcvexperiment_record;

	@Autowired
	@Qualifier("vexperiment_record_miniService")
	private IVexperiment_record_miniService svcvexperiment_record_mini;

	@Autowired
	@Qualifier("vlink_experiment_curriculumService")
	private IVlink_experiment_curriculumService svcvlink_experiment_curriculum;

	@Autowired
	@Qualifier("vlink_experiment_curriculum_minService")
	private IVlink_experiment_curriculum_minService svcvlink_experiment_curriculum_min;

	@Autowired
	@Qualifier("vlink_student2groupService")
	private IVlink_student2groupService svcvlink_student2group;

	// TODO:--------------manageConfig-begin----------------
	/***
	 * 统计Config中，指定字段的最大值列表
	 * 
	 * @param fieldname 需要统计的字段
	 * @return Config表，指定字段中的最大值
	 */
	public Integer maxConfig(String fieldname) {

		int rtv = 0;
		try {
			rtv = svcconfig.max(fieldname);
		} catch (Exception e) {
		}
		return rtv;
	}

	/***
	 * 查询全部，返回一个map，用于数量较少时的映射
	 * 
	 * @return
	 */
	public Map<Integer, String> mapConfig() {
		List<Config> list = svcconfig.list();
		Map<Integer, String> map = new HashMap<Integer, String>();
		for (int i = 0; i < list.size(); i++) {
			map.put(list.get(i).getId(), list.get(i).getName());
		}
		return map;
	}

	public Map<Integer, String> mapConfig(Map<String, Object> params) {
		List<Config> list = listConfigByMap(params);
		Map<Integer, String> map = new HashMap<Integer, String>();
		for (int i = 0; i < list.size(); i++) {
			map.put(list.get(i).getId(), list.get(i).getName());
		}
		return map;
	}

	/***
	 * 查询，返回Config列表
	 * 
	 * @return Config列表
	 */
	public List<Config> listConfig() {
		Map<String, Object> params = new HashMap<String, Object>();
		return (List<Config>) svcconfig.listByMap(params);
	}

	/***
	 * 查询，返回Config列表
	 * 
	 * @param params 查询条件
	 * @return Config列表
	 */
	public List<Config> listConfigByMap(Map<String, Object> params) {

		logger.debug(this.getClass().getName() + ".listConfigByMap()");
		return (List<Config>) svcconfig.listByMap(params);
	}

	/***
	 * 查询，返回Config列表
	 * 
	 * @param params  查询条件（可以多个）
	 * @param ordlist 排序条件（可以多个）
	 * @return Config列表
	 */
	public List<Config> listConfigByMap(Map<String, Object> params, List<KeyAndValue> ordlist) {

		logger.debug(this.getClass().getName() + ".listConfigByMap()");
		// Map<String, Object> params = new HashMap<String, Object>();
		// params.put(Config.ID, 0);
		// List<KeyAndValue> ordlist = new ArrayList<KeyAndValue>();
		// ordlist.add(new KeyAndValue(Config.ID, "desc"));
		QueryWrapper<Config> queryWrapper = new QueryWrapper<>();
		if (params.size() > 0) {
			queryWrapper.allEq(params);
		}
		for (KeyAndValue od : ordlist) {
			if (od.getValue().equals("desc")) {
				queryWrapper.orderByDesc((String) od.getKey());
			} else {
				queryWrapper.orderByAsc((String) od.getKey());
			}
		}
		return svcconfig.list(queryWrapper);
	}

	/***
	 * 按id查询，返回Config
	 * 
	 * @param id
	 * @return Config
	 */
	public Config getConfigById(Serializable id) {

		logger.debug(this.getClass().getName() + ".getConfigById()");
		return svcconfig.getById(id);
	}

	/***
	 * 通过唯一值(数字)查找记录，返回Config
	 * 
	 * @param infoid
	 * @return Config
	 */
	public Config getConfigByCreate_userid(Serializable create_userid) {

		logger.debug(this.getClass().getName() + ".getConfigByCreate_userid()");
		return svcconfig.getOne(new QueryWrapper<Config>().eq(Config.CREATE_USERID, create_userid).last("limit 1"));
	}

	/***
	 * 通过Map(多个条件)，查询返回Config
	 * 
	 * @param params 多个条件
	 * @return Config
	 */
	public Config getConfigByMap(Map<String, Object> params) {

		logger.debug(this.getClass().getName() + ".getConfigByMap()");
		// Map<String, Object> params = new HashMap<String, Object>();
		// params.put(Config.ID, 0);
		return svcconfig.getOne(new QueryWrapper<Config>().allEq(params).last("limit 1"));
	}

	/***
	 * 查询，返回Config列表
	 * 
	 * @param columnname 排序字段
	 * @return Config列表
	 */
	public List<Config> listConfigOrderByAsc(String columnname) {

		logger.debug(this.getClass().getName() + ".listConfigOrderByAsc()");
		return svcconfig.list(new QueryWrapper<Config>().orderByAsc(columnname));
	}

	/***
	 * 查询，返回Config列表
	 * 
	 * @param columnname 排序字段
	 * @return Config列表
	 */
	public List<Config> listConfigOrderByDesc(String columnname) {

		logger.debug(this.getClass().getName() + ".listConfigOrderByDesc()");
		return svcconfig.list(new QueryWrapper<Config>().orderByDesc(columnname));
	}

	/***
	 * 查询，返回Config列表
	 * 
	 * @param columnname 排序字段
	 * @return Config列表
	 */
	public List<Config> listConfigByMapAsc(Map<String, Object> params, String columnname) {

		logger.debug(this.getClass().getName() + ".listConfigByMapAsc()");
		return svcconfig.list(new QueryWrapper<Config>().allEq(params).orderByAsc(columnname));
	}

	/***
	 * 查询，返回Config列表
	 * 
	 * @param columnname 排序字段
	 * @return Config列表
	 */
	public List<Config> listConfigByMapDesc(Map<String, Object> params, String columnname) {

		logger.debug(this.getClass().getName() + ".listConfigByMapDesc()");
		return svcconfig.list(new QueryWrapper<Config>().allEq(params).orderByDesc(columnname));
	}

	/***
	 * 
	 * @param pagenumber 页码
	 * @param pagesize   页面显示数量
	 * @return
	 */
	public PagerList<Config> pagerListConfig(Integer pagenumber, Integer pagesize) {

		return pagerListConfig(pagenumber, pagesize, "", new HashMap<String, String>());
	}

	/***
	 * 
	 * @param pagenumber 页码
	 * @param pagesize   页面显示数量
	 * @param keyword    关键字
	 * @return
	 */
	public PagerList<Config> pagerListConfig(Integer pagenumber, Integer pagesize, String keyword) {

		return pagerListConfig(pagenumber, pagesize, keyword, new HashMap<String, String>());
	}

	/***
	 * 
	 * @param pagenumber 页码
	 * @param pagesize   页面显示数量
	 * @param keyword    关键字
	 * @param sqlin      用in子句包括的id值
	 * @return
	 */
	public PagerList<Config> pagerListConfig(Integer pagenumber, Integer pagesize, String keyword,
			Map<String, String> sqlin) {
		return pagerListConfig(pagenumber, pagesize, keyword, sqlin, new HashMap<String, Object>());
	}

	/***
	 * 
	 * @param pagenumber 页码
	 * @param pagesize   页面显示数量
	 * @param keyword    关键字
	 * @param sqlin      用in子句包括的id值
	 * @param params     筛选条件
	 * @return
	 */
	public PagerList<Config> pagerListConfig(Integer pagenumber, Integer pagesize, String keyword,
			Map<String, String> sqlin, Map<String, Object> params) {
		List<KeyAndValue> ordlist = new ArrayList<KeyAndValue>();
		ordlist.add(new KeyAndValue(Config.ID, "desc"));
		return pagerListConfig(pagenumber, pagesize, keyword, sqlin, params, ordlist);
	}

	/***
	 * 
	 * @param pagenumber 页码
	 * @param pagesize   页面显示数量
	 * @param keyword    关键字
	 * @param sqlin      用in子句包括的id值
	 * @return
	 */
	public PagerList<Config> pagerListConfig(Integer pagenumber, Integer pagesize, String keyword,
			Map<String, String> sqlin, Map<String, Object> params, List<KeyAndValue> ordlist) {

		Page<Config> page = new Page<>(pagenumber, pagesize);
		List<Config> list = null;

		QueryWrapper<Config> queryWrapper = new QueryWrapper<>();
		// 读取url中是否包含筛选条件

		if (params.size() > 0) {
			queryWrapper.allEq(params);
		}
		if (StringUtils.isBlank(keyword)) {

			// --------1.准确匹配模式---------

		} else {
			// --------2.模糊匹配模式---------
			// 添加关键字模糊查找条件
			if (!StringUtils.isBlank(keyword)) {
				String kwss = keyword;
				queryWrapper.and(
						wr -> wr.like(Config.NAME, kwss).or().like(Config.VALUE, kwss).or().like(Config.REMARK, kwss));
			}
			// 添加id使用in语句筛选
			// --------2.模糊匹配模式---------
		}
		for (KeyAndValue od : ordlist) {
			if (od.getValue().equals("desc")) {
				queryWrapper.orderByDesc((String) od.getKey());
			} else {
				queryWrapper.orderByAsc((String) od.getKey());
			}
		}
		list = svcconfig.page(page, queryWrapper).getRecords();
		// 清理数据,标注关键字，范围：所有字符型
		for (int i = 0; i < list.size(); i++) {
			// 如果头像为空，加载默认头像
			// if (StringUtils.isBlank(list.get(i).getWechat_headimgurl())
			// || list.get(i).getWechat_headimgurl().equals("0")) {
			// list.get(i).setWechat_headimgurl(Common.userheadimgurl);
			// }
			// 标注关键字，范围：所有字符型
			if (!StringUtils.isBlank(keyword)) {
				// 避免空值出现错误
				try {

					list.get(i).setName((list.get(i).getName().replace(keyword, Common.getKeywordSpan(keyword))));
					list.get(i).setValue((list.get(i).getValue().replace(keyword, Common.getKeywordSpan(keyword))));
					list.get(i).setRemark((list.get(i).getRemark().replace(keyword, Common.getKeywordSpan(keyword))));
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		}

		Pager<Config> pager = new Pager<>(page);
		PagerList<Config> pagerList = new PagerList<>(pager, list);

		return pagerList;
	}

	/***
	 * 保持新的实体，返回是否成功
	 * 
	 * @param it 实体
	 * @return 是否成功
	 */
	public Boolean saveConfig(Config it) {

		logger.debug(this.getClass().getName() + ".saveConfig()");
		return svcconfig.save(it);
	}

	/***
	 * 按id删除，返回是否成功
	 * 
	 * @param id
	 * @return 是否成功
	 */
	public Boolean removeConfigById(Serializable id) {

		logger.debug(this.getClass().getName() + ".removeConfigById()");
		return svcconfig.removeById(id);
	}

	/***
	 * 按id修改实体，返回布尔值，是否成功
	 * 
	 * @param it 实体
	 * @return 是否成功
	 */
	public Boolean updateConfigById(String name, String value, String remark, Integer update_userid, Long update_gmt,
			Integer id) {

		logger.debug(this.getClass().getName() + ".updateConfigById()");
		UpdateWrapper<Config> uwr = new UpdateWrapper<>();
		uwr.set(Config.NAME, name);
		uwr.set(Config.VALUE, value);
		uwr.set(Config.REMARK, remark);
		uwr.set(Config.UPDATE_USERID, update_userid);
		uwr.set(Config.UPDATE_GMT, update_gmt);

		uwr.eq(Config.ID, id);
		return svcconfig.update(uwr);
	}

	/***
	 * 按id修改实体，返回是否成功
	 * 
	 * @param it 实体
	 * @return 是否成功
	 */
	public Boolean updateConfigById(Config it) {

		logger.debug(this.getClass().getName() + ".updateConfigById()");
		return svcconfig.updateById(it);
	}

	/***
	 * 统计当前表的数量
	 * 
	 * @return
	 */
	public Integer countConfig() {
		return svcconfig.count();
	}

	/***
	 * 统计当前表的数量
	 * 
	 * @return
	 */
	public Integer countConfig(QueryWrapper<Config> queryWrapper) {
		return svcconfig.count(queryWrapper);
	}

	/***
	 * 按自定义查询统计,返回map
	 * 
	 * @return
	 */
	public Map<String, Integer> statConfigGroupbyId() {
		List<Map<String, Object>> list = svcconfig.listMaps(new QueryWrapper<Config>().select(Config.NAME, "count(*)")
				.eq(Config.CREATE_USERID, 0).groupBy(Config.ID).orderByAsc(Config.ID));
		return Util.listmapToMap(list, Config.NAME, "count(*)");
	}

	/***
	 * 按自定义查询统计,返回map
	 * 
	 * @return
	 */
	public Map<String, Integer> statConfigGroupbyCreate_userid() {

		return svcconfig.statMapByFieldname(Config.CREATE_USERID);
	}

	// TODO:--------------manageConfig-end----------------
	// TODO:--------------manageCurriculum-begin----------------
	/***
	 * 统计Curriculum中，指定字段的最大值列表
	 * 
	 * @param fieldname 需要统计的字段
	 * @return Curriculum表，指定字段中的最大值
	 */
	public Integer maxCurriculum(String fieldname) {

		int rtv = 0;
		try {
			rtv = svccurriculum.max(fieldname);
		} catch (Exception e) {
		}
		return rtv;
	}

	/***
	 * 查询全部，返回一个map，用于数量较少时的映射
	 * 
	 * @return
	 */
	public Map<Integer, String> mapCurriculum() {
		List<Curriculum> list = svccurriculum.list();
		Map<Integer, String> map = new HashMap<Integer, String>();
		for (int i = 0; i < list.size(); i++) {
			map.put(list.get(i).getId(), list.get(i).getSemester());
		}
		return map;
	}

	public Map<Integer, String> mapCurriculum(Map<String, Object> params) {
		List<Curriculum> list = listCurriculumByMap(params);
		Map<Integer, String> map = new HashMap<Integer, String>();
		for (int i = 0; i < list.size(); i++) {
			map.put(list.get(i).getId(), list.get(i).getSemester());
		}
		return map;
	}

	/***
	 * 查询，返回Curriculum列表
	 * 
	 * @return Curriculum列表
	 */
	public List<Curriculum> listCurriculum() {

		Map<String, Object> params = new HashMap<String, Object>();
		return (List<Curriculum>) svccurriculum.listByMap(params);
	}

	/***
	 * 查询，返回Curriculum列表
	 * 
	 * @param params 查询条件
	 * @return Curriculum列表
	 */
	public List<Curriculum> listCurriculumByMap(Map<String, Object> params) {

		logger.debug(this.getClass().getName() + ".listCurriculumByMap()");
		return (List<Curriculum>) svccurriculum.listByMap(params);
	}

	/***
	 * 查询，返回Curriculum列表
	 * 
	 * @param params  查询条件（可以多个）
	 * @param ordlist 排序条件（可以多个）
	 * @return Curriculum列表
	 */
	public List<Curriculum> listCurriculumByMap(Map<String, Object> params, List<KeyAndValue> ordlist) {

		logger.debug(this.getClass().getName() + ".listCurriculumByMap()");
		// Map<String, Object> params = new HashMap<String, Object>();
		// params.put(Curriculum.ID, 0);
		// List<KeyAndValue> ordlist = new ArrayList<KeyAndValue>();
		// ordlist.add(new KeyAndValue(Curriculum.ID, "desc"));
		QueryWrapper<Curriculum> queryWrapper = new QueryWrapper<>();
		if (params.size() > 0) {
			queryWrapper.allEq(params);
		}
		for (KeyAndValue od : ordlist) {
			if (od.getValue().equals("desc")) {
				queryWrapper.orderByDesc((String) od.getKey());
			} else {
				queryWrapper.orderByAsc((String) od.getKey());
			}
		}
		return svccurriculum.list(queryWrapper);
	}

	/***
	 * 按id查询，返回Curriculum
	 * 
	 * @param id
	 * @return Curriculum
	 */
	public Curriculum getCurriculumById(Serializable id) {

		logger.debug(this.getClass().getName() + ".getCurriculumById()");
		return svccurriculum.getById(id);
	}

	/***
	 * 通过唯一值(数字)查找记录，返回Curriculum
	 * 
	 * @param infoid
	 * @return Curriculum
	 */
	public Curriculum getCurriculumBySubject_id(Serializable subject_id) {

		logger.debug(this.getClass().getName() + ".getCurriculumBySubject_id()");
		return svccurriculum
				.getOne(new QueryWrapper<Curriculum>().eq(Curriculum.SUBJECT_ID, subject_id).last("limit 1"));
	}

	/***
	 * 通过Map(多个条件)，查询返回Curriculum
	 * 
	 * @param params 多个条件
	 * @return Curriculum
	 */
	public Curriculum getCurriculumByMap(Map<String, Object> params) {

		logger.debug(this.getClass().getName() + ".getCurriculumByMap()");
		// Map<String, Object> params = new HashMap<String, Object>();
		// params.put(Curriculum.ID, 0);
		return svccurriculum.getOne(new QueryWrapper<Curriculum>().allEq(params).last("limit 1"));
	}

	/***
	 * 查询，返回Curriculum列表
	 * 
	 * @param columnname 排序字段
	 * @return Curriculum列表
	 */
	public List<Curriculum> listCurriculumOrderByAsc(String columnname) {

		logger.debug(this.getClass().getName() + ".listCurriculumOrderByAsc()");
		return svccurriculum.list(new QueryWrapper<Curriculum>().orderByAsc(columnname));
	}

	/***
	 * 查询，返回Curriculum列表
	 * 
	 * @param columnname 排序字段
	 * @return Curriculum列表
	 */
	public List<Curriculum> listCurriculumOrderByDesc(String columnname) {

		logger.debug(this.getClass().getName() + ".listCurriculumOrderByDesc()");
		return svccurriculum.list(new QueryWrapper<Curriculum>().orderByDesc(columnname));
	}

	/***
	 * 查询，返回Curriculum列表
	 * 
	 * @param columnname 排序字段
	 * @return Curriculum列表
	 */
	public List<Curriculum> listCurriculumByMapAsc(Map<String, Object> params, String columnname) {

		logger.debug(this.getClass().getName() + ".listCurriculumByMapAsc()");
		return svccurriculum.list(new QueryWrapper<Curriculum>().allEq(params).orderByAsc(columnname));
	}

	/***
	 * 查询，返回Curriculum列表
	 * 
	 * @param columnname 排序字段
	 * @return Curriculum列表
	 */
	public List<Curriculum> listCurriculumByMapDesc(Map<String, Object> params, String columnname) {

		logger.debug(this.getClass().getName() + ".listCurriculumByMapDesc()");
		return svccurriculum.list(new QueryWrapper<Curriculum>().allEq(params).orderByDesc(columnname));
	}

	/***
	 * 
	 * @param pagenumber 页码
	 * @param pagesize   页面显示数量
	 * @return
	 */
	public PagerList<Curriculum> pagerListCurriculum(Integer pagenumber, Integer pagesize) {

		return pagerListCurriculum(pagenumber, pagesize, "", new HashMap<String, String>());
	}

	/***
	 * 
	 * @param pagenumber 页码
	 * @param pagesize   页面显示数量
	 * @param keyword    关键字
	 * @return
	 */
	public PagerList<Curriculum> pagerListCurriculum(Integer pagenumber, Integer pagesize, String keyword) {

		return pagerListCurriculum(pagenumber, pagesize, keyword, new HashMap<String, String>());
	}

	/***
	 * 
	 * @param pagenumber 页码
	 * @param pagesize   页面显示数量
	 * @param keyword    关键字
	 * @param sqlin      用in子句包括的id值
	 * @return
	 */
	public PagerList<Curriculum> pagerListCurriculum(Integer pagenumber, Integer pagesize, String keyword,
			Map<String, String> sqlin) {
		return pagerListCurriculum(pagenumber, pagesize, keyword, sqlin, new HashMap<String, Object>());
	}

	/***
	 * 
	 * @param pagenumber 页码
	 * @param pagesize   页面显示数量
	 * @param keyword    关键字
	 * @param sqlin      用in子句包括的id值
	 * @param params     筛选条件
	 * @return
	 */
	public PagerList<Curriculum> pagerListCurriculum(Integer pagenumber, Integer pagesize, String keyword,
			Map<String, String> sqlin, Map<String, Object> params) {
		List<KeyAndValue> ordlist = new ArrayList<KeyAndValue>();
		ordlist.add(new KeyAndValue(Curriculum.ID, "desc"));
		return pagerListCurriculum(pagenumber, pagesize, keyword, sqlin, params, ordlist);
	}

	/***
	 * 
	 * @param pagenumber 页码
	 * @param pagesize   页面显示数量
	 * @param keyword    关键字
	 * @param sqlin      用in子句包括的id值
	 * @return
	 */
	public PagerList<Curriculum> pagerListCurriculum(Integer pagenumber, Integer pagesize, String keyword,
			Map<String, String> sqlin, Map<String, Object> params, List<KeyAndValue> ordlist) {

		Page<Curriculum> page = new Page<>(pagenumber, pagesize);
		List<Curriculum> list = null;

		QueryWrapper<Curriculum> queryWrapper = new QueryWrapper<>();
		// 读取url中是否包含筛选条件
		String subject_id = sqlin.get(Curriculum.SUBJECT_ID + "_id");
		String student_group_id = sqlin.get(Curriculum.STUDENT_GROUP_ID + "_id");
		String user_id = sqlin.get(Curriculum.USER_ID + "_id");

		if (params.size() > 0) {
			queryWrapper.allEq(params);
		}
		if (StringUtils.isBlank(keyword) && StringUtils.isBlank(subject_id) && StringUtils.isBlank(student_group_id)
				&& StringUtils.isBlank(user_id)) {

			// --------1.准确匹配模式---------

		} else {
			// --------2.模糊匹配模式---------
			// 添加关键字模糊查找条件
			if (!StringUtils.isBlank(keyword)) {
				String kwss = keyword;
				queryWrapper.and(wr -> wr.like(Curriculum.SEMESTER, kwss));
			}
			// 添加id使用in语句筛选
			if (!StringUtils.isBlank(subject_id)) {
				queryWrapper.inSql(Curriculum.SUBJECT_ID, subject_id);
			}
			if (!StringUtils.isBlank(student_group_id)) {
				queryWrapper.inSql(Curriculum.STUDENT_GROUP_ID, student_group_id);
			}
			if (!StringUtils.isBlank(user_id)) {
				queryWrapper.inSql(Curriculum.USER_ID, user_id);
			}
			// --------2.模糊匹配模式---------
		}
		for (KeyAndValue od : ordlist) {
			if (od.getValue().equals("desc")) {
				queryWrapper.orderByDesc((String) od.getKey());
			} else {
				queryWrapper.orderByAsc((String) od.getKey());
			}
		}
		list = svccurriculum.page(page, queryWrapper).getRecords();
		// 清理数据,标注关键字，范围：所有字符型
		for (int i = 0; i < list.size(); i++) {
			// 如果头像为空，加载默认头像
			// if (StringUtils.isBlank(list.get(i).getWechat_headimgurl())
			// || list.get(i).getWechat_headimgurl().equals("0")) {
			// list.get(i).setWechat_headimgurl(Common.userheadimgurl);
			// }
			// 标注关键字，范围：所有字符型
			if (!StringUtils.isBlank(keyword)) {
				// 避免空值出现错误
				try {

					list.get(i)
							.setSemester((list.get(i).getSemester().replace(keyword, Common.getKeywordSpan(keyword))));
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		}

		Pager<Curriculum> pager = new Pager<>(page);
		PagerList<Curriculum> pagerList = new PagerList<>(pager, list);

		return pagerList;
	}

	/***
	 * 保持新的实体，返回是否成功
	 * 
	 * @param it 实体
	 * @return 是否成功
	 */
	public Boolean saveCurriculum(Curriculum it) {

		logger.debug(this.getClass().getName() + ".saveCurriculum()");
		return svccurriculum.save(it);
	}

	/***
	 * 按id删除，返回是否成功
	 * 
	 * @param id
	 * @return 是否成功
	 */
	public Boolean removeCurriculumById(Serializable id) {

		logger.debug(this.getClass().getName() + ".removeCurriculumById()");
		return svccurriculum.removeById(id);
	}

	/***
	 * 按id修改实体，返回布尔值，是否成功
	 * 
	 * @param it 实体
	 * @return 是否成功
	 */
	public Boolean updateCurriculumById(Integer subject_id, Integer student_group_id, Integer user_id,
			Boolean is_actived, String semester, Long update_gmt, Integer id) {

		logger.debug(this.getClass().getName() + ".updateCurriculumById()");
		UpdateWrapper<Curriculum> uwr = new UpdateWrapper<>();
		uwr.set(Curriculum.SUBJECT_ID, subject_id);
		uwr.set(Curriculum.STUDENT_GROUP_ID, student_group_id);
		uwr.set(Curriculum.USER_ID, user_id);
		uwr.set(Curriculum.IS_ACTIVED, is_actived);
		uwr.set(Curriculum.SEMESTER, semester);
		uwr.set(Curriculum.UPDATE_GMT, update_gmt);

		uwr.eq(Curriculum.ID, id);
		return svccurriculum.update(uwr);
	}

	/***
	 * 按id修改实体，返回是否成功
	 * 
	 * @param it 实体
	 * @return 是否成功
	 */
	public Boolean updateCurriculumById(Curriculum it) {

		logger.debug(this.getClass().getName() + ".updateCurriculumById()");
		return svccurriculum.updateById(it);
	}

	/***
	 * 按id修改实体的IS_ACTIVED字段，返回是否成功
	 * 
	 * @param it 实体
	 * @return 是否成功
	 */
	public Boolean updateCurriculumById(String operate, Integer id) {

		logger.debug(this.getClass().getName() + ".updateCurriculumById()IS_ACTIVED");
		UpdateWrapper<Curriculum> uwr = new UpdateWrapper<>();
		if (operate.equals("hideitem")) {
			uwr.set(Curriculum.IS_ACTIVED, false);
		} else {
			uwr.set(Curriculum.IS_ACTIVED, true);
		}
		uwr.eq(Curriculum.ID, id);
		return svccurriculum.update(uwr);
	}

	/***
	 * 统计当前表的数量
	 * 
	 * @return
	 */
	public Integer countCurriculum() {
		return svccurriculum.count();
	}

	/***
	 * 统计当前表的数量
	 * 
	 * @return
	 */
	public Integer countCurriculum(QueryWrapper<Curriculum> queryWrapper) {
		return svccurriculum.count(queryWrapper);
	}

	/***
	 * 按自定义查询统计,返回map
	 * 
	 * @return
	 */
	public Map<String, Integer> statCurriculumGroupbyId() {
		List<Map<String, Object>> list = svccurriculum
				.listMaps(new QueryWrapper<Curriculum>().select(Curriculum.SEMESTER, "count(*)")
						.eq(Curriculum.SUBJECT_ID, 0).groupBy(Curriculum.ID).orderByAsc(Curriculum.ID));
		return Util.listmapToMap(list, Curriculum.SEMESTER, "count(*)");
	}

	/***
	 * 按自定义查询统计,返回map
	 * 
	 * @return
	 */
	public Map<String, Integer> statCurriculumGroupbySubject_id() {

		return svccurriculum.statMapByFieldname(Curriculum.SUBJECT_ID);
	}

	// TODO:--------------manageCurriculum-end----------------
	// TODO:--------------manageEvaluation-begin----------------
	/***
	 * 统计Evaluation中，指定字段的最大值列表
	 * 
	 * @param fieldname 需要统计的字段
	 * @return Evaluation表，指定字段中的最大值
	 */
	public Integer maxEvaluation(String fieldname) {

		int rtv = 0;
		try {
			rtv = svcevaluation.max(fieldname);
		} catch (Exception e) {
		}
		return rtv;
	}

	/***
	 * 查询全部，返回一个map，用于数量较少时的映射
	 * 
	 * @return
	 */
	public Map<Integer, String> mapEvaluation() {
		List<Evaluation> list = svcevaluation.list();
		Map<Integer, String> map = new HashMap<Integer, String>();
		for (int i = 0; i < list.size(); i++) {
			map.put(list.get(i).getId(), list.get(i).getContent());
		}
		return map;
	}

	public Map<Integer, String> mapEvaluation(Map<String, Object> params) {
		List<Evaluation> list = listEvaluationByMap(params);
		Map<Integer, String> map = new HashMap<Integer, String>();
		for (int i = 0; i < list.size(); i++) {
			map.put(list.get(i).getId(), list.get(i).getContent());
		}
		return map;
	}

	/***
	 * 查询，返回Evaluation列表
	 * 
	 * @return Evaluation列表
	 */
	public List<Evaluation> listEvaluation() {

		Map<String, Object> params = new HashMap<String, Object>();
		return (List<Evaluation>) svcevaluation.listByMap(params);
	}

	/***
	 * 查询，返回Evaluation列表
	 * 
	 * @param params 查询条件
	 * @return Evaluation列表
	 */
	public List<Evaluation> listEvaluationByMap(Map<String, Object> params) {

		logger.debug(this.getClass().getName() + ".listEvaluationByMap()");
		return (List<Evaluation>) svcevaluation.listByMap(params);
	}

	/***
	 * 查询，返回Evaluation列表
	 * 
	 * @param params  查询条件（可以多个）
	 * @param ordlist 排序条件（可以多个）
	 * @return Evaluation列表
	 */
	public List<Evaluation> listEvaluationByMap(Map<String, Object> params, List<KeyAndValue> ordlist) {

		logger.debug(this.getClass().getName() + ".listEvaluationByMap()");
		// Map<String, Object> params = new HashMap<String, Object>();
		// params.put(Evaluation.ID, 0);
		// List<KeyAndValue> ordlist = new ArrayList<KeyAndValue>();
		// ordlist.add(new KeyAndValue(Evaluation.ID, "desc"));
		QueryWrapper<Evaluation> queryWrapper = new QueryWrapper<>();
		if (params.size() > 0) {
			queryWrapper.allEq(params);
		}
		for (KeyAndValue od : ordlist) {
			if (od.getValue().equals("desc")) {
				queryWrapper.orderByDesc((String) od.getKey());
			} else {
				queryWrapper.orderByAsc((String) od.getKey());
			}
		}
		return svcevaluation.list(queryWrapper);
	}

	/***
	 * 按id查询，返回Evaluation
	 * 
	 * @param id
	 * @return Evaluation
	 */
	public Evaluation getEvaluationById(Serializable id) {

		logger.debug(this.getClass().getName() + ".getEvaluationById()");
		return svcevaluation.getById(id);
	}

	/***
	 * 通过唯一值(数字)查找记录，返回Evaluation
	 * 
	 * @param infoid
	 * @return Evaluation
	 */
	public Evaluation getEvaluationByCurriculum_id(Serializable curriculum_id) {

		logger.debug(this.getClass().getName() + ".getEvaluationByCurriculum_id()");
		return svcevaluation
				.getOne(new QueryWrapper<Evaluation>().eq(Evaluation.CURRICULUM_ID, curriculum_id).last("limit 1"));
	}

	/***
	 * 通过Map(多个条件)，查询返回Evaluation
	 * 
	 * @param params 多个条件
	 * @return Evaluation
	 */
	public Evaluation getEvaluationByMap(Map<String, Object> params) {

		logger.debug(this.getClass().getName() + ".getEvaluationByMap()");
		// Map<String, Object> params = new HashMap<String, Object>();
		// params.put(Evaluation.ID, 0);
		return svcevaluation.getOne(new QueryWrapper<Evaluation>().allEq(params).last("limit 1"));
	}

	/***
	 * 查询，返回Evaluation列表
	 * 
	 * @param columnname 排序字段
	 * @return Evaluation列表
	 */
	public List<Evaluation> listEvaluationOrderByAsc(String columnname) {

		logger.debug(this.getClass().getName() + ".listEvaluationOrderByAsc()");
		return svcevaluation.list(new QueryWrapper<Evaluation>().orderByAsc(columnname));
	}

	/***
	 * 查询，返回Evaluation列表
	 * 
	 * @param columnname 排序字段
	 * @return Evaluation列表
	 */
	public List<Evaluation> listEvaluationOrderByDesc(String columnname) {

		logger.debug(this.getClass().getName() + ".listEvaluationOrderByDesc()");
		return svcevaluation.list(new QueryWrapper<Evaluation>().orderByDesc(columnname));
	}

	/***
	 * 查询，返回Evaluation列表
	 * 
	 * @param columnname 排序字段
	 * @return Evaluation列表
	 */
	public List<Evaluation> listEvaluationByMapAsc(Map<String, Object> params, String columnname) {

		logger.debug(this.getClass().getName() + ".listEvaluationByMapAsc()");
		return svcevaluation.list(new QueryWrapper<Evaluation>().allEq(params).orderByAsc(columnname));
	}

	/***
	 * 查询，返回Evaluation列表
	 * 
	 * @param columnname 排序字段
	 * @return Evaluation列表
	 */
	public List<Evaluation> listEvaluationByMapDesc(Map<String, Object> params, String columnname) {

		logger.debug(this.getClass().getName() + ".listEvaluationByMapDesc()");
		return svcevaluation.list(new QueryWrapper<Evaluation>().allEq(params).orderByDesc(columnname));
	}

	/***
	 * 
	 * @param pagenumber 页码
	 * @param pagesize   页面显示数量
	 * @return
	 */
	public PagerList<Evaluation> pagerListEvaluation(Integer pagenumber, Integer pagesize) {

		return pagerListEvaluation(pagenumber, pagesize, "", new HashMap<String, String>());
	}

	/***
	 * 
	 * @param pagenumber 页码
	 * @param pagesize   页面显示数量
	 * @param keyword    关键字
	 * @return
	 */
	public PagerList<Evaluation> pagerListEvaluation(Integer pagenumber, Integer pagesize, String keyword) {

		return pagerListEvaluation(pagenumber, pagesize, keyword, new HashMap<String, String>());
	}

	/***
	 * 
	 * @param pagenumber 页码
	 * @param pagesize   页面显示数量
	 * @param keyword    关键字
	 * @param sqlin      用in子句包括的id值
	 * @return
	 */
	public PagerList<Evaluation> pagerListEvaluation(Integer pagenumber, Integer pagesize, String keyword,
			Map<String, String> sqlin) {
		return pagerListEvaluation(pagenumber, pagesize, keyword, sqlin, new HashMap<String, Object>());
	}

	/***
	 * 
	 * @param pagenumber 页码
	 * @param pagesize   页面显示数量
	 * @param keyword    关键字
	 * @param sqlin      用in子句包括的id值
	 * @param params     筛选条件
	 * @return
	 */
	public PagerList<Evaluation> pagerListEvaluation(Integer pagenumber, Integer pagesize, String keyword,
			Map<String, String> sqlin, Map<String, Object> params) {
		List<KeyAndValue> ordlist = new ArrayList<KeyAndValue>();
		ordlist.add(new KeyAndValue(Evaluation.SORTID, "desc"));
		return pagerListEvaluation(pagenumber, pagesize, keyword, sqlin, params, ordlist);
	}

	/***
	 * 
	 * @param pagenumber 页码
	 * @param pagesize   页面显示数量
	 * @param keyword    关键字
	 * @param sqlin      用in子句包括的id值
	 * @return
	 */
	public PagerList<Evaluation> pagerListEvaluation(Integer pagenumber, Integer pagesize, String keyword,
			Map<String, String> sqlin, Map<String, Object> params, List<KeyAndValue> ordlist) {

		Page<Evaluation> page = new Page<>(pagenumber, pagesize);
		List<Evaluation> list = null;

		QueryWrapper<Evaluation> queryWrapper = new QueryWrapper<>();
		// 读取url中是否包含筛选条件
		String curriculum_id = sqlin.get(Evaluation.CURRICULUM_ID + "_id");

		if (params.size() > 0) {
			queryWrapper.allEq(params);
		}
		if (StringUtils.isBlank(keyword) && StringUtils.isBlank(curriculum_id)) {

			// --------1.准确匹配模式---------

		} else {
			// --------2.模糊匹配模式---------
			// 添加关键字模糊查找条件
			if (!StringUtils.isBlank(keyword)) {
				String kwss = keyword;
				queryWrapper.and(wr -> wr.like(Evaluation.CONTENT, kwss).or().like(Evaluation.TITLE, kwss));
			}
			// 添加id使用in语句筛选
			if (!StringUtils.isBlank(curriculum_id)) {
				queryWrapper.inSql(Evaluation.CURRICULUM_ID, curriculum_id);
			}
			// --------2.模糊匹配模式---------
		}
		for (KeyAndValue od : ordlist) {
			if (od.getValue().equals("desc")) {
				queryWrapper.orderByDesc((String) od.getKey());
			} else {
				queryWrapper.orderByAsc((String) od.getKey());
			}
		}
		list = svcevaluation.page(page, queryWrapper).getRecords();
		// 清理数据,标注关键字，范围：所有字符型
		for (int i = 0; i < list.size(); i++) {
			// 如果头像为空，加载默认头像
			// if (StringUtils.isBlank(list.get(i).getWechat_headimgurl())
			// || list.get(i).getWechat_headimgurl().equals("0")) {
			// list.get(i).setWechat_headimgurl(Common.userheadimgurl);
			// }
			// 标注关键字，范围：所有字符型
			if (!StringUtils.isBlank(keyword)) {
				// 避免空值出现错误
				try {

					list.get(i).setContent((list.get(i).getContent().replace(keyword, Common.getKeywordSpan(keyword))));
					list.get(i).setTitle((list.get(i).getTitle().replace(keyword, Common.getKeywordSpan(keyword))));
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		}

		Pager<Evaluation> pager = new Pager<>(page);
		PagerList<Evaluation> pagerList = new PagerList<>(pager, list);

		return pagerList;
	}

	/***
	 * 保持新的实体，返回是否成功
	 * 
	 * @param it 实体
	 * @return 是否成功
	 */
	public Boolean saveEvaluation(Evaluation it) {

		logger.debug(this.getClass().getName() + ".saveEvaluation()");
		return svcevaluation.save(it);
	}

	/***
	 * 按id删除，返回是否成功
	 * 
	 * @param id
	 * @return 是否成功
	 */
	public Boolean removeEvaluationById(Serializable id) {

		logger.debug(this.getClass().getName() + ".removeEvaluationById()");
		return svcevaluation.removeById(id);
	}

	/***
	 * 按id修改实体，返回布尔值，是否成功
	 * 
	 * @param it 实体
	 * @return 是否成功
	 */
	public Boolean updateEvaluationById(Integer curriculum_id, Boolean is_actived, Long begin_gmt, Long end_gmt,
			String content, String title, Integer sortid, Long update_gmt, Integer id) {

		logger.debug(this.getClass().getName() + ".updateEvaluationById()");
		UpdateWrapper<Evaluation> uwr = new UpdateWrapper<>();
		uwr.set(Evaluation.CURRICULUM_ID, curriculum_id);
		uwr.set(Evaluation.IS_ACTIVED, is_actived);
		uwr.set(Evaluation.BEGIN_GMT, begin_gmt);
		uwr.set(Evaluation.END_GMT, end_gmt);
		uwr.set(Evaluation.CONTENT, content);
		uwr.set(Evaluation.TITLE, title);
		uwr.set(Evaluation.SORTID, sortid);
		uwr.set(Evaluation.UPDATE_GMT, update_gmt);

		uwr.eq(Evaluation.ID, id);
		return svcevaluation.update(uwr);
	}

	/***
	 * 按id修改实体，返回是否成功
	 * 
	 * @param it 实体
	 * @return 是否成功
	 */
	public Boolean updateEvaluationById(Evaluation it) {

		logger.debug(this.getClass().getName() + ".updateEvaluationById()");
		return svcevaluation.updateById(it);
	}

	/***
	 * 按id修改实体的IS_ACTIVED字段，返回是否成功
	 * 
	 * @param it 实体
	 * @return 是否成功
	 */
	public Boolean updateEvaluationById(String operate, Integer id) {

		logger.debug(this.getClass().getName() + ".updateEvaluationById()IS_ACTIVED");
		UpdateWrapper<Evaluation> uwr = new UpdateWrapper<>();
		if (operate.equals("hideitem")) {
			uwr.set(Evaluation.IS_ACTIVED, false);
		} else {
			uwr.set(Evaluation.IS_ACTIVED, true);
		}
		uwr.eq(Evaluation.ID, id);
		return svcevaluation.update(uwr);
	}

	public Boolean moveEvaluation(String method, String upOrDown, Integer id, String sortColumn) {

		Evaluation it = svcevaluation.getById(id);
		// 读取当前已有信息
		// SELECT * FROM `column` where column_parentid =0 and sortid<4 order by
		// sortid desc limit 1
		QueryWrapper<Evaluation> queryWrapper = new QueryWrapper<>();
		// 同一个父栏目下
		// queryWrapper.eq(Evaluation.COLUMN_PARENTID , it.getColumn_parentid());
		if (method.equals(upOrDown)) {
			queryWrapper.lt(sortColumn, it.getSortid());
			queryWrapper.orderByDesc(sortColumn);
		} else {
			queryWrapper.gt(sortColumn, it.getSortid());
			queryWrapper.orderByAsc(sortColumn);
		}
		queryWrapper.last("limit 1");

		Evaluation target = svcevaluation.getOne(queryWrapper);

		if (target == null) {
			// 没有
			return false;
		} else {

			UpdateWrapper<Evaluation> uwr1 = new UpdateWrapper<>();
			uwr1.set(Evaluation.SORTID, target.getSortid());
			uwr1.eq(Evaluation.ID, it.getId());

			UpdateWrapper<Evaluation> uwr2 = new UpdateWrapper<>();
			uwr2.set(Evaluation.SORTID, it.getSortid());
			uwr2.eq(Evaluation.ID, target.getId());

			try {
				svcevaluation.update(uwr1);
				svcevaluation.update(uwr2);
			} catch (Exception e) {
				e.printStackTrace();
				return false;
			}
			return true;
		}
	}

	/***
	 * 统计当前表的数量
	 * 
	 * @return
	 */
	public Integer countEvaluation() {
		return svcevaluation.count();
	}

	/***
	 * 统计当前表的数量
	 * 
	 * @return
	 */
	public Integer countEvaluation(QueryWrapper<Evaluation> queryWrapper) {
		return svcevaluation.count(queryWrapper);
	}

	/***
	 * 按自定义查询统计,返回map
	 * 
	 * @return
	 */
	public Map<String, Integer> statEvaluationGroupbyId() {
		List<Map<String, Object>> list = svcevaluation
				.listMaps(new QueryWrapper<Evaluation>().select(Evaluation.CONTENT, "count(*)")
						.eq(Evaluation.CURRICULUM_ID, 0).groupBy(Evaluation.ID).orderByAsc(Evaluation.ID));
		return Util.listmapToMap(list, Evaluation.CONTENT, "count(*)");
	}

	/***
	 * 按自定义查询统计,返回map
	 * 
	 * @return
	 */
	public Map<String, Integer> statEvaluationGroupbyCurriculum_id() {

		return svcevaluation.statMapByFieldname(Evaluation.CURRICULUM_ID);
	}

	// TODO:--------------manageEvaluation-end----------------
	// TODO:--------------manageEvaluation_ip_record-begin----------------
	/***
	 * 统计Evaluation_ip_record中，指定字段的最大值列表
	 * 
	 * @param fieldname 需要统计的字段
	 * @return Evaluation_ip_record表，指定字段中的最大值
	 */
	public Integer maxEvaluation_ip_record(String fieldname) {

		int rtv = 0;
		try {
			rtv = svcevaluation_ip_record.max(fieldname);
		} catch (Exception e) {
		}
		return rtv;
	}

	/***
	 * 查询全部，返回一个map，用于数量较少时的映射
	 * 
	 * @return
	 */
	public Map<Integer, String> mapEvaluation_ip_record() {
		List<Evaluation_ip_record> list = svcevaluation_ip_record.list();
		Map<Integer, String> map = new HashMap<Integer, String>();
		for (int i = 0; i < list.size(); i++) {
			map.put(list.get(i).getId(), list.get(i).getSno());
		}
		return map;
	}

	public Map<Integer, String> mapEvaluation_ip_record(Map<String, Object> params) {
		List<Evaluation_ip_record> list = listEvaluation_ip_recordByMap(params);
		Map<Integer, String> map = new HashMap<Integer, String>();
		for (int i = 0; i < list.size(); i++) {
			map.put(list.get(i).getId(), list.get(i).getSno());
		}
		return map;
	}

	/***
	 * 查询，返回Evaluation_ip_record列表
	 * 
	 * @return Evaluation_ip_record列表
	 */
	public List<Evaluation_ip_record> listEvaluation_ip_record() {

		Map<String, Object> params = new HashMap<String, Object>();
		return (List<Evaluation_ip_record>) svcevaluation_ip_record.listByMap(params);
	}

	/***
	 * 查询，返回Evaluation_ip_record列表
	 * 
	 * @param params 查询条件
	 * @return Evaluation_ip_record列表
	 */
	public List<Evaluation_ip_record> listEvaluation_ip_recordByMap(Map<String, Object> params) {

		logger.debug(this.getClass().getName() + ".listEvaluation_ip_recordByMap()");
		return (List<Evaluation_ip_record>) svcevaluation_ip_record.listByMap(params);
	}

	/***
	 * 查询，返回Evaluation_ip_record列表
	 * 
	 * @param params  查询条件（可以多个）
	 * @param ordlist 排序条件（可以多个）
	 * @return Evaluation_ip_record列表
	 */
	public List<Evaluation_ip_record> listEvaluation_ip_recordByMap(Map<String, Object> params,
			List<KeyAndValue> ordlist) {

		logger.debug(this.getClass().getName() + ".listEvaluation_ip_recordByMap()");
		// Map<String, Object> params = new HashMap<String, Object>();
		// params.put(Evaluation_ip_record.ID, 0);
		// List<KeyAndValue> ordlist = new ArrayList<KeyAndValue>();
		// ordlist.add(new KeyAndValue(Evaluation_ip_record.ID, "desc"));
		QueryWrapper<Evaluation_ip_record> queryWrapper = new QueryWrapper<>();
		if (params.size() > 0) {
			queryWrapper.allEq(params);
		}
		for (KeyAndValue od : ordlist) {
			if (od.getValue().equals("desc")) {
				queryWrapper.orderByDesc((String) od.getKey());
			} else {
				queryWrapper.orderByAsc((String) od.getKey());
			}
		}
		return svcevaluation_ip_record.list(queryWrapper);
	}

	/***
	 * 按id查询，返回Evaluation_ip_record
	 * 
	 * @param id
	 * @return Evaluation_ip_record
	 */
	public Evaluation_ip_record getEvaluation_ip_recordById(Serializable id) {

		logger.debug(this.getClass().getName() + ".getEvaluation_ip_recordById()");
		return svcevaluation_ip_record.getById(id);
	}

	/***
	 * 通过唯一值(数字)查找记录，返回Evaluation_ip_record
	 * 
	 * @param infoid
	 * @return Evaluation_ip_record
	 */
	public Evaluation_ip_record getEvaluation_ip_recordByStudent_id(Serializable student_id) {

		logger.debug(this.getClass().getName() + ".getEvaluation_ip_recordByStudent_id()");
		return svcevaluation_ip_record.getOne(new QueryWrapper<Evaluation_ip_record>()
				.eq(Evaluation_ip_record.STUDENT_ID, student_id).last("limit 1"));
	}

	/***
	 * 通过Map(多个条件)，查询返回Evaluation_ip_record
	 * 
	 * @param params 多个条件
	 * @return Evaluation_ip_record
	 */
	public Evaluation_ip_record getEvaluation_ip_recordByMap(Map<String, Object> params) {

		logger.debug(this.getClass().getName() + ".getEvaluation_ip_recordByMap()");
		// Map<String, Object> params = new HashMap<String, Object>();
		// params.put(Evaluation_ip_record.ID, 0);
		return svcevaluation_ip_record.getOne(new QueryWrapper<Evaluation_ip_record>().allEq(params).last("limit 1"));
	}

	/***
	 * 查询，返回Evaluation_ip_record列表
	 * 
	 * @param columnname 排序字段
	 * @return Evaluation_ip_record列表
	 */
	public List<Evaluation_ip_record> listEvaluation_ip_recordOrderByAsc(String columnname) {

		logger.debug(this.getClass().getName() + ".listEvaluation_ip_recordOrderByAsc()");
		return svcevaluation_ip_record.list(new QueryWrapper<Evaluation_ip_record>().orderByAsc(columnname));
	}

	/***
	 * 查询，返回Evaluation_ip_record列表
	 * 
	 * @param columnname 排序字段
	 * @return Evaluation_ip_record列表
	 */
	public List<Evaluation_ip_record> listEvaluation_ip_recordOrderByDesc(String columnname) {

		logger.debug(this.getClass().getName() + ".listEvaluation_ip_recordOrderByDesc()");
		return svcevaluation_ip_record.list(new QueryWrapper<Evaluation_ip_record>().orderByDesc(columnname));
	}

	/***
	 * 查询，返回Evaluation_ip_record列表
	 * 
	 * @param columnname 排序字段
	 * @return Evaluation_ip_record列表
	 */
	public List<Evaluation_ip_record> listEvaluation_ip_recordByMapAsc(Map<String, Object> params, String columnname) {

		logger.debug(this.getClass().getName() + ".listEvaluation_ip_recordByMapAsc()");
		return svcevaluation_ip_record
				.list(new QueryWrapper<Evaluation_ip_record>().allEq(params).orderByAsc(columnname));
	}

	/***
	 * 查询，返回Evaluation_ip_record列表
	 * 
	 * @param columnname 排序字段
	 * @return Evaluation_ip_record列表
	 */
	public List<Evaluation_ip_record> listEvaluation_ip_recordByMapDesc(Map<String, Object> params, String columnname) {

		logger.debug(this.getClass().getName() + ".listEvaluation_ip_recordByMapDesc()");
		return svcevaluation_ip_record
				.list(new QueryWrapper<Evaluation_ip_record>().allEq(params).orderByDesc(columnname));
	}

	/***
	 * 
	 * @param pagenumber 页码
	 * @param pagesize   页面显示数量
	 * @return
	 */
	public PagerList<Evaluation_ip_record> pagerListEvaluation_ip_record(Integer pagenumber, Integer pagesize) {

		return pagerListEvaluation_ip_record(pagenumber, pagesize, "", new HashMap<String, String>());
	}

	/***
	 * 
	 * @param pagenumber 页码
	 * @param pagesize   页面显示数量
	 * @param keyword    关键字
	 * @return
	 */
	public PagerList<Evaluation_ip_record> pagerListEvaluation_ip_record(Integer pagenumber, Integer pagesize,
			String keyword) {

		return pagerListEvaluation_ip_record(pagenumber, pagesize, keyword, new HashMap<String, String>());
	}

	/***
	 * 
	 * @param pagenumber 页码
	 * @param pagesize   页面显示数量
	 * @param keyword    关键字
	 * @param sqlin      用in子句包括的id值
	 * @return
	 */
	public PagerList<Evaluation_ip_record> pagerListEvaluation_ip_record(Integer pagenumber, Integer pagesize,
			String keyword, Map<String, String> sqlin) {
		return pagerListEvaluation_ip_record(pagenumber, pagesize, keyword, sqlin, new HashMap<String, Object>());
	}

	/***
	 * 
	 * @param pagenumber 页码
	 * @param pagesize   页面显示数量
	 * @param keyword    关键字
	 * @param sqlin      用in子句包括的id值
	 * @param params     筛选条件
	 * @return
	 */
	public PagerList<Evaluation_ip_record> pagerListEvaluation_ip_record(Integer pagenumber, Integer pagesize,
			String keyword, Map<String, String> sqlin, Map<String, Object> params) {
		List<KeyAndValue> ordlist = new ArrayList<KeyAndValue>();
		ordlist.add(new KeyAndValue(Evaluation_ip_record.ID, "desc"));
		return pagerListEvaluation_ip_record(pagenumber, pagesize, keyword, sqlin, params, ordlist);
	}

	/***
	 * 
	 * @param pagenumber 页码
	 * @param pagesize   页面显示数量
	 * @param keyword    关键字
	 * @param sqlin      用in子句包括的id值
	 * @return
	 */
	public PagerList<Evaluation_ip_record> pagerListEvaluation_ip_record(Integer pagenumber, Integer pagesize,
			String keyword, Map<String, String> sqlin, Map<String, Object> params, List<KeyAndValue> ordlist) {

		Page<Evaluation_ip_record> page = new Page<>(pagenumber, pagesize);
		List<Evaluation_ip_record> list = null;

		QueryWrapper<Evaluation_ip_record> queryWrapper = new QueryWrapper<>();
		// 读取url中是否包含筛选条件
		String student_id = sqlin.get(Evaluation_ip_record.STUDENT_ID + "_id");
		String evaluation_id = sqlin.get(Evaluation_ip_record.EVALUATION_ID + "_id");

		if (params.size() > 0) {
			queryWrapper.allEq(params);
		}
		if (StringUtils.isBlank(keyword) && StringUtils.isBlank(student_id) && StringUtils.isBlank(evaluation_id)) {

			// --------1.准确匹配模式---------

		} else {
			// --------2.模糊匹配模式---------
			// 添加关键字模糊查找条件
			if (!StringUtils.isBlank(keyword)) {
				String kwss = keyword;
				queryWrapper
						.and(wr -> wr.like(Evaluation_ip_record.SNO, kwss).or().like(Evaluation_ip_record.IP, kwss));
			}
			// 添加id使用in语句筛选
			if (!StringUtils.isBlank(student_id)) {
				queryWrapper.inSql(Evaluation_ip_record.STUDENT_ID, student_id);
			}
			if (!StringUtils.isBlank(evaluation_id)) {
				queryWrapper.inSql(Evaluation_ip_record.EVALUATION_ID, evaluation_id);
			}
			// --------2.模糊匹配模式---------
		}
		for (KeyAndValue od : ordlist) {
			if (od.getValue().equals("desc")) {
				queryWrapper.orderByDesc((String) od.getKey());
			} else {
				queryWrapper.orderByAsc((String) od.getKey());
			}
		}
		list = svcevaluation_ip_record.page(page, queryWrapper).getRecords();
		// 清理数据,标注关键字，范围：所有字符型
		for (int i = 0; i < list.size(); i++) {
			// 如果头像为空，加载默认头像
			// if (StringUtils.isBlank(list.get(i).getWechat_headimgurl())
			// || list.get(i).getWechat_headimgurl().equals("0")) {
			// list.get(i).setWechat_headimgurl(Common.userheadimgurl);
			// }
			// 标注关键字，范围：所有字符型
			if (!StringUtils.isBlank(keyword)) {
				// 避免空值出现错误
				try {

					list.get(i).setSno((list.get(i).getSno().replace(keyword, Common.getKeywordSpan(keyword))));
					list.get(i).setIp((list.get(i).getIp().replace(keyword, Common.getKeywordSpan(keyword))));
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		}

		Pager<Evaluation_ip_record> pager = new Pager<>(page);
		PagerList<Evaluation_ip_record> pagerList = new PagerList<>(pager, list);

		return pagerList;
	}

	/***
	 * 保持新的实体，返回是否成功
	 * 
	 * @param it 实体
	 * @return 是否成功
	 */
	public Boolean saveEvaluation_ip_record(Evaluation_ip_record it) {

		logger.debug(this.getClass().getName() + ".saveEvaluation_ip_record()");
		return svcevaluation_ip_record.save(it);
	}

	/***
	 * 按id删除，返回是否成功
	 * 
	 * @param id
	 * @return 是否成功
	 */
	public Boolean removeEvaluation_ip_recordById(Serializable id) {

		logger.debug(this.getClass().getName() + ".removeEvaluation_ip_recordById()");
		return svcevaluation_ip_record.removeById(id);
	}

	/***
	 * 按id修改实体，返回布尔值，是否成功
	 * 
	 * @param it 实体
	 * @return 是否成功
	 */
	public Boolean updateEvaluation_ip_recordById(Integer student_id, String sno, Integer evaluation_id, String ip,
			Integer type, Integer id) {

		logger.debug(this.getClass().getName() + ".updateEvaluation_ip_recordById()");
		UpdateWrapper<Evaluation_ip_record> uwr = new UpdateWrapper<>();
		uwr.set(Evaluation_ip_record.STUDENT_ID, student_id);
		uwr.set(Evaluation_ip_record.SNO, sno);
		uwr.set(Evaluation_ip_record.EVALUATION_ID, evaluation_id);
		uwr.set(Evaluation_ip_record.IP, ip);
		uwr.set(Evaluation_ip_record.TYPE, type);

		uwr.eq(Evaluation_ip_record.ID, id);
		return svcevaluation_ip_record.update(uwr);
	}

	/***
	 * 按id修改实体，返回是否成功
	 * 
	 * @param it 实体
	 * @return 是否成功
	 */
	public Boolean updateEvaluation_ip_recordById(Evaluation_ip_record it) {

		logger.debug(this.getClass().getName() + ".updateEvaluation_ip_recordById()");
		return svcevaluation_ip_record.updateById(it);
	}

	/***
	 * 统计当前表的数量
	 * 
	 * @return
	 */
	public Integer countEvaluation_ip_record() {
		return svcevaluation_ip_record.count();
	}

	/***
	 * 统计当前表的数量
	 * 
	 * @return
	 */
	public Integer countEvaluation_ip_record(QueryWrapper<Evaluation_ip_record> queryWrapper) {
		return svcevaluation_ip_record.count(queryWrapper);
	}

	/***
	 * 按自定义查询统计,返回map
	 * 
	 * @return
	 */
	public Map<String, Integer> statEvaluation_ip_recordGroupbyId() {
		List<Map<String, Object>> list = svcevaluation_ip_record.listMaps(new QueryWrapper<Evaluation_ip_record>()
				.select(Evaluation_ip_record.SNO, "count(*)").eq(Evaluation_ip_record.STUDENT_ID, 0)
				.groupBy(Evaluation_ip_record.ID).orderByAsc(Evaluation_ip_record.ID));
		return Util.listmapToMap(list, Evaluation_ip_record.SNO, "count(*)");
	}

	/***
	 * 按自定义查询统计,返回map
	 * 
	 * @return
	 */
	public Map<String, Integer> statEvaluation_ip_recordGroupbyStudent_id() {

		return svcevaluation_ip_record.statMapByFieldname(Evaluation_ip_record.STUDENT_ID);
	}

	// TODO:--------------manageEvaluation_ip_record-end----------------
	// TODO:--------------manageEvaluation_point-begin----------------
	/***
	 * 统计Evaluation_point中，指定字段的最大值列表
	 * 
	 * @param fieldname 需要统计的字段
	 * @return Evaluation_point表，指定字段中的最大值
	 */
	public Integer maxEvaluation_point(String fieldname) {

		int rtv = 0;
		try {
			rtv = svcevaluation_point.max(fieldname);
		} catch (Exception e) {
		}
		return rtv;
	}

	/***
	 * 查询全部，返回一个map，用于数量较少时的映射
	 * 
	 * @return
	 */
	public Map<Integer, String> mapEvaluation_point() {
		List<Evaluation_point> list = svcevaluation_point.list();
		Map<Integer, String> map = new HashMap<Integer, String>();
		for (int i = 0; i < list.size(); i++) {
			map.put(list.get(i).getId(), list.get(i).getContent());
		}
		return map;
	}

	public Map<Integer, String> mapEvaluation_point(Map<String, Object> params) {
		List<Evaluation_point> list = listEvaluation_pointByMap(params);
		Map<Integer, String> map = new HashMap<Integer, String>();
		for (int i = 0; i < list.size(); i++) {
			map.put(list.get(i).getId(), list.get(i).getContent());
		}
		return map;
	}

	/***
	 * 查询，返回Evaluation_point列表
	 * 
	 * @return Evaluation_point列表
	 */
	public List<Evaluation_point> listEvaluation_point() {

		Map<String, Object> params = new HashMap<String, Object>();
		return (List<Evaluation_point>) svcevaluation_point.listByMap(params);
	}

	/***
	 * 查询，返回Evaluation_point列表
	 * 
	 * @param params 查询条件
	 * @return Evaluation_point列表
	 */
	public List<Evaluation_point> listEvaluation_pointByMap(Map<String, Object> params) {

		logger.debug(this.getClass().getName() + ".listEvaluation_pointByMap()");
		return (List<Evaluation_point>) svcevaluation_point.listByMap(params);
	}

	/***
	 * 查询，返回Evaluation_point列表
	 * 
	 * @param params  查询条件（可以多个）
	 * @param ordlist 排序条件（可以多个）
	 * @return Evaluation_point列表
	 */
	public List<Evaluation_point> listEvaluation_pointByMap(Map<String, Object> params, List<KeyAndValue> ordlist) {

		logger.debug(this.getClass().getName() + ".listEvaluation_pointByMap()");
		// Map<String, Object> params = new HashMap<String, Object>();
		// params.put(Evaluation_point.ID, 0);
		// List<KeyAndValue> ordlist = new ArrayList<KeyAndValue>();
		// ordlist.add(new KeyAndValue(Evaluation_point.ID, "desc"));
		QueryWrapper<Evaluation_point> queryWrapper = new QueryWrapper<>();
		if (params.size() > 0) {
			queryWrapper.allEq(params);
		}
		for (KeyAndValue od : ordlist) {
			if (od.getValue().equals("desc")) {
				queryWrapper.orderByDesc((String) od.getKey());
			} else {
				queryWrapper.orderByAsc((String) od.getKey());
			}
		}
		return svcevaluation_point.list(queryWrapper);
	}

	/***
	 * 按id查询，返回Evaluation_point
	 * 
	 * @param id
	 * @return Evaluation_point
	 */
	public Evaluation_point getEvaluation_pointById(Serializable id) {

		logger.debug(this.getClass().getName() + ".getEvaluation_pointById()");
		return svcevaluation_point.getById(id);
	}

	/***
	 * 通过唯一值(数字)查找记录，返回Evaluation_point
	 * 
	 * @param infoid
	 * @return Evaluation_point
	 */
	public Evaluation_point getEvaluation_pointBySubject_id(Serializable subject_id) {

		logger.debug(this.getClass().getName() + ".getEvaluation_pointBySubject_id()");
		return svcevaluation_point.getOne(
				new QueryWrapper<Evaluation_point>().eq(Evaluation_point.SUBJECT_ID, subject_id).last("limit 1"));
	}

	/***
	 * 通过Map(多个条件)，查询返回Evaluation_point
	 * 
	 * @param params 多个条件
	 * @return Evaluation_point
	 */
	public Evaluation_point getEvaluation_pointByMap(Map<String, Object> params) {

		logger.debug(this.getClass().getName() + ".getEvaluation_pointByMap()");
		// Map<String, Object> params = new HashMap<String, Object>();
		// params.put(Evaluation_point.ID, 0);
		return svcevaluation_point.getOne(new QueryWrapper<Evaluation_point>().allEq(params).last("limit 1"));
	}

	/***
	 * 查询，返回Evaluation_point列表
	 * 
	 * @param columnname 排序字段
	 * @return Evaluation_point列表
	 */
	public List<Evaluation_point> listEvaluation_pointOrderByAsc(String columnname) {

		logger.debug(this.getClass().getName() + ".listEvaluation_pointOrderByAsc()");
		return svcevaluation_point.list(new QueryWrapper<Evaluation_point>().orderByAsc(columnname));
	}

	/***
	 * 查询，返回Evaluation_point列表
	 * 
	 * @param columnname 排序字段
	 * @return Evaluation_point列表
	 */
	public List<Evaluation_point> listEvaluation_pointOrderByDesc(String columnname) {

		logger.debug(this.getClass().getName() + ".listEvaluation_pointOrderByDesc()");
		return svcevaluation_point.list(new QueryWrapper<Evaluation_point>().orderByDesc(columnname));
	}

	/***
	 * 查询，返回Evaluation_point列表
	 * 
	 * @param columnname 排序字段
	 * @return Evaluation_point列表
	 */
	public List<Evaluation_point> listEvaluation_pointByMapAsc(Map<String, Object> params, String columnname) {

		logger.debug(this.getClass().getName() + ".listEvaluation_pointByMapAsc()");
		return svcevaluation_point.list(new QueryWrapper<Evaluation_point>().allEq(params).orderByAsc(columnname));
	}

	/***
	 * 查询，返回Evaluation_point列表
	 * 
	 * @param columnname 排序字段
	 * @return Evaluation_point列表
	 */
	public List<Evaluation_point> listEvaluation_pointByMapDesc(Map<String, Object> params, String columnname) {

		logger.debug(this.getClass().getName() + ".listEvaluation_pointByMapDesc()");
		return svcevaluation_point.list(new QueryWrapper<Evaluation_point>().allEq(params).orderByDesc(columnname));
	}

	/***
	 * 
	 * @param pagenumber 页码
	 * @param pagesize   页面显示数量
	 * @return
	 */
	public PagerList<Evaluation_point> pagerListEvaluation_point(Integer pagenumber, Integer pagesize) {

		return pagerListEvaluation_point(pagenumber, pagesize, "", new HashMap<String, String>());
	}

	/***
	 * 
	 * @param pagenumber 页码
	 * @param pagesize   页面显示数量
	 * @param keyword    关键字
	 * @return
	 */
	public PagerList<Evaluation_point> pagerListEvaluation_point(Integer pagenumber, Integer pagesize, String keyword) {

		return pagerListEvaluation_point(pagenumber, pagesize, keyword, new HashMap<String, String>());
	}

	/***
	 * 
	 * @param pagenumber 页码
	 * @param pagesize   页面显示数量
	 * @param keyword    关键字
	 * @param sqlin      用in子句包括的id值
	 * @return
	 */
	public PagerList<Evaluation_point> pagerListEvaluation_point(Integer pagenumber, Integer pagesize, String keyword,
			Map<String, String> sqlin) {
		return pagerListEvaluation_point(pagenumber, pagesize, keyword, sqlin, new HashMap<String, Object>());
	}

	/***
	 * 
	 * @param pagenumber 页码
	 * @param pagesize   页面显示数量
	 * @param keyword    关键字
	 * @param sqlin      用in子句包括的id值
	 * @param params     筛选条件
	 * @return
	 */
	public PagerList<Evaluation_point> pagerListEvaluation_point(Integer pagenumber, Integer pagesize, String keyword,
			Map<String, String> sqlin, Map<String, Object> params) {
		List<KeyAndValue> ordlist = new ArrayList<KeyAndValue>();
		ordlist.add(new KeyAndValue(Evaluation_point.ID, "desc"));
		return pagerListEvaluation_point(pagenumber, pagesize, keyword, sqlin, params, ordlist);
	}

	/***
	 * 
	 * @param pagenumber 页码
	 * @param pagesize   页面显示数量
	 * @param keyword    关键字
	 * @param sqlin      用in子句包括的id值
	 * @return
	 */
	public PagerList<Evaluation_point> pagerListEvaluation_point(Integer pagenumber, Integer pagesize, String keyword,
			Map<String, String> sqlin, Map<String, Object> params, List<KeyAndValue> ordlist) {

		Page<Evaluation_point> page = new Page<>(pagenumber, pagesize);
		List<Evaluation_point> list = null;

		QueryWrapper<Evaluation_point> queryWrapper = new QueryWrapper<>();
		// 读取url中是否包含筛选条件
		String subject_id = sqlin.get(Evaluation_point.SUBJECT_ID + "_id");

		if (params.size() > 0) {
			queryWrapper.allEq(params);
		}
		if (StringUtils.isBlank(keyword) && StringUtils.isBlank(subject_id)) {

			// --------1.准确匹配模式---------

		} else {
			// --------2.模糊匹配模式---------
			// 添加关键字模糊查找条件
			if (!StringUtils.isBlank(keyword)) {
				String kwss = keyword;
				queryWrapper.and(wr -> wr.like(Evaluation_point.CONTENT, kwss));
			}
			// 添加id使用in语句筛选
			if (!StringUtils.isBlank(subject_id)) {
				queryWrapper.inSql(Evaluation_point.SUBJECT_ID, subject_id);
			}
			// --------2.模糊匹配模式---------
		}
		for (KeyAndValue od : ordlist) {
			if (od.getValue().equals("desc")) {
				queryWrapper.orderByDesc((String) od.getKey());
			} else {
				queryWrapper.orderByAsc((String) od.getKey());
			}
		}
		list = svcevaluation_point.page(page, queryWrapper).getRecords();
		// 清理数据,标注关键字，范围：所有字符型
		for (int i = 0; i < list.size(); i++) {
			// 如果头像为空，加载默认头像
			// if (StringUtils.isBlank(list.get(i).getWechat_headimgurl())
			// || list.get(i).getWechat_headimgurl().equals("0")) {
			// list.get(i).setWechat_headimgurl(Common.userheadimgurl);
			// }
			// 标注关键字，范围：所有字符型
			if (!StringUtils.isBlank(keyword)) {
				// 避免空值出现错误
				try {

					list.get(i).setContent((list.get(i).getContent().replace(keyword, Common.getKeywordSpan(keyword))));
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		}

		Pager<Evaluation_point> pager = new Pager<>(page);
		PagerList<Evaluation_point> pagerList = new PagerList<>(pager, list);

		return pagerList;
	}

	/***
	 * 保持新的实体，返回是否成功
	 * 
	 * @param it 实体
	 * @return 是否成功
	 */
	public Boolean saveEvaluation_point(Evaluation_point it) {

		logger.debug(this.getClass().getName() + ".saveEvaluation_point()");
		return svcevaluation_point.save(it);
	}

	/***
	 * 按id删除，返回是否成功
	 * 
	 * @param id
	 * @return 是否成功
	 */
	public Boolean removeEvaluation_pointById(Serializable id) {

		logger.debug(this.getClass().getName() + ".removeEvaluation_pointById()");
		return svcevaluation_point.removeById(id);
	}

	/***
	 * 按id修改实体，返回布尔值，是否成功
	 * 
	 * @param it 实体
	 * @return 是否成功
	 */
	public Boolean updateEvaluation_pointById(Integer subject_id, Boolean is_actived, Integer type, Integer difficulty,
			String content, Long update_gmt, Integer id) {

		logger.debug(this.getClass().getName() + ".updateEvaluation_pointById()");
		UpdateWrapper<Evaluation_point> uwr = new UpdateWrapper<>();
		uwr.set(Evaluation_point.SUBJECT_ID, subject_id);
		uwr.set(Evaluation_point.IS_ACTIVED, is_actived);
		uwr.set(Evaluation_point.TYPE, type);
		uwr.set(Evaluation_point.DIFFICULTY, difficulty);
		uwr.set(Evaluation_point.CONTENT, content);
		uwr.set(Evaluation_point.UPDATE_GMT, update_gmt);

		uwr.eq(Evaluation_point.ID, id);
		return svcevaluation_point.update(uwr);
	}

	/***
	 * 按id修改实体，返回是否成功
	 * 
	 * @param it 实体
	 * @return 是否成功
	 */
	public Boolean updateEvaluation_pointById(Evaluation_point it) {

		logger.debug(this.getClass().getName() + ".updateEvaluation_pointById()");
		return svcevaluation_point.updateById(it);
	}

	/***
	 * 按id修改实体的IS_ACTIVED字段，返回是否成功
	 * 
	 * @param it 实体
	 * @return 是否成功
	 */
	public Boolean updateEvaluation_pointById(String operate, Integer id) {

		logger.debug(this.getClass().getName() + ".updateEvaluation_pointById()IS_ACTIVED");
		UpdateWrapper<Evaluation_point> uwr = new UpdateWrapper<>();
		if (operate.equals("hideitem")) {
			uwr.set(Evaluation_point.IS_ACTIVED, false);
		} else {
			uwr.set(Evaluation_point.IS_ACTIVED, true);
		}
		uwr.eq(Evaluation_point.ID, id);
		return svcevaluation_point.update(uwr);
	}

	/***
	 * 统计当前表的数量
	 * 
	 * @return
	 */
	public Integer countEvaluation_point() {
		return svcevaluation_point.count();
	}

	/***
	 * 统计当前表的数量
	 * 
	 * @return
	 */
	public Integer countEvaluation_point(QueryWrapper<Evaluation_point> queryWrapper) {
		return svcevaluation_point.count(queryWrapper);
	}

	/***
	 * 按自定义查询统计,返回map
	 * 
	 * @return
	 */
	public Map<String, Integer> statEvaluation_pointGroupbyId() {
		List<Map<String, Object>> list = svcevaluation_point.listMaps(new QueryWrapper<Evaluation_point>()
				.select(Evaluation_point.CONTENT, "count(*)").eq(Evaluation_point.SUBJECT_ID, 0)
				.groupBy(Evaluation_point.ID).orderByAsc(Evaluation_point.ID));
		return Util.listmapToMap(list, Evaluation_point.CONTENT, "count(*)");
	}

	/***
	 * 按自定义查询统计,返回map
	 * 
	 * @return
	 */
	public Map<String, Integer> statEvaluation_pointGroupbySubject_id() {

		return svcevaluation_point.statMapByFieldname(Evaluation_point.SUBJECT_ID);
	}

	// TODO:--------------manageEvaluation_point-end----------------
	// TODO:--------------manageEvaluation_result-begin----------------
	/***
	 * 统计Evaluation_result中，指定字段的最大值列表
	 * 
	 * @param fieldname 需要统计的字段
	 * @return Evaluation_result表，指定字段中的最大值
	 */
	public Integer maxEvaluation_result(String fieldname) {

		int rtv = 0;
		try {
			rtv = svcevaluation_result.max(fieldname);
		} catch (Exception e) {
		}
		return rtv;
	}

	/***
	 * 查询全部，返回一个map，用于数量较少时的映射
	 * 
	 * @return
	 */
	public Map<Integer, String> mapEvaluation_result() {
		List<Evaluation_result> list = svcevaluation_result.list();
		Map<Integer, String> map = new HashMap<Integer, String>();
		for (int i = 0; i < list.size(); i++) {
			map.put(list.get(i).getId(), list.get(i).getSno());
		}
		return map;
	}

	public Map<Integer, String> mapEvaluation_result(Map<String, Object> params) {
		List<Evaluation_result> list = listEvaluation_resultByMap(params);
		Map<Integer, String> map = new HashMap<Integer, String>();
		for (int i = 0; i < list.size(); i++) {
			map.put(list.get(i).getId(), list.get(i).getSno());
		}
		return map;
	}

	/***
	 * 查询，返回Evaluation_result列表
	 * 
	 * @return Evaluation_result列表
	 */
	public List<Evaluation_result> listEvaluation_result() {

		Map<String, Object> params = new HashMap<String, Object>();
		return (List<Evaluation_result>) svcevaluation_result.listByMap(params);
	}

	/***
	 * 查询，返回Evaluation_result列表
	 * 
	 * @param params 查询条件
	 * @return Evaluation_result列表
	 */
	public List<Evaluation_result> listEvaluation_resultByMap(Map<String, Object> params) {

		logger.debug(this.getClass().getName() + ".listEvaluation_resultByMap()");
		return (List<Evaluation_result>) svcevaluation_result.listByMap(params);
	}

	/***
	 * 查询，返回Evaluation_result列表
	 * 
	 * @param params  查询条件（可以多个）
	 * @param ordlist 排序条件（可以多个）
	 * @return Evaluation_result列表
	 */
	public List<Evaluation_result> listEvaluation_resultByMap(Map<String, Object> params, List<KeyAndValue> ordlist) {

		logger.debug(this.getClass().getName() + ".listEvaluation_resultByMap()");
		// Map<String, Object> params = new HashMap<String, Object>();
		// params.put(Evaluation_result.ID, 0);
		// List<KeyAndValue> ordlist = new ArrayList<KeyAndValue>();
		// ordlist.add(new KeyAndValue(Evaluation_result.ID, "desc"));
		QueryWrapper<Evaluation_result> queryWrapper = new QueryWrapper<>();
		if (params.size() > 0) {
			queryWrapper.allEq(params);
		}
		for (KeyAndValue od : ordlist) {
			if (od.getValue().equals("desc")) {
				queryWrapper.orderByDesc((String) od.getKey());
			} else {
				queryWrapper.orderByAsc((String) od.getKey());
			}
		}
		return svcevaluation_result.list(queryWrapper);
	}

	/***
	 * 按id查询，返回Evaluation_result
	 * 
	 * @param id
	 * @return Evaluation_result
	 */
	public Evaluation_result getEvaluation_resultById(Serializable id) {

		logger.debug(this.getClass().getName() + ".getEvaluation_resultById()");
		return svcevaluation_result.getById(id);
	}

	/***
	 * 通过唯一值(数字)查找记录，返回Evaluation_result
	 * 
	 * @param infoid
	 * @return Evaluation_result
	 */
	public Evaluation_result getEvaluation_resultByStudent_id(Serializable student_id) {

		logger.debug(this.getClass().getName() + ".getEvaluation_resultByStudent_id()");
		return svcevaluation_result.getOne(
				new QueryWrapper<Evaluation_result>().eq(Evaluation_result.STUDENT_ID, student_id).last("limit 1"));
	}

	/***
	 * 通过Map(多个条件)，查询返回Evaluation_result
	 * 
	 * @param params 多个条件
	 * @return Evaluation_result
	 */
	public Evaluation_result getEvaluation_resultByMap(Map<String, Object> params) {

		logger.debug(this.getClass().getName() + ".getEvaluation_resultByMap()");
		// Map<String, Object> params = new HashMap<String, Object>();
		// params.put(Evaluation_result.ID, 0);
		return svcevaluation_result.getOne(new QueryWrapper<Evaluation_result>().allEq(params).last("limit 1"));
	}

	/***
	 * 查询，返回Evaluation_result列表
	 * 
	 * @param columnname 排序字段
	 * @return Evaluation_result列表
	 */
	public List<Evaluation_result> listEvaluation_resultOrderByAsc(String columnname) {

		logger.debug(this.getClass().getName() + ".listEvaluation_resultOrderByAsc()");
		return svcevaluation_result.list(new QueryWrapper<Evaluation_result>().orderByAsc(columnname));
	}

	/***
	 * 查询，返回Evaluation_result列表
	 * 
	 * @param columnname 排序字段
	 * @return Evaluation_result列表
	 */
	public List<Evaluation_result> listEvaluation_resultOrderByDesc(String columnname) {

		logger.debug(this.getClass().getName() + ".listEvaluation_resultOrderByDesc()");
		return svcevaluation_result.list(new QueryWrapper<Evaluation_result>().orderByDesc(columnname));
	}

	/***
	 * 查询，返回Evaluation_result列表
	 * 
	 * @param columnname 排序字段
	 * @return Evaluation_result列表
	 */
	public List<Evaluation_result> listEvaluation_resultByMapAsc(Map<String, Object> params, String columnname) {

		logger.debug(this.getClass().getName() + ".listEvaluation_resultByMapAsc()");
		return svcevaluation_result.list(new QueryWrapper<Evaluation_result>().allEq(params).orderByAsc(columnname));
	}

	/***
	 * 查询，返回Evaluation_result列表
	 * 
	 * @param columnname 排序字段
	 * @return Evaluation_result列表
	 */
	public List<Evaluation_result> listEvaluation_resultByMapDesc(Map<String, Object> params, String columnname) {

		logger.debug(this.getClass().getName() + ".listEvaluation_resultByMapDesc()");
		return svcevaluation_result.list(new QueryWrapper<Evaluation_result>().allEq(params).orderByDesc(columnname));
	}

	/***
	 * 
	 * @param pagenumber 页码
	 * @param pagesize   页面显示数量
	 * @return
	 */
	public PagerList<Evaluation_result> pagerListEvaluation_result(Integer pagenumber, Integer pagesize) {

		return pagerListEvaluation_result(pagenumber, pagesize, "", new HashMap<String, String>());
	}

	/***
	 * 
	 * @param pagenumber 页码
	 * @param pagesize   页面显示数量
	 * @param keyword    关键字
	 * @return
	 */
	public PagerList<Evaluation_result> pagerListEvaluation_result(Integer pagenumber, Integer pagesize,
			String keyword) {

		return pagerListEvaluation_result(pagenumber, pagesize, keyword, new HashMap<String, String>());
	}

	/***
	 * 
	 * @param pagenumber 页码
	 * @param pagesize   页面显示数量
	 * @param keyword    关键字
	 * @param sqlin      用in子句包括的id值
	 * @return
	 */
	public PagerList<Evaluation_result> pagerListEvaluation_result(Integer pagenumber, Integer pagesize, String keyword,
			Map<String, String> sqlin) {
		return pagerListEvaluation_result(pagenumber, pagesize, keyword, sqlin, new HashMap<String, Object>());
	}

	/***
	 * 
	 * @param pagenumber 页码
	 * @param pagesize   页面显示数量
	 * @param keyword    关键字
	 * @param sqlin      用in子句包括的id值
	 * @param params     筛选条件
	 * @return
	 */
	public PagerList<Evaluation_result> pagerListEvaluation_result(Integer pagenumber, Integer pagesize, String keyword,
			Map<String, String> sqlin, Map<String, Object> params) {
		List<KeyAndValue> ordlist = new ArrayList<KeyAndValue>();
		ordlist.add(new KeyAndValue(Evaluation_result.ID, "desc"));
		return pagerListEvaluation_result(pagenumber, pagesize, keyword, sqlin, params, ordlist);
	}

	/***
	 * 
	 * @param pagenumber 页码
	 * @param pagesize   页面显示数量
	 * @param keyword    关键字
	 * @param sqlin      用in子句包括的id值
	 * @return
	 */
	public PagerList<Evaluation_result> pagerListEvaluation_result(Integer pagenumber, Integer pagesize, String keyword,
			Map<String, String> sqlin, Map<String, Object> params, List<KeyAndValue> ordlist) {

		Page<Evaluation_result> page = new Page<>(pagenumber, pagesize);
		List<Evaluation_result> list = null;

		QueryWrapper<Evaluation_result> queryWrapper = new QueryWrapper<>();
		// 读取url中是否包含筛选条件
		String student_id = sqlin.get(Evaluation_result.STUDENT_ID + "_id");
		String evaluation_id = sqlin.get(Evaluation_result.EVALUATION_ID + "_id");

		if (params.size() > 0) {
			queryWrapper.allEq(params);
		}
		if (StringUtils.isBlank(keyword) && StringUtils.isBlank(student_id) && StringUtils.isBlank(evaluation_id)) {

			// --------1.准确匹配模式---------

		} else {
			// --------2.模糊匹配模式---------
			// 添加关键字模糊查找条件
			if (!StringUtils.isBlank(keyword)) {
				String kwss = keyword;
				queryWrapper.and(wr -> wr.like(Evaluation_result.SNO, kwss).or().like(Evaluation_result.COMMENT, kwss)
						.or().like(Evaluation_result.EVALUATION_RECORD, kwss));
			}
			// 添加id使用in语句筛选
			if (!StringUtils.isBlank(student_id)) {
				queryWrapper.inSql(Evaluation_result.STUDENT_ID, student_id);
			}
			if (!StringUtils.isBlank(evaluation_id)) {
				queryWrapper.inSql(Evaluation_result.EVALUATION_ID, evaluation_id);
			}
			// --------2.模糊匹配模式---------
		}
		for (KeyAndValue od : ordlist) {
			if (od.getValue().equals("desc")) {
				queryWrapper.orderByDesc((String) od.getKey());
			} else {
				queryWrapper.orderByAsc((String) od.getKey());
			}
		}
		list = svcevaluation_result.page(page, queryWrapper).getRecords();
		// 清理数据,标注关键字，范围：所有字符型
		for (int i = 0; i < list.size(); i++) {
			// 如果头像为空，加载默认头像
			// if (StringUtils.isBlank(list.get(i).getWechat_headimgurl())
			// || list.get(i).getWechat_headimgurl().equals("0")) {
			// list.get(i).setWechat_headimgurl(Common.userheadimgurl);
			// }
			// 标注关键字，范围：所有字符型
			if (!StringUtils.isBlank(keyword)) {
				// 避免空值出现错误
				try {

					list.get(i).setSno((list.get(i).getSno().replace(keyword, Common.getKeywordSpan(keyword))));
					list.get(i).setComment((list.get(i).getComment().replace(keyword, Common.getKeywordSpan(keyword))));
					list.get(i).setEvaluation_record(
							(list.get(i).getEvaluation_record().replace(keyword, Common.getKeywordSpan(keyword))));
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		}

		Pager<Evaluation_result> pager = new Pager<>(page);
		PagerList<Evaluation_result> pagerList = new PagerList<>(pager, list);

		return pagerList;
	}

	/***
	 * 保持新的实体，返回是否成功
	 * 
	 * @param it 实体
	 * @return 是否成功
	 */
	public Boolean saveEvaluation_result(Evaluation_result it) {

		logger.debug(this.getClass().getName() + ".saveEvaluation_result()");
		return svcevaluation_result.save(it);
	}

	/***
	 * 按id删除，返回是否成功
	 * 
	 * @param id
	 * @return 是否成功
	 */
	public Boolean removeEvaluation_resultById(Serializable id) {

		logger.debug(this.getClass().getName() + ".removeEvaluation_resultById()");
		return svcevaluation_result.removeById(id);
	}

	/***
	 * 按id修改实体，返回布尔值，是否成功
	 * 
	 * @param it 实体
	 * @return 是否成功
	 */
	public Boolean updateEvaluation_resultById(Integer student_id, Integer evaluation_id, String sno, String comment,
			String evaluation_record, Integer score, Long submit_gmt, Boolean is_reviewed, Long update_gmt,
			Integer id) {

		logger.debug(this.getClass().getName() + ".updateEvaluation_resultById()");
		UpdateWrapper<Evaluation_result> uwr = new UpdateWrapper<>();
		uwr.set(Evaluation_result.STUDENT_ID, student_id);
		uwr.set(Evaluation_result.EVALUATION_ID, evaluation_id);
		uwr.set(Evaluation_result.SNO, sno);
		uwr.set(Evaluation_result.COMMENT, comment);
		uwr.set(Evaluation_result.EVALUATION_RECORD, evaluation_record);
		uwr.set(Evaluation_result.SCORE, score);
		uwr.set(Evaluation_result.SUBMIT_GMT, submit_gmt);
		uwr.set(Evaluation_result.IS_REVIEWED, is_reviewed);
		uwr.set(Evaluation_result.UPDATE_GMT, update_gmt);

		uwr.eq(Evaluation_result.ID, id);
		return svcevaluation_result.update(uwr);
	}

	/***
	 * 按id修改实体，返回是否成功
	 * 
	 * @param it 实体
	 * @return 是否成功
	 */
	public Boolean updateEvaluation_resultById(Evaluation_result it) {

		logger.debug(this.getClass().getName() + ".updateEvaluation_resultById()");
		return svcevaluation_result.updateById(it);
	}

	/***
	 * 统计当前表的数量
	 * 
	 * @return
	 */
	public Integer countEvaluation_result() {
		return svcevaluation_result.count();
	}

	/***
	 * 统计当前表的数量
	 * 
	 * @return
	 */
	public Integer countEvaluation_result(QueryWrapper<Evaluation_result> queryWrapper) {
		return svcevaluation_result.count(queryWrapper);
	}

	/***
	 * 按自定义查询统计,返回map
	 * 
	 * @return
	 */
	public Map<String, Integer> statEvaluation_resultGroupbyId() {
		List<Map<String, Object>> list = svcevaluation_result.listMaps(new QueryWrapper<Evaluation_result>()
				.select(Evaluation_result.SNO, "count(*)").eq(Evaluation_result.STUDENT_ID, 0)
				.groupBy(Evaluation_result.ID).orderByAsc(Evaluation_result.ID));
		return Util.listmapToMap(list, Evaluation_result.SNO, "count(*)");
	}

	/***
	 * 按自定义查询统计,返回map
	 * 
	 * @return
	 */
	public Map<String, Integer> statEvaluation_resultGroupbyStudent_id() {

		return svcevaluation_result.statMapByFieldname(Evaluation_result.STUDENT_ID);
	}

	// TODO:--------------manageEvaluation_result-end----------------
	// TODO:--------------manageEvaluation_result_record-begin----------------
	/***
	 * 统计Evaluation_result_record中，指定字段的最大值列表
	 * 
	 * @param fieldname 需要统计的字段
	 * @return Evaluation_result_record表，指定字段中的最大值
	 */
	public Integer maxEvaluation_result_record(String fieldname) {

		int rtv = 0;
		try {
			rtv = svcevaluation_result_record.max(fieldname);
		} catch (Exception e) {
		}
		return rtv;
	}

	/***
	 * 查询全部，返回一个map，用于数量较少时的映射
	 * 
	 * @return
	 */
	public Map<Integer, String> mapEvaluation_result_record() {
		List<Evaluation_result_record> list = svcevaluation_result_record.list();
		Map<Integer, String> map = new HashMap<Integer, String>();
		for (int i = 0; i < list.size(); i++) {
			map.put(list.get(i).getId(), list.get(i).getSno());
		}
		return map;
	}

	public Map<Integer, String> mapEvaluation_result_record(Map<String, Object> params) {
		List<Evaluation_result_record> list = listEvaluation_result_recordByMap(params);
		Map<Integer, String> map = new HashMap<Integer, String>();
		for (int i = 0; i < list.size(); i++) {
			map.put(list.get(i).getId(), list.get(i).getSno());
		}
		return map;
	}

	/***
	 * 查询，返回Evaluation_result_record列表
	 * 
	 * @return Evaluation_result_record列表
	 */
	public List<Evaluation_result_record> listEvaluation_result_record() {

		Map<String, Object> params = new HashMap<String, Object>();
		return (List<Evaluation_result_record>) svcevaluation_result_record.listByMap(params);
	}

	/***
	 * 查询，返回Evaluation_result_record列表
	 * 
	 * @param params 查询条件
	 * @return Evaluation_result_record列表
	 */
	public List<Evaluation_result_record> listEvaluation_result_recordByMap(Map<String, Object> params) {

		logger.debug(this.getClass().getName() + ".listEvaluation_result_recordByMap()");
		return (List<Evaluation_result_record>) svcevaluation_result_record.listByMap(params);
	}

	/***
	 * 查询，返回Evaluation_result_record列表
	 * 
	 * @param params  查询条件（可以多个）
	 * @param ordlist 排序条件（可以多个）
	 * @return Evaluation_result_record列表
	 */
	public List<Evaluation_result_record> listEvaluation_result_recordByMap(Map<String, Object> params,
			List<KeyAndValue> ordlist) {

		logger.debug(this.getClass().getName() + ".listEvaluation_result_recordByMap()");
		// Map<String, Object> params = new HashMap<String, Object>();
		// params.put(Evaluation_result_record.ID, 0);
		// List<KeyAndValue> ordlist = new ArrayList<KeyAndValue>();
		// ordlist.add(new KeyAndValue(Evaluation_result_record.ID, "desc"));
		QueryWrapper<Evaluation_result_record> queryWrapper = new QueryWrapper<>();
		if (params.size() > 0) {
			queryWrapper.allEq(params);
		}
		for (KeyAndValue od : ordlist) {
			if (od.getValue().equals("desc")) {
				queryWrapper.orderByDesc((String) od.getKey());
			} else {
				queryWrapper.orderByAsc((String) od.getKey());
			}
		}
		return svcevaluation_result_record.list(queryWrapper);
	}

	/***
	 * 按id查询，返回Evaluation_result_record
	 * 
	 * @param id
	 * @return Evaluation_result_record
	 */
	public Evaluation_result_record getEvaluation_result_recordById(Serializable id) {

		logger.debug(this.getClass().getName() + ".getEvaluation_result_recordById()");
		return svcevaluation_result_record.getById(id);
	}

	/***
	 * 通过唯一值(数字)查找记录，返回Evaluation_result_record
	 * 
	 * @param infoid
	 * @return Evaluation_result_record
	 */
	public Evaluation_result_record getEvaluation_result_recordByStudent_id(Serializable student_id) {

		logger.debug(this.getClass().getName() + ".getEvaluation_result_recordByStudent_id()");
		return svcevaluation_result_record.getOne(new QueryWrapper<Evaluation_result_record>()
				.eq(Evaluation_result_record.STUDENT_ID, student_id).last("limit 1"));
	}

	/***
	 * 通过Map(多个条件)，查询返回Evaluation_result_record
	 * 
	 * @param params 多个条件
	 * @return Evaluation_result_record
	 */
	public Evaluation_result_record getEvaluation_result_recordByMap(Map<String, Object> params) {

		logger.debug(this.getClass().getName() + ".getEvaluation_result_recordByMap()");
		// Map<String, Object> params = new HashMap<String, Object>();
		// params.put(Evaluation_result_record.ID, 0);
		return svcevaluation_result_record
				.getOne(new QueryWrapper<Evaluation_result_record>().allEq(params).last("limit 1"));
	}

	/***
	 * 查询，返回Evaluation_result_record列表
	 * 
	 * @param columnname 排序字段
	 * @return Evaluation_result_record列表
	 */
	public List<Evaluation_result_record> listEvaluation_result_recordOrderByAsc(String columnname) {

		logger.debug(this.getClass().getName() + ".listEvaluation_result_recordOrderByAsc()");
		return svcevaluation_result_record.list(new QueryWrapper<Evaluation_result_record>().orderByAsc(columnname));
	}

	/***
	 * 查询，返回Evaluation_result_record列表
	 * 
	 * @param columnname 排序字段
	 * @return Evaluation_result_record列表
	 */
	public List<Evaluation_result_record> listEvaluation_result_recordOrderByDesc(String columnname) {

		logger.debug(this.getClass().getName() + ".listEvaluation_result_recordOrderByDesc()");
		return svcevaluation_result_record.list(new QueryWrapper<Evaluation_result_record>().orderByDesc(columnname));
	}

	/***
	 * 查询，返回Evaluation_result_record列表
	 * 
	 * @param columnname 排序字段
	 * @return Evaluation_result_record列表
	 */
	public List<Evaluation_result_record> listEvaluation_result_recordByMapAsc(Map<String, Object> params,
			String columnname) {

		logger.debug(this.getClass().getName() + ".listEvaluation_result_recordByMapAsc()");
		return svcevaluation_result_record
				.list(new QueryWrapper<Evaluation_result_record>().allEq(params).orderByAsc(columnname));
	}

	/***
	 * 查询，返回Evaluation_result_record列表
	 * 
	 * @param columnname 排序字段
	 * @return Evaluation_result_record列表
	 */
	public List<Evaluation_result_record> listEvaluation_result_recordByMapDesc(Map<String, Object> params,
			String columnname) {

		logger.debug(this.getClass().getName() + ".listEvaluation_result_recordByMapDesc()");
		return svcevaluation_result_record
				.list(new QueryWrapper<Evaluation_result_record>().allEq(params).orderByDesc(columnname));
	}

	/***
	 * 
	 * @param pagenumber 页码
	 * @param pagesize   页面显示数量
	 * @return
	 */
	public PagerList<Evaluation_result_record> pagerListEvaluation_result_record(Integer pagenumber, Integer pagesize) {

		return pagerListEvaluation_result_record(pagenumber, pagesize, "", new HashMap<String, String>());
	}

	/***
	 * 
	 * @param pagenumber 页码
	 * @param pagesize   页面显示数量
	 * @param keyword    关键字
	 * @return
	 */
	public PagerList<Evaluation_result_record> pagerListEvaluation_result_record(Integer pagenumber, Integer pagesize,
			String keyword) {

		return pagerListEvaluation_result_record(pagenumber, pagesize, keyword, new HashMap<String, String>());
	}

	/***
	 * 
	 * @param pagenumber 页码
	 * @param pagesize   页面显示数量
	 * @param keyword    关键字
	 * @param sqlin      用in子句包括的id值
	 * @return
	 */
	public PagerList<Evaluation_result_record> pagerListEvaluation_result_record(Integer pagenumber, Integer pagesize,
			String keyword, Map<String, String> sqlin) {
		return pagerListEvaluation_result_record(pagenumber, pagesize, keyword, sqlin, new HashMap<String, Object>());
	}

	/***
	 * 
	 * @param pagenumber 页码
	 * @param pagesize   页面显示数量
	 * @param keyword    关键字
	 * @param sqlin      用in子句包括的id值
	 * @param params     筛选条件
	 * @return
	 */
	public PagerList<Evaluation_result_record> pagerListEvaluation_result_record(Integer pagenumber, Integer pagesize,
			String keyword, Map<String, String> sqlin, Map<String, Object> params) {
		List<KeyAndValue> ordlist = new ArrayList<KeyAndValue>();
		ordlist.add(new KeyAndValue(Evaluation_result_record.SORTID, "desc"));
		return pagerListEvaluation_result_record(pagenumber, pagesize, keyword, sqlin, params, ordlist);
	}

	/***
	 * 
	 * @param pagenumber 页码
	 * @param pagesize   页面显示数量
	 * @param keyword    关键字
	 * @param sqlin      用in子句包括的id值
	 * @return
	 */
	public PagerList<Evaluation_result_record> pagerListEvaluation_result_record(Integer pagenumber, Integer pagesize,
			String keyword, Map<String, String> sqlin, Map<String, Object> params, List<KeyAndValue> ordlist) {

		Page<Evaluation_result_record> page = new Page<>(pagenumber, pagesize);
		List<Evaluation_result_record> list = null;

		QueryWrapper<Evaluation_result_record> queryWrapper = new QueryWrapper<>();
		// 读取url中是否包含筛选条件
		String student_id = sqlin.get(Evaluation_result_record.STUDENT_ID + "_id");
		String evaluation_id = sqlin.get(Evaluation_result_record.EVALUATION_ID + "_id");
		String evaluation_point_id = sqlin.get(Evaluation_result_record.EVALUATION_POINT_ID + "_id");
		String subject_id = sqlin.get(Evaluation_result_record.SUBJECT_ID + "_id");
		String student_group_id = sqlin.get(Evaluation_result_record.STUDENT_GROUP_ID + "_id");
		String curriculum_id = sqlin.get(Evaluation_result_record.CURRICULUM_ID + "_id");

		if (params.size() > 0) {
			queryWrapper.allEq(params);
		}
		if (StringUtils.isBlank(keyword) && StringUtils.isBlank(student_id) && StringUtils.isBlank(evaluation_id)
				&& StringUtils.isBlank(evaluation_point_id) && StringUtils.isBlank(subject_id)
				&& StringUtils.isBlank(student_group_id) && StringUtils.isBlank(curriculum_id)) {

			// --------1.准确匹配模式---------

		} else {
			// --------2.模糊匹配模式---------
			// 添加关键字模糊查找条件
			if (!StringUtils.isBlank(keyword)) {
				String kwss = keyword;
				queryWrapper.and(wr -> wr.like(Evaluation_result_record.SNO, kwss).or()
						.like(Evaluation_result_record.SUBMIT_RECORD, kwss));
			}
			// 添加id使用in语句筛选
			if (!StringUtils.isBlank(student_id)) {
				queryWrapper.inSql(Evaluation_result_record.STUDENT_ID, student_id);
			}
			if (!StringUtils.isBlank(evaluation_id)) {
				queryWrapper.inSql(Evaluation_result_record.EVALUATION_ID, evaluation_id);
			}
			if (!StringUtils.isBlank(evaluation_point_id)) {
				queryWrapper.inSql(Evaluation_result_record.EVALUATION_POINT_ID, evaluation_point_id);
			}
			if (!StringUtils.isBlank(subject_id)) {
				queryWrapper.inSql(Evaluation_result_record.SUBJECT_ID, subject_id);
			}
			if (!StringUtils.isBlank(student_group_id)) {
				queryWrapper.inSql(Evaluation_result_record.STUDENT_GROUP_ID, student_group_id);
			}
			if (!StringUtils.isBlank(curriculum_id)) {
				queryWrapper.inSql(Evaluation_result_record.CURRICULUM_ID, curriculum_id);
			}
			// --------2.模糊匹配模式---------
		}
		for (KeyAndValue od : ordlist) {
			if (od.getValue().equals("desc")) {
				queryWrapper.orderByDesc((String) od.getKey());
			} else {
				queryWrapper.orderByAsc((String) od.getKey());
			}
		}
		list = svcevaluation_result_record.page(page, queryWrapper).getRecords();
		// 清理数据,标注关键字，范围：所有字符型
		for (int i = 0; i < list.size(); i++) {
			// 如果头像为空，加载默认头像
			// if (StringUtils.isBlank(list.get(i).getWechat_headimgurl())
			// || list.get(i).getWechat_headimgurl().equals("0")) {
			// list.get(i).setWechat_headimgurl(Common.userheadimgurl);
			// }
			// 标注关键字，范围：所有字符型
			if (!StringUtils.isBlank(keyword)) {
				// 避免空值出现错误
				try {

					list.get(i).setSno((list.get(i).getSno().replace(keyword, Common.getKeywordSpan(keyword))));
					list.get(i).setSubmit_record(
							(list.get(i).getSubmit_record().replace(keyword, Common.getKeywordSpan(keyword))));
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		}

		Pager<Evaluation_result_record> pager = new Pager<>(page);
		PagerList<Evaluation_result_record> pagerList = new PagerList<>(pager, list);

		return pagerList;
	}

	/***
	 * 保持新的实体，返回是否成功
	 * 
	 * @param it 实体
	 * @return 是否成功
	 */
	public Boolean saveEvaluation_result_record(Evaluation_result_record it) {

		logger.debug(this.getClass().getName() + ".saveEvaluation_result_record()");
		return svcevaluation_result_record.save(it);
	}

	/***
	 * 按id删除，返回是否成功
	 * 
	 * @param id
	 * @return 是否成功
	 */
	public Boolean removeEvaluation_result_recordById(Serializable id) {

		logger.debug(this.getClass().getName() + ".removeEvaluation_result_recordById()");
		return svcevaluation_result_record.removeById(id);
	}

	/***
	 * 按id修改实体，返回布尔值，是否成功
	 * 
	 * @param it 实体
	 * @return 是否成功
	 */
	public Boolean updateEvaluation_result_recordById(Integer student_id, Integer evaluation_id, String sno,
			Integer evaluation_point_id, String submit_record, Integer score, Integer type, Integer subject_id,
			Integer student_group_id, Integer curriculum_id, Integer difficulty, Integer sortid, Boolean is_submited,
			Integer score_wish, Boolean is_reviewed, Long update_gmt, Integer id) {

		logger.debug(this.getClass().getName() + ".updateEvaluation_result_recordById()");
		UpdateWrapper<Evaluation_result_record> uwr = new UpdateWrapper<>();
		uwr.set(Evaluation_result_record.STUDENT_ID, student_id);
		uwr.set(Evaluation_result_record.EVALUATION_ID, evaluation_id);
		uwr.set(Evaluation_result_record.SNO, sno);
		uwr.set(Evaluation_result_record.EVALUATION_POINT_ID, evaluation_point_id);
		uwr.set(Evaluation_result_record.SUBMIT_RECORD, submit_record);
		uwr.set(Evaluation_result_record.SCORE, score);
		uwr.set(Evaluation_result_record.TYPE, type);
		uwr.set(Evaluation_result_record.SUBJECT_ID, subject_id);
		uwr.set(Evaluation_result_record.STUDENT_GROUP_ID, student_group_id);
		uwr.set(Evaluation_result_record.CURRICULUM_ID, curriculum_id);
		uwr.set(Evaluation_result_record.DIFFICULTY, difficulty);
		uwr.set(Evaluation_result_record.SORTID, sortid);
		uwr.set(Evaluation_result_record.IS_SUBMITED, is_submited);
		uwr.set(Evaluation_result_record.SCORE_WISH, score_wish);
		uwr.set(Evaluation_result_record.IS_REVIEWED, is_reviewed);
		uwr.set(Evaluation_result_record.UPDATE_GMT, update_gmt);

		uwr.eq(Evaluation_result_record.ID, id);
		return svcevaluation_result_record.update(uwr);
	}

	/***
	 * 按id修改实体，返回是否成功
	 * 
	 * @param it 实体
	 * @return 是否成功
	 */
	public Boolean updateEvaluation_result_recordById(Evaluation_result_record it) {

		logger.debug(this.getClass().getName() + ".updateEvaluation_result_recordById()");
		return svcevaluation_result_record.updateById(it);
	}

	public Boolean moveEvaluation_result_record(String method, String upOrDown, Integer id, String sortColumn) {

		Evaluation_result_record it = svcevaluation_result_record.getById(id);
		// 读取当前已有信息
		// SELECT * FROM `column` where column_parentid =0 and sortid<4 order by
		// sortid desc limit 1
		QueryWrapper<Evaluation_result_record> queryWrapper = new QueryWrapper<>();
		// 同一个父栏目下
		// queryWrapper.eq(Evaluation_result_record.COLUMN_PARENTID ,
		// it.getColumn_parentid());
		if (method.equals(upOrDown)) {
			queryWrapper.lt(sortColumn, it.getSortid());
			queryWrapper.orderByDesc(sortColumn);
		} else {
			queryWrapper.gt(sortColumn, it.getSortid());
			queryWrapper.orderByAsc(sortColumn);
		}
		queryWrapper.last("limit 1");

		Evaluation_result_record target = svcevaluation_result_record.getOne(queryWrapper);

		if (target == null) {
			// 没有
			return false;
		} else {

			UpdateWrapper<Evaluation_result_record> uwr1 = new UpdateWrapper<>();
			uwr1.set(Evaluation_result_record.SORTID, target.getSortid());
			uwr1.eq(Evaluation_result_record.ID, it.getId());

			UpdateWrapper<Evaluation_result_record> uwr2 = new UpdateWrapper<>();
			uwr2.set(Evaluation_result_record.SORTID, it.getSortid());
			uwr2.eq(Evaluation_result_record.ID, target.getId());

			try {
				svcevaluation_result_record.update(uwr1);
				svcevaluation_result_record.update(uwr2);
			} catch (Exception e) {
				e.printStackTrace();
				return false;
			}
			return true;
		}
	}

	/***
	 * 统计当前表的数量
	 * 
	 * @return
	 */
	public Integer countEvaluation_result_record() {
		return svcevaluation_result_record.count();
	}

	/***
	 * 统计当前表的数量
	 * 
	 * @return
	 */
	public Integer countEvaluation_result_record(QueryWrapper<Evaluation_result_record> queryWrapper) {
		return svcevaluation_result_record.count(queryWrapper);
	}

	/***
	 * 按自定义查询统计,返回map
	 * 
	 * @return
	 */
	public Map<String, Integer> statEvaluation_result_recordGroupbyId() {
		List<Map<String, Object>> list = svcevaluation_result_record
				.listMaps(new QueryWrapper<Evaluation_result_record>().select(Evaluation_result_record.SNO, "count(*)")
						.eq(Evaluation_result_record.STUDENT_ID, 0).groupBy(Evaluation_result_record.ID)
						.orderByAsc(Evaluation_result_record.ID));
		return Util.listmapToMap(list, Evaluation_result_record.SNO, "count(*)");
	}

	/***
	 * 按自定义查询统计,返回map
	 * 
	 * @return
	 */
	public Map<String, Integer> statEvaluation_result_recordGroupbyStudent_id() {

		return svcevaluation_result_record.statMapByFieldname(Evaluation_result_record.STUDENT_ID);
	}

	// TODO:--------------manageEvaluation_result_record-end----------------
	// TODO:--------------manageEvaluation_type-begin----------------
	/***
	 * 统计Evaluation_type中，指定字段的最大值列表
	 * 
	 * @param fieldname 需要统计的字段
	 * @return Evaluation_type表，指定字段中的最大值
	 */
	public Integer maxEvaluation_type(String fieldname) {

		int rtv = 0;
		try {
			rtv = svcevaluation_type.max(fieldname);
		} catch (Exception e) {
		}
		return rtv;
	}

	/***
	 * 查询全部，返回一个map，用于数量较少时的映射
	 * 
	 * @return
	 */
	public Map<Integer, String> mapEvaluation_type() {
		List<Evaluation_type> list = svcevaluation_type.list();
		Map<Integer, String> map = new HashMap<Integer, String>();
		for (int i = 0; i < list.size(); i++) {
			map.put(list.get(i).getId(), list.get(i).getName());
		}
		return map;
	}

	public Map<Integer, String> mapEvaluation_type(Map<String, Object> params) {
		List<Evaluation_type> list = listEvaluation_typeByMap(params);
		Map<Integer, String> map = new HashMap<Integer, String>();
		for (int i = 0; i < list.size(); i++) {
			map.put(list.get(i).getId(), list.get(i).getName());
		}
		return map;
	}

	/***
	 * 查询，返回Evaluation_type列表
	 * 
	 * @return Evaluation_type列表
	 */
	public List<Evaluation_type> listEvaluation_type() {

		Map<String, Object> params = new HashMap<String, Object>();
		return (List<Evaluation_type>) svcevaluation_type.listByMap(params);
	}

	/***
	 * 查询，返回Evaluation_type列表
	 * 
	 * @param params 查询条件
	 * @return Evaluation_type列表
	 */
	public List<Evaluation_type> listEvaluation_typeByMap(Map<String, Object> params) {

		logger.debug(this.getClass().getName() + ".listEvaluation_typeByMap()");
		return (List<Evaluation_type>) svcevaluation_type.listByMap(params);
	}

	/***
	 * 查询，返回Evaluation_type列表
	 * 
	 * @param params  查询条件（可以多个）
	 * @param ordlist 排序条件（可以多个）
	 * @return Evaluation_type列表
	 */
	public List<Evaluation_type> listEvaluation_typeByMap(Map<String, Object> params, List<KeyAndValue> ordlist) {

		logger.debug(this.getClass().getName() + ".listEvaluation_typeByMap()");
		// Map<String, Object> params = new HashMap<String, Object>();
		// params.put(Evaluation_type.ID, 0);
		// List<KeyAndValue> ordlist = new ArrayList<KeyAndValue>();
		// ordlist.add(new KeyAndValue(Evaluation_type.ID, "desc"));
		QueryWrapper<Evaluation_type> queryWrapper = new QueryWrapper<>();
		if (params.size() > 0) {
			queryWrapper.allEq(params);
		}
		for (KeyAndValue od : ordlist) {
			if (od.getValue().equals("desc")) {
				queryWrapper.orderByDesc((String) od.getKey());
			} else {
				queryWrapper.orderByAsc((String) od.getKey());
			}
		}
		return svcevaluation_type.list(queryWrapper);
	}

	/***
	 * 按id查询，返回Evaluation_type
	 * 
	 * @param id
	 * @return Evaluation_type
	 */
	public Evaluation_type getEvaluation_typeById(Serializable id) {

		logger.debug(this.getClass().getName() + ".getEvaluation_typeById()");
		return svcevaluation_type.getById(id);
	}

	/***
	 * 通过唯一值(数字)查找记录，返回Evaluation_type
	 * 
	 * @param infoid
	 * @return Evaluation_type
	 */
	public Evaluation_type getEvaluation_typeByName(Serializable name) {

		logger.debug(this.getClass().getName() + ".getEvaluation_typeByName()");
		return svcevaluation_type
				.getOne(new QueryWrapper<Evaluation_type>().eq(Evaluation_type.NAME, name).last("limit 1"));
	}

	/***
	 * 通过Map(多个条件)，查询返回Evaluation_type
	 * 
	 * @param params 多个条件
	 * @return Evaluation_type
	 */
	public Evaluation_type getEvaluation_typeByMap(Map<String, Object> params) {

		logger.debug(this.getClass().getName() + ".getEvaluation_typeByMap()");
		// Map<String, Object> params = new HashMap<String, Object>();
		// params.put(Evaluation_type.ID, 0);
		return svcevaluation_type.getOne(new QueryWrapper<Evaluation_type>().allEq(params).last("limit 1"));
	}

	/***
	 * 查询，返回Evaluation_type列表
	 * 
	 * @param columnname 排序字段
	 * @return Evaluation_type列表
	 */
	public List<Evaluation_type> listEvaluation_typeOrderByAsc(String columnname) {

		logger.debug(this.getClass().getName() + ".listEvaluation_typeOrderByAsc()");
		return svcevaluation_type.list(new QueryWrapper<Evaluation_type>().orderByAsc(columnname));
	}

	/***
	 * 查询，返回Evaluation_type列表
	 * 
	 * @param columnname 排序字段
	 * @return Evaluation_type列表
	 */
	public List<Evaluation_type> listEvaluation_typeOrderByDesc(String columnname) {

		logger.debug(this.getClass().getName() + ".listEvaluation_typeOrderByDesc()");
		return svcevaluation_type.list(new QueryWrapper<Evaluation_type>().orderByDesc(columnname));
	}

	/***
	 * 查询，返回Evaluation_type列表
	 * 
	 * @param columnname 排序字段
	 * @return Evaluation_type列表
	 */
	public List<Evaluation_type> listEvaluation_typeByMapAsc(Map<String, Object> params, String columnname) {

		logger.debug(this.getClass().getName() + ".listEvaluation_typeByMapAsc()");
		return svcevaluation_type.list(new QueryWrapper<Evaluation_type>().allEq(params).orderByAsc(columnname));
	}

	/***
	 * 查询，返回Evaluation_type列表
	 * 
	 * @param columnname 排序字段
	 * @return Evaluation_type列表
	 */
	public List<Evaluation_type> listEvaluation_typeByMapDesc(Map<String, Object> params, String columnname) {

		logger.debug(this.getClass().getName() + ".listEvaluation_typeByMapDesc()");
		return svcevaluation_type.list(new QueryWrapper<Evaluation_type>().allEq(params).orderByDesc(columnname));
	}

	/***
	 * 
	 * @param pagenumber 页码
	 * @param pagesize   页面显示数量
	 * @return
	 */
	public PagerList<Evaluation_type> pagerListEvaluation_type(Integer pagenumber, Integer pagesize) {

		return pagerListEvaluation_type(pagenumber, pagesize, "", new HashMap<String, String>());
	}

	/***
	 * 
	 * @param pagenumber 页码
	 * @param pagesize   页面显示数量
	 * @param keyword    关键字
	 * @return
	 */
	public PagerList<Evaluation_type> pagerListEvaluation_type(Integer pagenumber, Integer pagesize, String keyword) {

		return pagerListEvaluation_type(pagenumber, pagesize, keyword, new HashMap<String, String>());
	}

	/***
	 * 
	 * @param pagenumber 页码
	 * @param pagesize   页面显示数量
	 * @param keyword    关键字
	 * @param sqlin      用in子句包括的id值
	 * @return
	 */
	public PagerList<Evaluation_type> pagerListEvaluation_type(Integer pagenumber, Integer pagesize, String keyword,
			Map<String, String> sqlin) {
		return pagerListEvaluation_type(pagenumber, pagesize, keyword, sqlin, new HashMap<String, Object>());
	}

	/***
	 * 
	 * @param pagenumber 页码
	 * @param pagesize   页面显示数量
	 * @param keyword    关键字
	 * @param sqlin      用in子句包括的id值
	 * @param params     筛选条件
	 * @return
	 */
	public PagerList<Evaluation_type> pagerListEvaluation_type(Integer pagenumber, Integer pagesize, String keyword,
			Map<String, String> sqlin, Map<String, Object> params) {
		List<KeyAndValue> ordlist = new ArrayList<KeyAndValue>();
		ordlist.add(new KeyAndValue(Evaluation_type.ID, "desc"));
		return pagerListEvaluation_type(pagenumber, pagesize, keyword, sqlin, params, ordlist);
	}

	/***
	 * 
	 * @param pagenumber 页码
	 * @param pagesize   页面显示数量
	 * @param keyword    关键字
	 * @param sqlin      用in子句包括的id值
	 * @return
	 */
	public PagerList<Evaluation_type> pagerListEvaluation_type(Integer pagenumber, Integer pagesize, String keyword,
			Map<String, String> sqlin, Map<String, Object> params, List<KeyAndValue> ordlist) {

		Page<Evaluation_type> page = new Page<>(pagenumber, pagesize);
		List<Evaluation_type> list = null;

		QueryWrapper<Evaluation_type> queryWrapper = new QueryWrapper<>();
		// 读取url中是否包含筛选条件

		if (params.size() > 0) {
			queryWrapper.allEq(params);
		}
		if (StringUtils.isBlank(keyword)) {

			// --------1.准确匹配模式---------

		} else {
			// --------2.模糊匹配模式---------
			// 添加关键字模糊查找条件
			if (!StringUtils.isBlank(keyword)) {
				String kwss = keyword;
				queryWrapper.and(wr -> wr.like(Evaluation_type.NAME, kwss));
			}
			// 添加id使用in语句筛选
			// --------2.模糊匹配模式---------
		}
		for (KeyAndValue od : ordlist) {
			if (od.getValue().equals("desc")) {
				queryWrapper.orderByDesc((String) od.getKey());
			} else {
				queryWrapper.orderByAsc((String) od.getKey());
			}
		}
		list = svcevaluation_type.page(page, queryWrapper).getRecords();
		// 清理数据,标注关键字，范围：所有字符型
		for (int i = 0; i < list.size(); i++) {
			// 如果头像为空，加载默认头像
			// if (StringUtils.isBlank(list.get(i).getWechat_headimgurl())
			// || list.get(i).getWechat_headimgurl().equals("0")) {
			// list.get(i).setWechat_headimgurl(Common.userheadimgurl);
			// }
			// 标注关键字，范围：所有字符型
			if (!StringUtils.isBlank(keyword)) {
				// 避免空值出现错误
				try {

					list.get(i).setName((list.get(i).getName().replace(keyword, Common.getKeywordSpan(keyword))));
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		}

		Pager<Evaluation_type> pager = new Pager<>(page);
		PagerList<Evaluation_type> pagerList = new PagerList<>(pager, list);

		return pagerList;
	}

	/***
	 * 保持新的实体，返回是否成功
	 * 
	 * @param it 实体
	 * @return 是否成功
	 */
	public Boolean saveEvaluation_type(Evaluation_type it) {

		logger.debug(this.getClass().getName() + ".saveEvaluation_type()");
		return svcevaluation_type.save(it);
	}

	/***
	 * 按id删除，返回是否成功
	 * 
	 * @param id
	 * @return 是否成功
	 */
	public Boolean removeEvaluation_typeById(Serializable id) {

		logger.debug(this.getClass().getName() + ".removeEvaluation_typeById()");
		return svcevaluation_type.removeById(id);
	}

	/***
	 * 按id修改实体，返回布尔值，是否成功
	 * 
	 * @param it 实体
	 * @return 是否成功
	 */
	public Boolean updateEvaluation_typeById(String name, Integer id) {

		logger.debug(this.getClass().getName() + ".updateEvaluation_typeById()");
		UpdateWrapper<Evaluation_type> uwr = new UpdateWrapper<>();
		uwr.set(Evaluation_type.NAME, name);

		uwr.eq(Evaluation_type.ID, id);
		return svcevaluation_type.update(uwr);
	}

	/***
	 * 按id修改实体，返回是否成功
	 * 
	 * @param it 实体
	 * @return 是否成功
	 */
	public Boolean updateEvaluation_typeById(Evaluation_type it) {

		logger.debug(this.getClass().getName() + ".updateEvaluation_typeById()");
		return svcevaluation_type.updateById(it);
	}

	/***
	 * 统计当前表的数量
	 * 
	 * @return
	 */
	public Integer countEvaluation_type() {
		return svcevaluation_type.count();
	}

	/***
	 * 统计当前表的数量
	 * 
	 * @return
	 */
	public Integer countEvaluation_type(QueryWrapper<Evaluation_type> queryWrapper) {
		return svcevaluation_type.count(queryWrapper);
	}

	/***
	 * 按自定义查询统计,返回map
	 * 
	 * @return
	 */
	public Map<String, Integer> statEvaluation_typeGroupbyId() {
		List<Map<String, Object>> list = svcevaluation_type
				.listMaps(new QueryWrapper<Evaluation_type>().select(Evaluation_type.NAME, "count(*)")
						.eq(Evaluation_type.NAME, 0).groupBy(Evaluation_type.ID).orderByAsc(Evaluation_type.ID));
		return Util.listmapToMap(list, Evaluation_type.NAME, "count(*)");
	}

	/***
	 * 按自定义查询统计,返回map
	 * 
	 * @return
	 */
	public Map<String, Integer> statEvaluation_typeGroupbyName() {

		return svcevaluation_type.statMapByFieldname(Evaluation_type.NAME);
	}

	// TODO:--------------manageEvaluation_type-end----------------
	// TODO:--------------manageExperiment-begin----------------
	/***
	 * 统计Experiment中，指定字段的最大值列表
	 * 
	 * @param fieldname 需要统计的字段
	 * @return Experiment表，指定字段中的最大值
	 */
	public Integer maxExperiment(String fieldname) {

		int rtv = 0;
		try {
			rtv = svcexperiment.max(fieldname);
		} catch (Exception e) {
		}
		return rtv;
	}

	/***
	 * 查询全部，返回一个map，用于数量较少时的映射
	 * 
	 * @return
	 */
	public Map<Integer, String> mapExperiment() {
		List<Experiment> list = svcexperiment.list();
		Map<Integer, String> map = new HashMap<Integer, String>();
		for (int i = 0; i < list.size(); i++) {
			map.put(list.get(i).getId(), list.get(i).getIntro());
		}
		return map;
	}

	public Map<Integer, String> mapExperiment(Map<String, Object> params) {
		List<Experiment> list = listExperimentByMap(params);
		Map<Integer, String> map = new HashMap<Integer, String>();
		for (int i = 0; i < list.size(); i++) {
			map.put(list.get(i).getId(), list.get(i).getIntro());
		}
		return map;
	}

	/***
	 * 查询，返回Experiment列表
	 * 
	 * @return Experiment列表
	 */
	public List<Experiment> listExperiment() {

		Map<String, Object> params = new HashMap<String, Object>();
		return (List<Experiment>) svcexperiment.listByMap(params);
	}

	/***
	 * 查询，返回Experiment列表
	 * 
	 * @param params 查询条件
	 * @return Experiment列表
	 */
	public List<Experiment> listExperimentByMap(Map<String, Object> params) {

		logger.debug(this.getClass().getName() + ".listExperimentByMap()");
		return (List<Experiment>) svcexperiment.listByMap(params);
	}

	/***
	 * 查询，返回Experiment列表
	 * 
	 * @param params  查询条件（可以多个）
	 * @param ordlist 排序条件（可以多个）
	 * @return Experiment列表
	 */
	public List<Experiment> listExperimentByMap(Map<String, Object> params, List<KeyAndValue> ordlist) {

		logger.debug(this.getClass().getName() + ".listExperimentByMap()");
		// Map<String, Object> params = new HashMap<String, Object>();
		// params.put(Experiment.ID, 0);
		// List<KeyAndValue> ordlist = new ArrayList<KeyAndValue>();
		// ordlist.add(new KeyAndValue(Experiment.ID, "desc"));
		QueryWrapper<Experiment> queryWrapper = new QueryWrapper<>();
		if (params.size() > 0) {
			queryWrapper.allEq(params);
		}
		for (KeyAndValue od : ordlist) {
			if (od.getValue().equals("desc")) {
				queryWrapper.orderByDesc((String) od.getKey());
			} else {
				queryWrapper.orderByAsc((String) od.getKey());
			}
		}
		return svcexperiment.list(queryWrapper);
	}

	/***
	 * 按id查询，返回Experiment
	 * 
	 * @param id
	 * @return Experiment
	 */
	public Experiment getExperimentById(Serializable id) {
		logger.debug(this.getClass().getName() + ".getExperimentById()");
		return svcexperiment.getById(id);
	}

	/***
	 * 通过唯一值(数字)查找记录，返回Experiment
	 * 
	 * @param infoid
	 * @return Experiment
	 */
	public Experiment getExperimentBySubject_id(Serializable subject_id) {

		logger.debug(this.getClass().getName() + ".getExperimentBySubject_id()");
		return svcexperiment
				.getOne(new QueryWrapper<Experiment>().eq(Experiment.SUBJECT_ID, subject_id).last("limit 1"));
	}

	/***
	 * 通过Map(多个条件)，查询返回Experiment
	 * 
	 * @param params 多个条件
	 * @return Experiment
	 */
	public Experiment getExperimentByMap(Map<String, Object> params) {

		logger.debug(this.getClass().getName() + ".getExperimentByMap()");
		// Map<String, Object> params = new HashMap<String, Object>();
		// params.put(Experiment.ID, 0);
		return svcexperiment.getOne(new QueryWrapper<Experiment>().allEq(params).last("limit 1"));
	}

	/***
	 * 查询，返回Experiment列表
	 * 
	 * @param columnname 排序字段
	 * @return Experiment列表
	 */
	public List<Experiment> listExperimentOrderByAsc(String columnname) {

		logger.debug(this.getClass().getName() + ".listExperimentOrderByAsc()");
		return svcexperiment.list(new QueryWrapper<Experiment>().orderByAsc(columnname));
	}

	/***
	 * 查询，返回Experiment列表
	 * 
	 * @param columnname 排序字段
	 * @return Experiment列表
	 */
	public List<Experiment> listExperimentOrderByDesc(String columnname) {

		logger.debug(this.getClass().getName() + ".listExperimentOrderByDesc()");
		return svcexperiment.list(new QueryWrapper<Experiment>().orderByDesc(columnname));
	}

	/***
	 * 查询，返回Experiment列表
	 * 
	 * @param columnname 排序字段
	 * @return Experiment列表
	 */
	public List<Experiment> listExperimentByMapAsc(Map<String, Object> params, String columnname) {

		logger.debug(this.getClass().getName() + ".listExperimentByMapAsc()");
		return svcexperiment.list(new QueryWrapper<Experiment>().allEq(params).orderByAsc(columnname));
	}

	/***
	 * 查询，返回Experiment列表
	 * 
	 * @param columnname 排序字段
	 * @return Experiment列表
	 */
	public List<Experiment> listExperimentByMapDesc(Map<String, Object> params, String columnname) {

		logger.debug(this.getClass().getName() + ".listExperimentByMapDesc()");
		return svcexperiment.list(new QueryWrapper<Experiment>().allEq(params).orderByDesc(columnname));
	}

	/***
	 * 
	 * @param pagenumber 页码
	 * @param pagesize   页面显示数量
	 * @return
	 */
	public PagerList<Experiment> pagerListExperiment(Integer pagenumber, Integer pagesize) {

		return pagerListExperiment(pagenumber, pagesize, "", new HashMap<String, String>());
	}

	/***
	 * 
	 * @param pagenumber 页码
	 * @param pagesize   页面显示数量
	 * @param keyword    关键字
	 * @return
	 */
	public PagerList<Experiment> pagerListExperiment(Integer pagenumber, Integer pagesize, String keyword) {

		return pagerListExperiment(pagenumber, pagesize, keyword, new HashMap<String, String>());
	}

	/***
	 * 
	 * @param pagenumber 页码
	 * @param pagesize   页面显示数量
	 * @param keyword    关键字
	 * @param sqlin      用in子句包括的id值
	 * @return
	 */
	public PagerList<Experiment> pagerListExperiment(Integer pagenumber, Integer pagesize, String keyword,
			Map<String, String> sqlin) {
		return pagerListExperiment(pagenumber, pagesize, keyword, sqlin, new HashMap<String, Object>());
	}

	/***
	 * 
	 * @param pagenumber 页码
	 * @param pagesize   页面显示数量
	 * @param keyword    关键字
	 * @param sqlin      用in子句包括的id值
	 * @param params     筛选条件
	 * @return
	 */
	public PagerList<Experiment> pagerListExperiment(Integer pagenumber, Integer pagesize, String keyword,
			Map<String, String> sqlin, Map<String, Object> params) {
		List<KeyAndValue> ordlist = new ArrayList<KeyAndValue>();
		ordlist.add(new KeyAndValue(Experiment.ID, "desc"));
		return pagerListExperiment(pagenumber, pagesize, keyword, sqlin, params, ordlist);
	}

	/***
	 * 
	 * @param pagenumber 页码
	 * @param pagesize   页面显示数量
	 * @param keyword    关键字
	 * @param sqlin      用in子句包括的id值
	 * @return
	 */
	public PagerList<Experiment> pagerListExperiment(Integer pagenumber, Integer pagesize, String keyword,
			Map<String, String> sqlin, Map<String, Object> params, List<KeyAndValue> ordlist) {

		Page<Experiment> page = new Page<>(pagenumber, pagesize);
		List<Experiment> list = null;

		QueryWrapper<Experiment> queryWrapper = new QueryWrapper<>();
		// 读取url中是否包含筛选条件
		String subject_id = sqlin.get(Experiment.SUBJECT_ID + "_id");
		String curriculum_id = sqlin.get(Experiment.CURRICULUM_ID + "_id");

		if (params.size() > 0) {
			queryWrapper.allEq(params);
		}
		if (StringUtils.isBlank(keyword) && StringUtils.isBlank(subject_id) && StringUtils.isBlank(curriculum_id)) {

			// --------1.准确匹配模式---------

		} else {
			// --------2.模糊匹配模式---------
			// 添加关键字模糊查找条件
			if (!StringUtils.isBlank(keyword)) {
				String kwss = keyword;
				queryWrapper.and(wr -> wr.like(Experiment.INTRO, kwss).or().like(Experiment.TITLE, kwss).or()
						.like(Experiment.CONTENT, kwss).or().like(Experiment.PURPOSES_REQUIREMENT, kwss));
			}
			// 添加id使用in语句筛选
			if (!StringUtils.isBlank(subject_id)) {
				queryWrapper.inSql(Experiment.SUBJECT_ID, subject_id);
			}
			if (!StringUtils.isBlank(curriculum_id)) {
				queryWrapper.inSql(Experiment.CURRICULUM_ID, curriculum_id);
			}
			// --------2.模糊匹配模式---------
		}
		for (KeyAndValue od : ordlist) {
			if (od.getValue().equals("desc")) {
				queryWrapper.orderByDesc((String) od.getKey());
			} else {
				queryWrapper.orderByAsc((String) od.getKey());
			}
		}
		list = svcexperiment.page(page, queryWrapper).getRecords();
		// 清理数据,标注关键字，范围：所有字符型
		for (int i = 0; i < list.size(); i++) {
			// 如果头像为空，加载默认头像
			// if (StringUtils.isBlank(list.get(i).getWechat_headimgurl())
			// || list.get(i).getWechat_headimgurl().equals("0")) {
			// list.get(i).setWechat_headimgurl(Common.userheadimgurl);
			// }
			// 标注关键字，范围：所有字符型
			if (!StringUtils.isBlank(keyword)) {
				// 避免空值出现错误
				try {

					list.get(i).setIntro((list.get(i).getIntro().replace(keyword, Common.getKeywordSpan(keyword))));
					list.get(i).setTitle((list.get(i).getTitle().replace(keyword, Common.getKeywordSpan(keyword))));
					list.get(i).setContent((list.get(i).getContent().replace(keyword, Common.getKeywordSpan(keyword))));
					list.get(i).setPurposes_requirement(
							(list.get(i).getPurposes_requirement().replace(keyword, Common.getKeywordSpan(keyword))));
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		}

		Pager<Experiment> pager = new Pager<>(page);
		PagerList<Experiment> pagerList = new PagerList<>(pager, list);

		return pagerList;
	}

	/***
	 * 保持新的实体，返回是否成功
	 * 
	 * @param it 实体
	 * @return 是否成功
	 */
	public Boolean saveExperiment(Experiment it) {

		logger.debug(this.getClass().getName() + ".saveExperiment()");
		return svcexperiment.save(it);
	}

	/***
	 * 按id删除，返回是否成功
	 * 
	 * @param id
	 * @return 是否成功
	 */
	public Boolean removeExperimentById(Serializable id) {

		logger.debug(this.getClass().getName() + ".removeExperimentById()");
		return svcexperiment.removeById(id);
	}

	/***
	 * 按id修改实体，返回布尔值，是否成功
	 * 
	 * @param it 实体
	 * @return 是否成功
	 */
	public Boolean updateExperimentById(Integer subject_id, Integer curriculum_id, Boolean is_actived, String intro,
			String title, String content, String purposes_requirement, Integer filesize, Long update_gmt, Integer id) {

		logger.debug(this.getClass().getName() + ".updateExperimentById()");
		UpdateWrapper<Experiment> uwr = new UpdateWrapper<>();
		uwr.set(Experiment.SUBJECT_ID, subject_id);
		uwr.set(Experiment.CURRICULUM_ID, curriculum_id);
		uwr.set(Experiment.IS_ACTIVED, is_actived);
		uwr.set(Experiment.INTRO, intro);
		uwr.set(Experiment.TITLE, title);
		uwr.set(Experiment.CONTENT, content);
		uwr.set(Experiment.PURPOSES_REQUIREMENT, purposes_requirement);
		uwr.set(Experiment.FILESIZE, filesize);
		uwr.set(Experiment.UPDATE_GMT, update_gmt);

		uwr.eq(Experiment.ID, id);
		return svcexperiment.update(uwr);
	}

	/***
	 * 按id修改实体，返回是否成功
	 * 
	 * @param it 实体
	 * @return 是否成功
	 */
	public Boolean updateExperimentById(Experiment it) {

		logger.debug(this.getClass().getName() + ".updateExperimentById()");
		return svcexperiment.updateById(it);
	}

	/***
	 * 按id修改实体的IS_ACTIVED字段，返回是否成功
	 * 
	 * @param it 实体
	 * @return 是否成功
	 */
	public Boolean updateExperimentById(String operate, Integer id) {

		logger.debug(this.getClass().getName() + ".updateExperimentById()IS_ACTIVED");
		UpdateWrapper<Experiment> uwr = new UpdateWrapper<>();
		if (operate.equals("hideitem")) {
			uwr.set(Experiment.IS_ACTIVED, false);
		} else {
			uwr.set(Experiment.IS_ACTIVED, true);
		}
		uwr.eq(Experiment.ID, id);
		return svcexperiment.update(uwr);
	}

	/***
	 * 统计当前表的数量
	 * 
	 * @return
	 */
	public Integer countExperiment() {
		return svcexperiment.count();
	}

	/***
	 * 统计当前表的数量
	 * 
	 * @return
	 */
	public Integer countExperiment(QueryWrapper<Experiment> queryWrapper) {
		return svcexperiment.count(queryWrapper);
	}

	/***
	 * 按自定义查询统计,返回map
	 * 
	 * @return
	 */
	public Map<String, Integer> statExperimentGroupbyId() {
		List<Map<String, Object>> list = svcexperiment
				.listMaps(new QueryWrapper<Experiment>().select(Experiment.INTRO, "count(*)")
						.eq(Experiment.SUBJECT_ID, 0).groupBy(Experiment.ID).orderByAsc(Experiment.ID));
		return Util.listmapToMap(list, Experiment.INTRO, "count(*)");
	}

	/***
	 * 按自定义查询统计,返回map
	 * 
	 * @return
	 */
	public Map<String, Integer> statExperimentGroupbySubject_id() {

		return svcexperiment.statMapByFieldname(Experiment.SUBJECT_ID);
	}

	// TODO:--------------manageExperiment-end----------------
	// TODO:--------------manageExperiment_record-begin----------------
	/***
	 * 统计Experiment_record中，指定字段的最大值列表
	 * 
	 * @param fieldname 需要统计的字段
	 * @return Experiment_record表，指定字段中的最大值
	 */
	public Integer maxExperiment_record(String fieldname) {

		int rtv = 0;
		try {
			rtv = svcexperiment_record.max(fieldname);
		} catch (Exception e) {
		}
		return rtv;
	}

	/***
	 * 查询全部，返回一个map，用于数量较少时的映射
	 * 
	 * @return
	 */
	public Map<Integer, String> mapExperiment_record() {
		List<Experiment_record> list = svcexperiment_record.list();
		Map<Integer, String> map = new HashMap<Integer, String>();
		for (int i = 0; i < list.size(); i++) {
			map.put(list.get(i).getId(), list.get(i).getSno());
		}
		return map;
	}

	public Map<Integer, String> mapExperiment_record(Map<String, Object> params) {
		List<Experiment_record> list = listExperiment_recordByMap(params);
		Map<Integer, String> map = new HashMap<Integer, String>();
		for (int i = 0; i < list.size(); i++) {
			map.put(list.get(i).getId(), list.get(i).getSno());
		}
		return map;
	}

	/***
	 * 查询，返回Experiment_record列表
	 * 
	 * @return Experiment_record列表
	 */
	public List<Experiment_record> listExperiment_record() {

		Map<String, Object> params = new HashMap<String, Object>();
		return (List<Experiment_record>) svcexperiment_record.listByMap(params);
	}

	/***
	 * 查询，返回Experiment_record列表
	 * 
	 * @param params 查询条件
	 * @return Experiment_record列表
	 */
	public List<Experiment_record> listExperiment_recordByMap(Map<String, Object> params) {

		logger.debug(this.getClass().getName() + ".listExperiment_recordByMap()");
		return (List<Experiment_record>) svcexperiment_record.listByMap(params);
	}

	/***
	 * 查询，返回Experiment_record列表
	 * 
	 * @param params  查询条件（可以多个）
	 * @param ordlist 排序条件（可以多个）
	 * @return Experiment_record列表
	 */
	public List<Experiment_record> listExperiment_recordByMap(Map<String, Object> params, List<KeyAndValue> ordlist) {

		logger.debug(this.getClass().getName() + ".listExperiment_recordByMap()");
		// Map<String, Object> params = new HashMap<String, Object>();
		// params.put(Experiment_record.ID, 0);
		// List<KeyAndValue> ordlist = new ArrayList<KeyAndValue>();
		// ordlist.add(new KeyAndValue(Experiment_record.ID, "desc"));
		QueryWrapper<Experiment_record> queryWrapper = new QueryWrapper<>();
		if (params.size() > 0) {
			queryWrapper.allEq(params);
		}
		for (KeyAndValue od : ordlist) {
			if (od.getValue().equals("desc")) {
				queryWrapper.orderByDesc((String) od.getKey());
			} else {
				queryWrapper.orderByAsc((String) od.getKey());
			}
		}
		return svcexperiment_record.list(queryWrapper);
	}

	/***
	 * 按id查询，返回Experiment_record
	 * 
	 * @param id
	 * @return Experiment_record
	 */
	public Experiment_record getExperiment_recordById(Serializable id) {

		logger.debug(this.getClass().getName() + ".getExperiment_recordById()");
		return svcexperiment_record.getById(id);
	}

	/***
	 * 通过唯一值(数字)查找记录，返回Experiment_record
	 * 
	 * @param infoid
	 * @return Experiment_record
	 */
	public Experiment_record getExperiment_recordByStudent_id(Serializable student_id) {

		logger.debug(this.getClass().getName() + ".getExperiment_recordByStudent_id()");
		return svcexperiment_record.getOne(
				new QueryWrapper<Experiment_record>().eq(Experiment_record.STUDENT_ID, student_id).last("limit 1"));
	}

	/***
	 * 通过Map(多个条件)，查询返回Experiment_record
	 * 
	 * @param params 多个条件
	 * @return Experiment_record
	 */
	public Experiment_record getExperiment_recordByMap(Map<String, Object> params) {

		logger.debug(this.getClass().getName() + ".getExperiment_recordByMap()");
		// Map<String, Object> params = new HashMap<String, Object>();
		// params.put(Experiment_record.ID, 0);
		return svcexperiment_record.getOne(new QueryWrapper<Experiment_record>().allEq(params).last("limit 1"));
	}

	/***
	 * 查询，返回Experiment_record列表
	 * 
	 * @param columnname 排序字段
	 * @return Experiment_record列表
	 */
	public List<Experiment_record> listExperiment_recordOrderByAsc(String columnname) {

		logger.debug(this.getClass().getName() + ".listExperiment_recordOrderByAsc()");
		return svcexperiment_record.list(new QueryWrapper<Experiment_record>().orderByAsc(columnname));
	}

	/***
	 * 查询，返回Experiment_record列表
	 * 
	 * @param columnname 排序字段
	 * @return Experiment_record列表
	 */
	public List<Experiment_record> listExperiment_recordOrderByDesc(String columnname) {

		logger.debug(this.getClass().getName() + ".listExperiment_recordOrderByDesc()");
		return svcexperiment_record.list(new QueryWrapper<Experiment_record>().orderByDesc(columnname));
	}

	/***
	 * 查询，返回Experiment_record列表
	 * 
	 * @param columnname 排序字段
	 * @return Experiment_record列表
	 */
	public List<Experiment_record> listExperiment_recordByMapAsc(Map<String, Object> params, String columnname) {

		logger.debug(this.getClass().getName() + ".listExperiment_recordByMapAsc()");
		return svcexperiment_record.list(new QueryWrapper<Experiment_record>().allEq(params).orderByAsc(columnname));
	}

	/***
	 * 查询，返回Experiment_record列表
	 * 
	 * @param columnname 排序字段
	 * @return Experiment_record列表
	 */
	public List<Experiment_record> listExperiment_recordByMapDesc(Map<String, Object> params, String columnname) {

		logger.debug(this.getClass().getName() + ".listExperiment_recordByMapDesc()");
		return svcexperiment_record.list(new QueryWrapper<Experiment_record>().allEq(params).orderByDesc(columnname));
	}

	/***
	 * 
	 * @param pagenumber 页码
	 * @param pagesize   页面显示数量
	 * @return
	 */
	public PagerList<Experiment_record> pagerListExperiment_record(Integer pagenumber, Integer pagesize) {

		return pagerListExperiment_record(pagenumber, pagesize, "", new HashMap<String, String>());
	}

	/***
	 * 
	 * @param pagenumber 页码
	 * @param pagesize   页面显示数量
	 * @param keyword    关键字
	 * @return
	 */
	public PagerList<Experiment_record> pagerListExperiment_record(Integer pagenumber, Integer pagesize,
			String keyword) {

		return pagerListExperiment_record(pagenumber, pagesize, keyword, new HashMap<String, String>());
	}

	/***
	 * 
	 * @param pagenumber 页码
	 * @param pagesize   页面显示数量
	 * @param keyword    关键字
	 * @param sqlin      用in子句包括的id值
	 * @return
	 */
	public PagerList<Experiment_record> pagerListExperiment_record(Integer pagenumber, Integer pagesize, String keyword,
			Map<String, String> sqlin) {
		return pagerListExperiment_record(pagenumber, pagesize, keyword, sqlin, new HashMap<String, Object>());
	}

	/***
	 * 
	 * @param pagenumber 页码
	 * @param pagesize   页面显示数量
	 * @param keyword    关键字
	 * @param sqlin      用in子句包括的id值
	 * @param params     筛选条件
	 * @return
	 */
	public PagerList<Experiment_record> pagerListExperiment_record(Integer pagenumber, Integer pagesize, String keyword,
			Map<String, String> sqlin, Map<String, Object> params) {
		List<KeyAndValue> ordlist = new ArrayList<KeyAndValue>();
		ordlist.add(new KeyAndValue(Experiment_record.ID, "desc"));
		return pagerListExperiment_record(pagenumber, pagesize, keyword, sqlin, params, ordlist);
	}

	/***
	 * 
	 * @param pagenumber 页码
	 * @param pagesize   页面显示数量
	 * @param keyword    关键字
	 * @param sqlin      用in子句包括的id值
	 * @return
	 */
	public PagerList<Experiment_record> pagerListExperiment_record(Integer pagenumber, Integer pagesize, String keyword,
			Map<String, String> sqlin, Map<String, Object> params, List<KeyAndValue> ordlist) {

		Page<Experiment_record> page = new Page<>(pagenumber, pagesize);
		List<Experiment_record> list = null;

		QueryWrapper<Experiment_record> queryWrapper = new QueryWrapper<>();
		// 读取url中是否包含筛选条件
		String student_id = sqlin.get(Experiment_record.STUDENT_ID + "_id");
		String experiment_id = sqlin.get(Experiment_record.EXPERIMENT_ID + "_id");

		if (params.size() > 0) {
			queryWrapper.allEq(params);
		}
		if (StringUtils.isBlank(keyword) && StringUtils.isBlank(student_id) && StringUtils.isBlank(experiment_id)) {

			// --------1.准确匹配模式---------

		} else {
			// --------2.模糊匹配模式---------
			// 添加关键字模糊查找条件
			if (!StringUtils.isBlank(keyword)) {
				String kwss = keyword;
				queryWrapper.and(wr -> wr.like(Experiment_record.SNO, kwss).or().like(Experiment_record.COMMENT, kwss)
						.or().like(Experiment_record.MAINFLOW, kwss).or().like(Experiment_record.REPORT, kwss).or()
						.like(Experiment_record.RESULT, kwss).or().like(Experiment_record.SCORESCRIPT, kwss));
			}
			// 添加id使用in语句筛选
			if (!StringUtils.isBlank(student_id)) {
				queryWrapper.inSql(Experiment_record.STUDENT_ID, student_id);
			}
			if (!StringUtils.isBlank(experiment_id)) {
				queryWrapper.inSql(Experiment_record.EXPERIMENT_ID, experiment_id);
			}
			// --------2.模糊匹配模式---------
		}
		for (KeyAndValue od : ordlist) {
			if (od.getValue().equals("desc")) {
				queryWrapper.orderByDesc((String) od.getKey());
			} else {
				queryWrapper.orderByAsc((String) od.getKey());
			}
		}
		list = svcexperiment_record.page(page, queryWrapper).getRecords();
		// 清理数据,标注关键字，范围：所有字符型
		for (int i = 0; i < list.size(); i++) {
			// 如果头像为空，加载默认头像
			// if (StringUtils.isBlank(list.get(i).getWechat_headimgurl())
			// || list.get(i).getWechat_headimgurl().equals("0")) {
			// list.get(i).setWechat_headimgurl(Common.userheadimgurl);
			// }
			// 标注关键字，范围：所有字符型
			if (!StringUtils.isBlank(keyword)) {
				// 避免空值出现错误
				try {

					list.get(i).setSno((list.get(i).getSno().replace(keyword, Common.getKeywordSpan(keyword))));
					list.get(i).setComment((list.get(i).getComment().replace(keyword, Common.getKeywordSpan(keyword))));
					list.get(i)
							.setMainflow((list.get(i).getMainflow().replace(keyword, Common.getKeywordSpan(keyword))));
					list.get(i).setReport((list.get(i).getReport().replace(keyword, Common.getKeywordSpan(keyword))));
					list.get(i).setResult((list.get(i).getResult().replace(keyword, Common.getKeywordSpan(keyword))));
					list.get(i).setScorescript(
							(list.get(i).getScorescript().replace(keyword, Common.getKeywordSpan(keyword))));
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		}

		Pager<Experiment_record> pager = new Pager<>(page);
		PagerList<Experiment_record> pagerList = new PagerList<>(pager, list);

		return pagerList;
	}

	/***
	 * 保持新的实体，返回是否成功
	 * 
	 * @param it 实体
	 * @return 是否成功
	 */
	public Boolean saveExperiment_record(Experiment_record it) {

		logger.debug(this.getClass().getName() + ".saveExperiment_record()");
		return svcexperiment_record.save(it);
	}

	/***
	 * 按id删除，返回是否成功
	 * 
	 * @param id
	 * @return 是否成功
	 */
	public Boolean removeExperiment_recordById(Serializable id) {

		logger.debug(this.getClass().getName() + ".removeExperiment_recordById()");
		return svcexperiment_record.removeById(id);
	}

	/***
	 * 按id修改实体，返回布尔值，是否成功
	 * 
	 * @param it 实体
	 * @return 是否成功
	 */
	public Boolean updateExperiment_recordById(Integer student_id, String sno, Integer experiment_id, String comment,
			String mainflow, String report, String result, Integer score, Long submit, String scorescript,
			Integer reviewstate, Long update_gmt, Integer id) {

		logger.debug(this.getClass().getName() + ".updateExperiment_recordById()");
		UpdateWrapper<Experiment_record> uwr = new UpdateWrapper<>();
		uwr.set(Experiment_record.STUDENT_ID, student_id);
		uwr.set(Experiment_record.SNO, sno);
		uwr.set(Experiment_record.EXPERIMENT_ID, experiment_id);
		uwr.set(Experiment_record.COMMENT, comment);
		uwr.set(Experiment_record.MAINFLOW, mainflow);
		uwr.set(Experiment_record.REPORT, report);
		uwr.set(Experiment_record.RESULT, result);
		uwr.set(Experiment_record.SCORE, score);
		uwr.set(Experiment_record.SUBMIT, submit);
		uwr.set(Experiment_record.SCORESCRIPT, scorescript);
		uwr.set(Experiment_record.REVIEWSTATE, reviewstate);
		uwr.set(Experiment_record.UPDATE_GMT, update_gmt);

		uwr.eq(Experiment_record.ID, id);
		return svcexperiment_record.update(uwr);
	}

	/***
	 * 按id修改实体，返回是否成功
	 * 
	 * @param it 实体
	 * @return 是否成功
	 */
	public Boolean updateExperiment_recordById(Experiment_record it) {

		logger.debug(this.getClass().getName() + ".updateExperiment_recordById()");
		return svcexperiment_record.updateById(it);
	}

	/***
	 * 统计当前表的数量
	 * 
	 * @return
	 */
	public Integer countExperiment_record() {
		return svcexperiment_record.count();
	}

	/***
	 * 统计当前表的数量
	 * 
	 * @return
	 */
	public Integer countExperiment_record(QueryWrapper<Experiment_record> queryWrapper) {
		return svcexperiment_record.count(queryWrapper);
	}

	/***
	 * 按自定义查询统计,返回map
	 * 
	 * @return
	 */
	public Map<String, Integer> statExperiment_recordGroupbyId() {
		List<Map<String, Object>> list = svcexperiment_record.listMaps(new QueryWrapper<Experiment_record>()
				.select(Experiment_record.SNO, "count(*)").eq(Experiment_record.STUDENT_ID, 0)
				.groupBy(Experiment_record.ID).orderByAsc(Experiment_record.ID));
		return Util.listmapToMap(list, Experiment_record.SNO, "count(*)");
	}

	/***
	 * 按自定义查询统计,返回map
	 * 
	 * @return
	 */
	public Map<String, Integer> statExperiment_recordGroupbyStudent_id() {

		return svcexperiment_record.statMapByFieldname(Experiment_record.STUDENT_ID);
	}

	// TODO:--------------manageExperiment_record-end----------------
	// TODO:--------------manageLink_experiment_curriculum-begin----------------
	/***
	 * 统计Link_experiment_curriculum中，指定字段的最大值列表
	 * 
	 * @param fieldname 需要统计的字段
	 * @return Link_experiment_curriculum表，指定字段中的最大值
	 */
	public Integer maxLink_experiment_curriculum(String fieldname) {

		int rtv = 0;
		try {
			rtv = svclink_experiment_curriculum.max(fieldname);
		} catch (Exception e) {
		}
		return rtv;
	}

	/***
	 * 查询全部，返回一个map，用于数量较少时的映射
	 * 
	 * @return
	 */
	public Map<Integer, String> mapLink_experiment_curriculum() {
		List<Link_experiment_curriculum> list = svclink_experiment_curriculum.list();
		Map<Integer, String> map = new HashMap<Integer, String>();
		for (int i = 0; i < list.size(); i++) {
			// map.put(list.get(i).getId(), list.get(i).getName());
		}
		return map;
	}

	public Map<Integer, String> mapLink_experiment_curriculum(Map<String, Object> params) {
		List<Link_experiment_curriculum> list = listLink_experiment_curriculumByMap(params);
		Map<Integer, String> map = new HashMap<Integer, String>();
		for (int i = 0; i < list.size(); i++) {
			// map.put(list.get(i).getId(), list.get(i).getName());
		}
		return map;
	}

	/***
	 * 查询，返回Link_experiment_curriculum列表
	 * 
	 * @return Link_experiment_curriculum列表
	 */
	public List<Link_experiment_curriculum> listLink_experiment_curriculum() {

		Map<String, Object> params = new HashMap<String, Object>();
		return (List<Link_experiment_curriculum>) svclink_experiment_curriculum.listByMap(params);
	}

	/***
	 * 查询，返回Link_experiment_curriculum列表
	 * 
	 * @param params 查询条件
	 * @return Link_experiment_curriculum列表
	 */
	public List<Link_experiment_curriculum> listLink_experiment_curriculumByMap(Map<String, Object> params) {

		logger.debug(this.getClass().getName() + ".listLink_experiment_curriculumByMap()");
		return (List<Link_experiment_curriculum>) svclink_experiment_curriculum.listByMap(params);
	}

	/***
	 * 查询，返回Link_experiment_curriculum列表
	 * 
	 * @param params  查询条件（可以多个）
	 * @param ordlist 排序条件（可以多个）
	 * @return Link_experiment_curriculum列表
	 */
	public List<Link_experiment_curriculum> listLink_experiment_curriculumByMap(Map<String, Object> params,
			List<KeyAndValue> ordlist) {

		logger.debug(this.getClass().getName() + ".listLink_experiment_curriculumByMap()");
		// Map<String, Object> params = new HashMap<String, Object>();
		// params.put(Link_experiment_curriculum.ID, 0);
		// List<KeyAndValue> ordlist = new ArrayList<KeyAndValue>();
		// ordlist.add(new KeyAndValue(Link_experiment_curriculum.ID, "desc"));
		QueryWrapper<Link_experiment_curriculum> queryWrapper = new QueryWrapper<>();
		if (params.size() > 0) {
			queryWrapper.allEq(params);
		}
		for (KeyAndValue od : ordlist) {
			if (od.getValue().equals("desc")) {
				queryWrapper.orderByDesc((String) od.getKey());
			} else {
				queryWrapper.orderByAsc((String) od.getKey());
			}
		}
		return svclink_experiment_curriculum.list(queryWrapper);
	}

	/***
	 * 按id查询，返回Link_experiment_curriculum
	 * 
	 * @param id
	 * @return Link_experiment_curriculum
	 */
	public Link_experiment_curriculum getLink_experiment_curriculumById(Serializable id) {

		logger.debug(this.getClass().getName() + ".getLink_experiment_curriculumById()");
		return svclink_experiment_curriculum.getById(id);
	}

	/***
	 * 通过唯一值(数字)查找记录，返回Link_experiment_curriculum
	 * 
	 * @param infoid
	 * @return Link_experiment_curriculum
	 */
	public Link_experiment_curriculum getLink_experiment_curriculumByExperiment_id(Serializable experiment_id) {

		logger.debug(this.getClass().getName() + ".getLink_experiment_curriculumByExperiment_id()");
		return svclink_experiment_curriculum.getOne(new QueryWrapper<Link_experiment_curriculum>()
				.eq(Link_experiment_curriculum.EXPERIMENT_ID, experiment_id).last("limit 1"));
	}

	/***
	 * 通过Map(多个条件)，查询返回Link_experiment_curriculum
	 * 
	 * @param params 多个条件
	 * @return Link_experiment_curriculum
	 */
	public Link_experiment_curriculum getLink_experiment_curriculumByMap(Map<String, Object> params) {

		logger.debug(this.getClass().getName() + ".getLink_experiment_curriculumByMap()");
		// Map<String, Object> params = new HashMap<String, Object>();
		// params.put(Link_experiment_curriculum.ID, 0);
		return svclink_experiment_curriculum
				.getOne(new QueryWrapper<Link_experiment_curriculum>().allEq(params).last("limit 1"));
	}

	/***
	 * 查询，返回Link_experiment_curriculum列表
	 * 
	 * @param columnname 排序字段
	 * @return Link_experiment_curriculum列表
	 */
	public List<Link_experiment_curriculum> listLink_experiment_curriculumOrderByAsc(String columnname) {

		logger.debug(this.getClass().getName() + ".listLink_experiment_curriculumOrderByAsc()");
		return svclink_experiment_curriculum
				.list(new QueryWrapper<Link_experiment_curriculum>().orderByAsc(columnname));
	}

	/***
	 * 查询，返回Link_experiment_curriculum列表
	 * 
	 * @param columnname 排序字段
	 * @return Link_experiment_curriculum列表
	 */
	public List<Link_experiment_curriculum> listLink_experiment_curriculumOrderByDesc(String columnname) {

		logger.debug(this.getClass().getName() + ".listLink_experiment_curriculumOrderByDesc()");
		return svclink_experiment_curriculum
				.list(new QueryWrapper<Link_experiment_curriculum>().orderByDesc(columnname));
	}

	/***
	 * 查询，返回Link_experiment_curriculum列表
	 * 
	 * @param columnname 排序字段
	 * @return Link_experiment_curriculum列表
	 */
	public List<Link_experiment_curriculum> listLink_experiment_curriculumByMapAsc(Map<String, Object> params,
			String columnname) {

		logger.debug(this.getClass().getName() + ".listLink_experiment_curriculumByMapAsc()");
		return svclink_experiment_curriculum
				.list(new QueryWrapper<Link_experiment_curriculum>().allEq(params).orderByAsc(columnname));
	}

	/***
	 * 查询，返回Link_experiment_curriculum列表
	 * 
	 * @param columnname 排序字段
	 * @return Link_experiment_curriculum列表
	 */
	public List<Link_experiment_curriculum> listLink_experiment_curriculumByMapDesc(Map<String, Object> params,
			String columnname) {

		logger.debug(this.getClass().getName() + ".listLink_experiment_curriculumByMapDesc()");
		return svclink_experiment_curriculum
				.list(new QueryWrapper<Link_experiment_curriculum>().allEq(params).orderByDesc(columnname));
	}

	/***
	 * 
	 * @param pagenumber 页码
	 * @param pagesize   页面显示数量
	 * @return
	 */
	public PagerList<Link_experiment_curriculum> pagerListLink_experiment_curriculum(Integer pagenumber,
			Integer pagesize) {

		return pagerListLink_experiment_curriculum(pagenumber, pagesize, "", new HashMap<String, String>());
	}

	/***
	 * 
	 * @param pagenumber 页码
	 * @param pagesize   页面显示数量
	 * @param keyword    关键字
	 * @return
	 */
	public PagerList<Link_experiment_curriculum> pagerListLink_experiment_curriculum(Integer pagenumber,
			Integer pagesize, String keyword) {

		return pagerListLink_experiment_curriculum(pagenumber, pagesize, keyword, new HashMap<String, String>());
	}

	/***
	 * 
	 * @param pagenumber 页码
	 * @param pagesize   页面显示数量
	 * @param keyword    关键字
	 * @param sqlin      用in子句包括的id值
	 * @return
	 */
	public PagerList<Link_experiment_curriculum> pagerListLink_experiment_curriculum(Integer pagenumber,
			Integer pagesize, String keyword, Map<String, String> sqlin) {
		return pagerListLink_experiment_curriculum(pagenumber, pagesize, keyword, sqlin, new HashMap<String, Object>());
	}

	/***
	 * 
	 * @param pagenumber 页码
	 * @param pagesize   页面显示数量
	 * @param keyword    关键字
	 * @param sqlin      用in子句包括的id值
	 * @param params     筛选条件
	 * @return
	 */
	public PagerList<Link_experiment_curriculum> pagerListLink_experiment_curriculum(Integer pagenumber,
			Integer pagesize, String keyword, Map<String, String> sqlin, Map<String, Object> params) {
		List<KeyAndValue> ordlist = new ArrayList<KeyAndValue>();
		ordlist.add(new KeyAndValue(Link_experiment_curriculum.SORTID, "desc"));
		return pagerListLink_experiment_curriculum(pagenumber, pagesize, keyword, sqlin, params, ordlist);
	}

	/***
	 * 
	 * @param pagenumber 页码
	 * @param pagesize   页面显示数量
	 * @param keyword    关键字
	 * @param sqlin      用in子句包括的id值
	 * @return
	 */
	public PagerList<Link_experiment_curriculum> pagerListLink_experiment_curriculum(Integer pagenumber,
			Integer pagesize, String keyword, Map<String, String> sqlin, Map<String, Object> params,
			List<KeyAndValue> ordlist) {

		Page<Link_experiment_curriculum> page = new Page<>(pagenumber, pagesize);
		List<Link_experiment_curriculum> list = null;

		QueryWrapper<Link_experiment_curriculum> queryWrapper = new QueryWrapper<>();
		// 读取url中是否包含筛选条件
		String experiment_id = sqlin.get(Link_experiment_curriculum.EXPERIMENT_ID + "_id");
		String curriculum_id = sqlin.get(Link_experiment_curriculum.CURRICULUM_ID + "_id");
		String subject_id = sqlin.get(Link_experiment_curriculum.SUBJECT_ID + "_id");

		if (params.size() > 0) {
			queryWrapper.allEq(params);
		}
		if (StringUtils.isBlank(keyword) && StringUtils.isBlank(experiment_id) && StringUtils.isBlank(curriculum_id)
				&& StringUtils.isBlank(subject_id)) {

			// --------1.准确匹配模式---------

		} else {
			// --------2.模糊匹配模式---------
			// 添加关键字模糊查找条件
			if (!StringUtils.isBlank(keyword)) {
				String kwss = keyword;
			}
			// 添加id使用in语句筛选
			if (!StringUtils.isBlank(experiment_id)) {
				queryWrapper.inSql(Link_experiment_curriculum.EXPERIMENT_ID, experiment_id);
			}
			if (!StringUtils.isBlank(curriculum_id)) {
				queryWrapper.inSql(Link_experiment_curriculum.CURRICULUM_ID, curriculum_id);
			}
			if (!StringUtils.isBlank(subject_id)) {
				queryWrapper.inSql(Link_experiment_curriculum.SUBJECT_ID, subject_id);
			}
			// --------2.模糊匹配模式---------
		}
		for (KeyAndValue od : ordlist) {
			if (od.getValue().equals("desc")) {
				queryWrapper.orderByDesc((String) od.getKey());
			} else {
				queryWrapper.orderByAsc((String) od.getKey());
			}
		}
		list = svclink_experiment_curriculum.page(page, queryWrapper).getRecords();
		// 清理数据,标注关键字，范围：所有字符型
		for (int i = 0; i < list.size(); i++) {
			// 如果头像为空，加载默认头像
			// if (StringUtils.isBlank(list.get(i).getWechat_headimgurl())
			// || list.get(i).getWechat_headimgurl().equals("0")) {
			// list.get(i).setWechat_headimgurl(Common.userheadimgurl);
			// }
			// 标注关键字，范围：所有字符型
			if (!StringUtils.isBlank(keyword)) {
				// 避免空值出现错误
				try {

				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		}

		Pager<Link_experiment_curriculum> pager = new Pager<>(page);
		PagerList<Link_experiment_curriculum> pagerList = new PagerList<>(pager, list);

		return pagerList;
	}

	/***
	 * 保持新的实体，返回是否成功
	 * 
	 * @param it 实体
	 * @return 是否成功
	 */
	public Boolean saveLink_experiment_curriculum(Link_experiment_curriculum it) {

		logger.debug(this.getClass().getName() + ".saveLink_experiment_curriculum()");
		return svclink_experiment_curriculum.save(it);
	}

	/***
	 * 按id删除，返回是否成功
	 * 
	 * @param id
	 * @return 是否成功
	 */
	public Boolean removeLink_experiment_curriculumById(Serializable id) {

		logger.debug(this.getClass().getName() + ".removeLink_experiment_curriculumById()");
		return svclink_experiment_curriculum.removeById(id);
	}

	/***
	 * 按id修改实体，返回布尔值，是否成功
	 * 
	 * @param it 实体
	 * @return 是否成功
	 */
	public Boolean updateLink_experiment_curriculumById(Integer experiment_id, Integer curriculum_id,
			Integer subject_id, Long opening_gmt, Long closing_gmt, Integer sortid, Boolean is_actived, Long update_gmt,
			Integer id) {

		logger.debug(this.getClass().getName() + ".updateLink_experiment_curriculumById()");
		UpdateWrapper<Link_experiment_curriculum> uwr = new UpdateWrapper<>();
		uwr.set(Link_experiment_curriculum.EXPERIMENT_ID, experiment_id);
		uwr.set(Link_experiment_curriculum.CURRICULUM_ID, curriculum_id);
		uwr.set(Link_experiment_curriculum.SUBJECT_ID, subject_id);
		uwr.set(Link_experiment_curriculum.OPENING_GMT, opening_gmt);
		uwr.set(Link_experiment_curriculum.CLOSING_GMT, closing_gmt);
		uwr.set(Link_experiment_curriculum.SORTID, sortid);
		uwr.set(Link_experiment_curriculum.IS_ACTIVED, is_actived);
		uwr.set(Link_experiment_curriculum.UPDATE_GMT, update_gmt);

		uwr.eq(Link_experiment_curriculum.ID, id);
		return svclink_experiment_curriculum.update(uwr);
	}

	/***
	 * 按id修改实体，返回是否成功
	 * 
	 * @param it 实体
	 * @return 是否成功
	 */
	public Boolean updateLink_experiment_curriculumById(Link_experiment_curriculum it) {

		logger.debug(this.getClass().getName() + ".updateLink_experiment_curriculumById()");
		return svclink_experiment_curriculum.updateById(it);
	}

	/***
	 * 按id修改实体的IS_ACTIVED字段，返回是否成功
	 * 
	 * @param it 实体
	 * @return 是否成功
	 */
	public Boolean updateLink_experiment_curriculumById(String operate, Integer id) {

		logger.debug(this.getClass().getName() + ".updateLink_experiment_curriculumById()IS_ACTIVED");
		UpdateWrapper<Link_experiment_curriculum> uwr = new UpdateWrapper<>();
		if (operate.equals("hideitem")) {
			uwr.set(Link_experiment_curriculum.IS_ACTIVED, false);
		} else {
			uwr.set(Link_experiment_curriculum.IS_ACTIVED, true);
		}
		uwr.eq(Link_experiment_curriculum.ID, id);
		return svclink_experiment_curriculum.update(uwr);
	}

	public Boolean moveLink_experiment_curriculum(String method, String upOrDown, Integer id, String sortColumn) {

		Link_experiment_curriculum it = svclink_experiment_curriculum.getById(id);
		// 读取当前已有信息
		// SELECT * FROM `column` where column_parentid =0 and sortid<4 order by
		// sortid desc limit 1
		QueryWrapper<Link_experiment_curriculum> queryWrapper = new QueryWrapper<>();
		// 同一个父栏目下
		// queryWrapper.eq(Link_experiment_curriculum.COLUMN_PARENTID ,
		// it.getColumn_parentid());
		if (method.equals(upOrDown)) {
			queryWrapper.lt(sortColumn, it.getSortid());
			queryWrapper.orderByDesc(sortColumn);
		} else {
			queryWrapper.gt(sortColumn, it.getSortid());
			queryWrapper.orderByAsc(sortColumn);
		}
		queryWrapper.last("limit 1");

		Link_experiment_curriculum target = svclink_experiment_curriculum.getOne(queryWrapper);

		if (target == null) {
			// 没有
			return false;
		} else {

			UpdateWrapper<Link_experiment_curriculum> uwr1 = new UpdateWrapper<>();
			uwr1.set(Link_experiment_curriculum.SORTID, target.getSortid());
			uwr1.eq(Link_experiment_curriculum.ID, it.getId());

			UpdateWrapper<Link_experiment_curriculum> uwr2 = new UpdateWrapper<>();
			uwr2.set(Link_experiment_curriculum.SORTID, it.getSortid());
			uwr2.eq(Link_experiment_curriculum.ID, target.getId());

			try {
				svclink_experiment_curriculum.update(uwr1);
				svclink_experiment_curriculum.update(uwr2);
			} catch (Exception e) {
				e.printStackTrace();
				return false;
			}
			return true;
		}
	}

	/***
	 * 统计当前表的数量
	 * 
	 * @return
	 */
	public Integer countLink_experiment_curriculum() {
		return svclink_experiment_curriculum.count();
	}

	/***
	 * 统计当前表的数量
	 * 
	 * @return
	 */
	public Integer countLink_experiment_curriculum(QueryWrapper<Link_experiment_curriculum> queryWrapper) {
		return svclink_experiment_curriculum.count(queryWrapper);
	}

	/***
	 * 按自定义查询统计,返回map
	 * 
	 * @return
	 */
	public Map<String, Integer> statLink_experiment_curriculumGroupbyId() {
		List<Map<String, Object>> list = svclink_experiment_curriculum.listMaps(
				new QueryWrapper<Link_experiment_curriculum>().select(Link_experiment_curriculum.ID, "count(*)")
						.eq(Link_experiment_curriculum.EXPERIMENT_ID, 0).groupBy(Link_experiment_curriculum.ID)
						.orderByAsc(Link_experiment_curriculum.ID));
		return Util.listmapToMap(list, Link_experiment_curriculum.ID, "count(*)");
	}

	/***
	 * 按自定义查询统计,返回map
	 * 
	 * @return
	 */
	public Map<String, Integer> statLink_experiment_curriculumGroupbyExperiment_id() {

		return svclink_experiment_curriculum.statMapByFieldname(Link_experiment_curriculum.EXPERIMENT_ID);
	}

	// TODO:--------------manageLink_experiment_curriculum-end----------------
	// TODO:--------------manageLink_role_permit-begin----------------
	/***
	 * 统计Link_role_permit中，指定字段的最大值列表
	 * 
	 * @param fieldname 需要统计的字段
	 * @return Link_role_permit表，指定字段中的最大值
	 */
	public Integer maxLink_role_permit(String fieldname) {

		int rtv = 0;
		try {
			rtv = svclink_role_permit.max(fieldname);
		} catch (Exception e) {
		}
		return rtv;
	}

	/***
	 * 查询全部，返回一个map，用于数量较少时的映射
	 * 
	 * @return
	 */
	public Map<Integer, String> mapLink_role_permit() {
		List<Link_role_permit> list = svclink_role_permit.list();
		Map<Integer, String> map = new HashMap<Integer, String>();
		for (int i = 0; i < list.size(); i++) {
			// map.put(list.get(i).getId(), list.get(i).getName());
		}
		return map;
	}

	public Map<Integer, String> mapLink_role_permit(Map<String, Object> params) {
		List<Link_role_permit> list = listLink_role_permitByMap(params);
		Map<Integer, String> map = new HashMap<Integer, String>();
		for (int i = 0; i < list.size(); i++) {
			// map.put(list.get(i).getId(), list.get(i).getName());
		}
		return map;
	}

	/***
	 * 查询，返回Link_role_permit列表
	 * 
	 * @return Link_role_permit列表
	 */
	public List<Link_role_permit> listLink_role_permit() {

		Map<String, Object> params = new HashMap<String, Object>();
		return (List<Link_role_permit>) svclink_role_permit.listByMap(params);
	}

	/***
	 * 查询，返回Link_role_permit列表
	 * 
	 * @param params 查询条件
	 * @return Link_role_permit列表
	 */
	public List<Link_role_permit> listLink_role_permitByMap(Map<String, Object> params) {

		logger.debug(this.getClass().getName() + ".listLink_role_permitByMap()");
		return (List<Link_role_permit>) svclink_role_permit.listByMap(params);
	}

	/***
	 * 查询，返回Link_role_permit列表
	 * 
	 * @param params  查询条件（可以多个）
	 * @param ordlist 排序条件（可以多个）
	 * @return Link_role_permit列表
	 */
	public List<Link_role_permit> listLink_role_permitByMap(Map<String, Object> params, List<KeyAndValue> ordlist) {

		logger.debug(this.getClass().getName() + ".listLink_role_permitByMap()");
		// Map<String, Object> params = new HashMap<String, Object>();
		// params.put(Link_role_permit.ID, 0);
		// List<KeyAndValue> ordlist = new ArrayList<KeyAndValue>();
		// ordlist.add(new KeyAndValue(Link_role_permit.ID, "desc"));
		QueryWrapper<Link_role_permit> queryWrapper = new QueryWrapper<>();
		if (params.size() > 0) {
			queryWrapper.allEq(params);
		}
		for (KeyAndValue od : ordlist) {
			if (od.getValue().equals("desc")) {
				queryWrapper.orderByDesc((String) od.getKey());
			} else {
				queryWrapper.orderByAsc((String) od.getKey());
			}
		}
		return svclink_role_permit.list(queryWrapper);
	}

	/***
	 * 按id查询，返回Link_role_permit
	 * 
	 * @param id
	 * @return Link_role_permit
	 */
	public Link_role_permit getLink_role_permitById(Serializable id) {

		logger.debug(this.getClass().getName() + ".getLink_role_permitById()");
		return svclink_role_permit.getById(id);
	}

	/***
	 * 通过唯一值(数字)查找记录，返回Link_role_permit
	 * 
	 * @param infoid
	 * @return Link_role_permit
	 */
	public Link_role_permit getLink_role_permitByRole_id(Serializable role_id) {

		logger.debug(this.getClass().getName() + ".getLink_role_permitByRole_id()");
		return svclink_role_permit
				.getOne(new QueryWrapper<Link_role_permit>().eq(Link_role_permit.ROLE_ID, role_id).last("limit 1"));
	}

	/***
	 * 通过Map(多个条件)，查询返回Link_role_permit
	 * 
	 * @param params 多个条件
	 * @return Link_role_permit
	 */
	public Link_role_permit getLink_role_permitByMap(Map<String, Object> params) {

		logger.debug(this.getClass().getName() + ".getLink_role_permitByMap()");
		// Map<String, Object> params = new HashMap<String, Object>();
		// params.put(Link_role_permit.ID, 0);
		return svclink_role_permit.getOne(new QueryWrapper<Link_role_permit>().allEq(params).last("limit 1"));
	}

	/***
	 * 查询，返回Link_role_permit列表
	 * 
	 * @param columnname 排序字段
	 * @return Link_role_permit列表
	 */
	public List<Link_role_permit> listLink_role_permitOrderByAsc(String columnname) {

		logger.debug(this.getClass().getName() + ".listLink_role_permitOrderByAsc()");
		return svclink_role_permit.list(new QueryWrapper<Link_role_permit>().orderByAsc(columnname));
	}

	/***
	 * 查询，返回Link_role_permit列表
	 * 
	 * @param columnname 排序字段
	 * @return Link_role_permit列表
	 */
	public List<Link_role_permit> listLink_role_permitOrderByDesc(String columnname) {

		logger.debug(this.getClass().getName() + ".listLink_role_permitOrderByDesc()");
		return svclink_role_permit.list(new QueryWrapper<Link_role_permit>().orderByDesc(columnname));
	}

	/***
	 * 查询，返回Link_role_permit列表
	 * 
	 * @param columnname 排序字段
	 * @return Link_role_permit列表
	 */
	public List<Link_role_permit> listLink_role_permitByMapAsc(Map<String, Object> params, String columnname) {

		logger.debug(this.getClass().getName() + ".listLink_role_permitByMapAsc()");
		return svclink_role_permit.list(new QueryWrapper<Link_role_permit>().allEq(params).orderByAsc(columnname));
	}

	/***
	 * 查询，返回Link_role_permit列表
	 * 
	 * @param columnname 排序字段
	 * @return Link_role_permit列表
	 */
	public List<Link_role_permit> listLink_role_permitByMapDesc(Map<String, Object> params, String columnname) {

		logger.debug(this.getClass().getName() + ".listLink_role_permitByMapDesc()");
		return svclink_role_permit.list(new QueryWrapper<Link_role_permit>().allEq(params).orderByDesc(columnname));
	}

	/***
	 * 
	 * @param pagenumber 页码
	 * @param pagesize   页面显示数量
	 * @return
	 */
	public PagerList<Link_role_permit> pagerListLink_role_permit(Integer pagenumber, Integer pagesize) {

		return pagerListLink_role_permit(pagenumber, pagesize, "", new HashMap<String, String>());
	}

	/***
	 * 
	 * @param pagenumber 页码
	 * @param pagesize   页面显示数量
	 * @param keyword    关键字
	 * @return
	 */
	public PagerList<Link_role_permit> pagerListLink_role_permit(Integer pagenumber, Integer pagesize, String keyword) {

		return pagerListLink_role_permit(pagenumber, pagesize, keyword, new HashMap<String, String>());
	}

	/***
	 * 
	 * @param pagenumber 页码
	 * @param pagesize   页面显示数量
	 * @param keyword    关键字
	 * @param sqlin      用in子句包括的id值
	 * @return
	 */
	public PagerList<Link_role_permit> pagerListLink_role_permit(Integer pagenumber, Integer pagesize, String keyword,
			Map<String, String> sqlin) {
		return pagerListLink_role_permit(pagenumber, pagesize, keyword, sqlin, new HashMap<String, Object>());
	}

	/***
	 * 
	 * @param pagenumber 页码
	 * @param pagesize   页面显示数量
	 * @param keyword    关键字
	 * @param sqlin      用in子句包括的id值
	 * @param params     筛选条件
	 * @return
	 */
	public PagerList<Link_role_permit> pagerListLink_role_permit(Integer pagenumber, Integer pagesize, String keyword,
			Map<String, String> sqlin, Map<String, Object> params) {
		List<KeyAndValue> ordlist = new ArrayList<KeyAndValue>();
		ordlist.add(new KeyAndValue(Link_role_permit.ID, "desc"));
		return pagerListLink_role_permit(pagenumber, pagesize, keyword, sqlin, params, ordlist);
	}

	/***
	 * 
	 * @param pagenumber 页码
	 * @param pagesize   页面显示数量
	 * @param keyword    关键字
	 * @param sqlin      用in子句包括的id值
	 * @return
	 */
	public PagerList<Link_role_permit> pagerListLink_role_permit(Integer pagenumber, Integer pagesize, String keyword,
			Map<String, String> sqlin, Map<String, Object> params, List<KeyAndValue> ordlist) {

		Page<Link_role_permit> page = new Page<>(pagenumber, pagesize);
		List<Link_role_permit> list = null;

		QueryWrapper<Link_role_permit> queryWrapper = new QueryWrapper<>();
		// 读取url中是否包含筛选条件
		String role_id = sqlin.get(Link_role_permit.ROLE_ID + "_id");
		String permit_id = sqlin.get(Link_role_permit.PERMIT_ID + "_id");

		if (params.size() > 0) {
			queryWrapper.allEq(params);
		}
		if (StringUtils.isBlank(keyword) && StringUtils.isBlank(role_id) && StringUtils.isBlank(permit_id)) {

			// --------1.准确匹配模式---------

		} else {
			// --------2.模糊匹配模式---------
			// 添加关键字模糊查找条件
			if (!StringUtils.isBlank(keyword)) {
				String kwss = keyword;
			}
			// 添加id使用in语句筛选
			if (!StringUtils.isBlank(role_id)) {
				queryWrapper.inSql(Link_role_permit.ROLE_ID, role_id);
			}
			if (!StringUtils.isBlank(permit_id)) {
				queryWrapper.inSql(Link_role_permit.PERMIT_ID, permit_id);
			}
			// --------2.模糊匹配模式---------
		}
		for (KeyAndValue od : ordlist) {
			if (od.getValue().equals("desc")) {
				queryWrapper.orderByDesc((String) od.getKey());
			} else {
				queryWrapper.orderByAsc((String) od.getKey());
			}
		}
		list = svclink_role_permit.page(page, queryWrapper).getRecords();
		// 清理数据,标注关键字，范围：所有字符型
		for (int i = 0; i < list.size(); i++) {
			// 如果头像为空，加载默认头像
			// if (StringUtils.isBlank(list.get(i).getWechat_headimgurl())
			// || list.get(i).getWechat_headimgurl().equals("0")) {
			// list.get(i).setWechat_headimgurl(Common.userheadimgurl);
			// }
			// 标注关键字，范围：所有字符型
			if (!StringUtils.isBlank(keyword)) {
				// 避免空值出现错误
				try {

				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		}

		Pager<Link_role_permit> pager = new Pager<>(page);
		PagerList<Link_role_permit> pagerList = new PagerList<>(pager, list);

		return pagerList;
	}

	/***
	 * 保持新的实体，返回是否成功
	 * 
	 * @param it 实体
	 * @return 是否成功
	 */
	public Boolean saveLink_role_permit(Link_role_permit it) {

		logger.debug(this.getClass().getName() + ".saveLink_role_permit()");
		return svclink_role_permit.save(it);
	}

	/***
	 * 按id删除，返回是否成功
	 * 
	 * @param id
	 * @return 是否成功
	 */
	public Boolean removeLink_role_permitById(Serializable id) {

		logger.debug(this.getClass().getName() + ".removeLink_role_permitById()");
		return svclink_role_permit.removeById(id);
	}

	/***
	 * 按id修改实体，返回布尔值，是否成功
	 * 
	 * @param it 实体
	 * @return 是否成功
	 */
	public Boolean updateLink_role_permitById(Integer role_id, Integer permit_id, Integer update_userid,
			Long update_gmt, Integer id) {

		logger.debug(this.getClass().getName() + ".updateLink_role_permitById()");
		UpdateWrapper<Link_role_permit> uwr = new UpdateWrapper<>();
		uwr.set(Link_role_permit.ROLE_ID, role_id);
		uwr.set(Link_role_permit.PERMIT_ID, permit_id);
		uwr.set(Link_role_permit.UPDATE_USERID, update_userid);
		uwr.set(Link_role_permit.UPDATE_GMT, update_gmt);

		uwr.eq(Link_role_permit.ID, id);
		return svclink_role_permit.update(uwr);
	}

	/***
	 * 按id修改实体，返回是否成功
	 * 
	 * @param it 实体
	 * @return 是否成功
	 */
	public Boolean updateLink_role_permitById(Link_role_permit it) {

		logger.debug(this.getClass().getName() + ".updateLink_role_permitById()");
		return svclink_role_permit.updateById(it);
	}

	/***
	 * 统计当前表的数量
	 * 
	 * @return
	 */
	public Integer countLink_role_permit() {
		return svclink_role_permit.count();
	}

	/***
	 * 统计当前表的数量
	 * 
	 * @return
	 */
	public Integer countLink_role_permit(QueryWrapper<Link_role_permit> queryWrapper) {
		return svclink_role_permit.count(queryWrapper);
	}

	/***
	 * 按自定义查询统计,返回map
	 * 
	 * @return
	 */
	public Map<String, Integer> statLink_role_permitGroupbyId() {
		List<Map<String, Object>> list = svclink_role_permit
				.listMaps(new QueryWrapper<Link_role_permit>().select(Link_role_permit.ID, "count(*)")
						.eq(Link_role_permit.ROLE_ID, 0).groupBy(Link_role_permit.ID).orderByAsc(Link_role_permit.ID));
		return Util.listmapToMap(list, Link_role_permit.ID, "count(*)");
	}

	/***
	 * 按自定义查询统计,返回map
	 * 
	 * @return
	 */
	public Map<String, Integer> statLink_role_permitGroupbyRole_id() {

		return svclink_role_permit.statMapByFieldname(Link_role_permit.ROLE_ID);
	}

	// TODO:--------------manageLink_role_permit-end----------------
	// TODO:--------------manageLink_student2group-begin----------------
	/***
	 * 统计Link_student2group中，指定字段的最大值列表
	 * 
	 * @param fieldname 需要统计的字段
	 * @return Link_student2group表，指定字段中的最大值
	 */
	public Integer maxLink_student2group(String fieldname) {

		int rtv = 0;
		try {
			rtv = svclink_student2group.max(fieldname);
		} catch (Exception e) {
		}
		return rtv;
	}

	/***
	 * 查询全部，返回一个map，用于数量较少时的映射
	 * 
	 * @return
	 */
	public Map<Integer, String> mapLink_student2group() {
		List<Link_student2group> list = svclink_student2group.list();
		Map<Integer, String> map = new HashMap<Integer, String>();
		for (int i = 0; i < list.size(); i++) {
			// map.put(list.get(i).getId(), list.get(i).getName());
		}
		return map;
	}

	public Map<Integer, String> mapLink_student2group(Map<String, Object> params) {
		List<Link_student2group> list = listLink_student2groupByMap(params);
		Map<Integer, String> map = new HashMap<Integer, String>();
		for (int i = 0; i < list.size(); i++) {
			// map.put(list.get(i).getId(), list.get(i).getName());
		}
		return map;
	}

	/***
	 * 查询，返回Link_student2group列表
	 * 
	 * @return Link_student2group列表
	 */
	public List<Link_student2group> listLink_student2group() {

		Map<String, Object> params = new HashMap<String, Object>();
		return (List<Link_student2group>) svclink_student2group.listByMap(params);
	}

	/***
	 * 查询，返回Link_student2group列表
	 * 
	 * @param params 查询条件
	 * @return Link_student2group列表
	 */
	public List<Link_student2group> listLink_student2groupByMap(Map<String, Object> params) {

		logger.debug(this.getClass().getName() + ".listLink_student2groupByMap()");
		return (List<Link_student2group>) svclink_student2group.listByMap(params);
	}

	/***
	 * 查询，返回Link_student2group列表
	 * 
	 * @param params  查询条件（可以多个）
	 * @param ordlist 排序条件（可以多个）
	 * @return Link_student2group列表
	 */
	public List<Link_student2group> listLink_student2groupByMap(Map<String, Object> params, List<KeyAndValue> ordlist) {

		logger.debug(this.getClass().getName() + ".listLink_student2groupByMap()");
		// Map<String, Object> params = new HashMap<String, Object>();
		// params.put(Link_student2group.ID, 0);
		// List<KeyAndValue> ordlist = new ArrayList<KeyAndValue>();
		// ordlist.add(new KeyAndValue(Link_student2group.ID, "desc"));
		QueryWrapper<Link_student2group> queryWrapper = new QueryWrapper<>();
		if (params.size() > 0) {
			queryWrapper.allEq(params);
		}
		for (KeyAndValue od : ordlist) {
			if (od.getValue().equals("desc")) {
				queryWrapper.orderByDesc((String) od.getKey());
			} else {
				queryWrapper.orderByAsc((String) od.getKey());
			}
		}
		return svclink_student2group.list(queryWrapper);
	}

	/***
	 * 按id查询，返回Link_student2group
	 * 
	 * @param id
	 * @return Link_student2group
	 */
	public Link_student2group getLink_student2groupById(Serializable id) {

		logger.debug(this.getClass().getName() + ".getLink_student2groupById()");
		return svclink_student2group.getById(id);
	}

	/***
	 * 通过唯一值(数字)查找记录，返回Link_student2group
	 * 
	 * @param infoid
	 * @return Link_student2group
	 */
	public Link_student2group getLink_student2groupByStudent_id(Serializable student_id) {

		logger.debug(this.getClass().getName() + ".getLink_student2groupByStudent_id()");
		return svclink_student2group.getOne(
				new QueryWrapper<Link_student2group>().eq(Link_student2group.STUDENT_ID, student_id).last("limit 1"));
	}

	/***
	 * 通过Map(多个条件)，查询返回Link_student2group
	 * 
	 * @param params 多个条件
	 * @return Link_student2group
	 */
	public Link_student2group getLink_student2groupByMap(Map<String, Object> params) {

		logger.debug(this.getClass().getName() + ".getLink_student2groupByMap()");
		// Map<String, Object> params = new HashMap<String, Object>();
		// params.put(Link_student2group.ID, 0);
		return svclink_student2group.getOne(new QueryWrapper<Link_student2group>().allEq(params).last("limit 1"));
	}

	/***
	 * 查询，返回Link_student2group列表
	 * 
	 * @param columnname 排序字段
	 * @return Link_student2group列表
	 */
	public List<Link_student2group> listLink_student2groupOrderByAsc(String columnname) {

		logger.debug(this.getClass().getName() + ".listLink_student2groupOrderByAsc()");
		return svclink_student2group.list(new QueryWrapper<Link_student2group>().orderByAsc(columnname));
	}

	/***
	 * 查询，返回Link_student2group列表
	 * 
	 * @param columnname 排序字段
	 * @return Link_student2group列表
	 */
	public List<Link_student2group> listLink_student2groupOrderByDesc(String columnname) {

		logger.debug(this.getClass().getName() + ".listLink_student2groupOrderByDesc()");
		return svclink_student2group.list(new QueryWrapper<Link_student2group>().orderByDesc(columnname));
	}

	/***
	 * 查询，返回Link_student2group列表
	 * 
	 * @param columnname 排序字段
	 * @return Link_student2group列表
	 */
	public List<Link_student2group> listLink_student2groupByMapAsc(Map<String, Object> params, String columnname) {

		logger.debug(this.getClass().getName() + ".listLink_student2groupByMapAsc()");
		return svclink_student2group.list(new QueryWrapper<Link_student2group>().allEq(params).orderByAsc(columnname));
	}

	/***
	 * 查询，返回Link_student2group列表
	 * 
	 * @param columnname 排序字段
	 * @return Link_student2group列表
	 */
	public List<Link_student2group> listLink_student2groupByMapDesc(Map<String, Object> params, String columnname) {

		logger.debug(this.getClass().getName() + ".listLink_student2groupByMapDesc()");
		return svclink_student2group.list(new QueryWrapper<Link_student2group>().allEq(params).orderByDesc(columnname));
	}

	/***
	 * 
	 * @param pagenumber 页码
	 * @param pagesize   页面显示数量
	 * @return
	 */
	public PagerList<Link_student2group> pagerListLink_student2group(Integer pagenumber, Integer pagesize) {

		return pagerListLink_student2group(pagenumber, pagesize, "", new HashMap<String, String>());
	}

	/***
	 * 
	 * @param pagenumber 页码
	 * @param pagesize   页面显示数量
	 * @param keyword    关键字
	 * @return
	 */
	public PagerList<Link_student2group> pagerListLink_student2group(Integer pagenumber, Integer pagesize,
			String keyword) {

		return pagerListLink_student2group(pagenumber, pagesize, keyword, new HashMap<String, String>());
	}

	/***
	 * 
	 * @param pagenumber 页码
	 * @param pagesize   页面显示数量
	 * @param keyword    关键字
	 * @param sqlin      用in子句包括的id值
	 * @return
	 */
	public PagerList<Link_student2group> pagerListLink_student2group(Integer pagenumber, Integer pagesize,
			String keyword, Map<String, String> sqlin) {
		return pagerListLink_student2group(pagenumber, pagesize, keyword, sqlin, new HashMap<String, Object>());
	}

	/***
	 * 
	 * @param pagenumber 页码
	 * @param pagesize   页面显示数量
	 * @param keyword    关键字
	 * @param sqlin      用in子句包括的id值
	 * @param params     筛选条件
	 * @return
	 */
	public PagerList<Link_student2group> pagerListLink_student2group(Integer pagenumber, Integer pagesize,
			String keyword, Map<String, String> sqlin, Map<String, Object> params) {
		List<KeyAndValue> ordlist = new ArrayList<KeyAndValue>();
		ordlist.add(new KeyAndValue(Link_student2group.ID, "desc"));
		return pagerListLink_student2group(pagenumber, pagesize, keyword, sqlin, params, ordlist);
	}

	/***
	 * 
	 * @param pagenumber 页码
	 * @param pagesize   页面显示数量
	 * @param keyword    关键字
	 * @param sqlin      用in子句包括的id值
	 * @return
	 */
	public PagerList<Link_student2group> pagerListLink_student2group(Integer pagenumber, Integer pagesize,
			String keyword, Map<String, String> sqlin, Map<String, Object> params, List<KeyAndValue> ordlist) {

		Page<Link_student2group> page = new Page<>(pagenumber, pagesize);
		List<Link_student2group> list = null;

		QueryWrapper<Link_student2group> queryWrapper = new QueryWrapper<>();
		// 读取url中是否包含筛选条件
		String student_id = sqlin.get(Link_student2group.STUDENT_ID + "_id");
		String student_group_id = sqlin.get(Link_student2group.STUDENT_GROUP_ID + "_id");

		if (params.size() > 0) {
			queryWrapper.allEq(params);
		}
		if (StringUtils.isBlank(keyword) && StringUtils.isBlank(student_id) && StringUtils.isBlank(student_group_id)) {

			// --------1.准确匹配模式---------

		} else {
			// --------2.模糊匹配模式---------
			// 添加关键字模糊查找条件
			if (!StringUtils.isBlank(keyword)) {
				String kwss = keyword;
			}
			// 添加id使用in语句筛选
			if (!StringUtils.isBlank(student_id)) {
				queryWrapper.inSql(Link_student2group.STUDENT_ID, student_id);
			}
			if (!StringUtils.isBlank(student_group_id)) {
				queryWrapper.inSql(Link_student2group.STUDENT_GROUP_ID, student_group_id);
			}
			// --------2.模糊匹配模式---------
		}
		for (KeyAndValue od : ordlist) {
			if (od.getValue().equals("desc")) {
				queryWrapper.orderByDesc((String) od.getKey());
			} else {
				queryWrapper.orderByAsc((String) od.getKey());
			}
		}
		list = svclink_student2group.page(page, queryWrapper).getRecords();
		// 清理数据,标注关键字，范围：所有字符型
		for (int i = 0; i < list.size(); i++) {
			// 如果头像为空，加载默认头像
			// if (StringUtils.isBlank(list.get(i).getWechat_headimgurl())
			// || list.get(i).getWechat_headimgurl().equals("0")) {
			// list.get(i).setWechat_headimgurl(Common.userheadimgurl);
			// }
			// 标注关键字，范围：所有字符型
			if (!StringUtils.isBlank(keyword)) {
				// 避免空值出现错误
				try {

				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		}

		Pager<Link_student2group> pager = new Pager<>(page);
		PagerList<Link_student2group> pagerList = new PagerList<>(pager, list);

		return pagerList;
	}

	/***
	 * 保持新的实体，返回是否成功
	 * 
	 * @param it 实体
	 * @return 是否成功
	 */
	public Boolean saveLink_student2group(Link_student2group it) {

		logger.debug(this.getClass().getName() + ".saveLink_student2group()");
		return svclink_student2group.save(it);
	}

	/***
	 * 按id删除，返回是否成功
	 * 
	 * @param id
	 * @return 是否成功
	 */
	public Boolean removeLink_student2groupById(Serializable id) {

		logger.debug(this.getClass().getName() + ".removeLink_student2groupById()");
		return svclink_student2group.removeById(id);
	}

	/***
	 * 按id修改实体，返回布尔值，是否成功
	 * 
	 * @param it 实体
	 * @return 是否成功
	 */
	public Boolean updateLink_student2groupById(Integer student_id, Integer student_group_id, Long update_gmt,
			Integer id) {

		logger.debug(this.getClass().getName() + ".updateLink_student2groupById()");
		UpdateWrapper<Link_student2group> uwr = new UpdateWrapper<>();
		uwr.set(Link_student2group.STUDENT_ID, student_id);
		uwr.set(Link_student2group.STUDENT_GROUP_ID, student_group_id);
		uwr.set(Link_student2group.UPDATE_GMT, update_gmt);

		uwr.eq(Link_student2group.ID, id);
		return svclink_student2group.update(uwr);
	}

	/***
	 * 按id修改实体，返回是否成功
	 * 
	 * @param it 实体
	 * @return 是否成功
	 */
	public Boolean updateLink_student2groupById(Link_student2group it) {

		logger.debug(this.getClass().getName() + ".updateLink_student2groupById()");
		return svclink_student2group.updateById(it);
	}

	/***
	 * 统计当前表的数量
	 * 
	 * @return
	 */
	public Integer countLink_student2group() {
		return svclink_student2group.count();
	}

	/***
	 * 统计当前表的数量
	 * 
	 * @return
	 */
	public Integer countLink_student2group(QueryWrapper<Link_student2group> queryWrapper) {
		return svclink_student2group.count(queryWrapper);
	}

	/***
	 * 按自定义查询统计,返回map
	 * 
	 * @return
	 */
	public Map<String, Integer> statLink_student2groupGroupbyId() {
		List<Map<String, Object>> list = svclink_student2group.listMaps(new QueryWrapper<Link_student2group>()
				.select(Link_student2group.ID, "count(*)").eq(Link_student2group.STUDENT_ID, 0)
				.groupBy(Link_student2group.ID).orderByAsc(Link_student2group.ID));
		return Util.listmapToMap(list, Link_student2group.ID, "count(*)");
	}

	/***
	 * 按自定义查询统计,返回map
	 * 
	 * @return
	 */
	public Map<String, Integer> statLink_student2groupGroupbyStudent_id() {

		return svclink_student2group.statMapByFieldname(Link_student2group.STUDENT_ID);
	}

	// TODO:--------------manageLink_student2group-end----------------
	// TODO:--------------manageLink_user_role-begin----------------
	/***
	 * 统计Link_user_role中，指定字段的最大值列表
	 * 
	 * @param fieldname 需要统计的字段
	 * @return Link_user_role表，指定字段中的最大值
	 */
	public Integer maxLink_user_role(String fieldname) {

		int rtv = 0;
		try {
			rtv = svclink_user_role.max(fieldname);
		} catch (Exception e) {
		}
		return rtv;
	}

	/***
	 * 查询全部，返回一个map，用于数量较少时的映射
	 * 
	 * @return
	 */
	public Map<Integer, String> mapLink_user_role() {
		List<Link_user_role> list = svclink_user_role.list();
		Map<Integer, String> map = new HashMap<Integer, String>();
		for (int i = 0; i < list.size(); i++) {
			// map.put(list.get(i).getId(), list.get(i).getName());
		}
		return map;
	}

	public Map<Integer, String> mapLink_user_role(Map<String, Object> params) {
		List<Link_user_role> list = listLink_user_roleByMap(params);
		Map<Integer, String> map = new HashMap<Integer, String>();
		for (int i = 0; i < list.size(); i++) {
			// map.put(list.get(i).getId(), list.get(i).getName());
		}
		return map;
	}

	/***
	 * 查询，返回Link_user_role列表
	 * 
	 * @return Link_user_role列表
	 */
	public List<Link_user_role> listLink_user_role() {

		Map<String, Object> params = new HashMap<String, Object>();
		return (List<Link_user_role>) svclink_user_role.listByMap(params);
	}

	/***
	 * 查询，返回Link_user_role列表
	 * 
	 * @param params 查询条件
	 * @return Link_user_role列表
	 */
	public List<Link_user_role> listLink_user_roleByMap(Map<String, Object> params) {

		logger.debug(this.getClass().getName() + ".listLink_user_roleByMap()");
		return (List<Link_user_role>) svclink_user_role.listByMap(params);
	}

	/***
	 * 查询，返回Link_user_role列表
	 * 
	 * @param params  查询条件（可以多个）
	 * @param ordlist 排序条件（可以多个）
	 * @return Link_user_role列表
	 */
	public List<Link_user_role> listLink_user_roleByMap(Map<String, Object> params, List<KeyAndValue> ordlist) {

		logger.debug(this.getClass().getName() + ".listLink_user_roleByMap()");
		// Map<String, Object> params = new HashMap<String, Object>();
		// params.put(Link_user_role.ID, 0);
		// List<KeyAndValue> ordlist = new ArrayList<KeyAndValue>();
		// ordlist.add(new KeyAndValue(Link_user_role.ID, "desc"));
		QueryWrapper<Link_user_role> queryWrapper = new QueryWrapper<>();
		if (params.size() > 0) {
			queryWrapper.allEq(params);
		}
		for (KeyAndValue od : ordlist) {
			if (od.getValue().equals("desc")) {
				queryWrapper.orderByDesc((String) od.getKey());
			} else {
				queryWrapper.orderByAsc((String) od.getKey());
			}
		}
		return svclink_user_role.list(queryWrapper);
	}

	/***
	 * 按id查询，返回Link_user_role
	 * 
	 * @param id
	 * @return Link_user_role
	 */
	public Link_user_role getLink_user_roleById(Serializable id) {

		logger.debug(this.getClass().getName() + ".getLink_user_roleById()");
		return svclink_user_role.getById(id);
	}

	/***
	 * 通过唯一值(数字)查找记录，返回Link_user_role
	 * 
	 * @param infoid
	 * @return Link_user_role
	 */
	public Link_user_role getLink_user_roleByUser_id(Serializable user_id) {

		logger.debug(this.getClass().getName() + ".getLink_user_roleByUser_id()");
		return svclink_user_role
				.getOne(new QueryWrapper<Link_user_role>().eq(Link_user_role.USER_ID, user_id).last("limit 1"));
	}

	/***
	 * 通过Map(多个条件)，查询返回Link_user_role
	 * 
	 * @param params 多个条件
	 * @return Link_user_role
	 */
	public Link_user_role getLink_user_roleByMap(Map<String, Object> params) {

		logger.debug(this.getClass().getName() + ".getLink_user_roleByMap()");
		// Map<String, Object> params = new HashMap<String, Object>();
		// params.put(Link_user_role.ID, 0);
		return svclink_user_role.getOne(new QueryWrapper<Link_user_role>().allEq(params).last("limit 1"));
	}

	/***
	 * 查询，返回Link_user_role列表
	 * 
	 * @param columnname 排序字段
	 * @return Link_user_role列表
	 */
	public List<Link_user_role> listLink_user_roleOrderByAsc(String columnname) {

		logger.debug(this.getClass().getName() + ".listLink_user_roleOrderByAsc()");
		return svclink_user_role.list(new QueryWrapper<Link_user_role>().orderByAsc(columnname));
	}

	/***
	 * 查询，返回Link_user_role列表
	 * 
	 * @param columnname 排序字段
	 * @return Link_user_role列表
	 */
	public List<Link_user_role> listLink_user_roleOrderByDesc(String columnname) {

		logger.debug(this.getClass().getName() + ".listLink_user_roleOrderByDesc()");
		return svclink_user_role.list(new QueryWrapper<Link_user_role>().orderByDesc(columnname));
	}

	/***
	 * 查询，返回Link_user_role列表
	 * 
	 * @param columnname 排序字段
	 * @return Link_user_role列表
	 */
	public List<Link_user_role> listLink_user_roleByMapAsc(Map<String, Object> params, String columnname) {

		logger.debug(this.getClass().getName() + ".listLink_user_roleByMapAsc()");
		return svclink_user_role.list(new QueryWrapper<Link_user_role>().allEq(params).orderByAsc(columnname));
	}

	/***
	 * 查询，返回Link_user_role列表
	 * 
	 * @param columnname 排序字段
	 * @return Link_user_role列表
	 */
	public List<Link_user_role> listLink_user_roleByMapDesc(Map<String, Object> params, String columnname) {

		logger.debug(this.getClass().getName() + ".listLink_user_roleByMapDesc()");
		return svclink_user_role.list(new QueryWrapper<Link_user_role>().allEq(params).orderByDesc(columnname));
	}

	/***
	 * 
	 * @param pagenumber 页码
	 * @param pagesize   页面显示数量
	 * @return
	 */
	public PagerList<Link_user_role> pagerListLink_user_role(Integer pagenumber, Integer pagesize) {

		return pagerListLink_user_role(pagenumber, pagesize, "", new HashMap<String, String>());
	}

	/***
	 * 
	 * @param pagenumber 页码
	 * @param pagesize   页面显示数量
	 * @param keyword    关键字
	 * @return
	 */
	public PagerList<Link_user_role> pagerListLink_user_role(Integer pagenumber, Integer pagesize, String keyword) {

		return pagerListLink_user_role(pagenumber, pagesize, keyword, new HashMap<String, String>());
	}

	/***
	 * 
	 * @param pagenumber 页码
	 * @param pagesize   页面显示数量
	 * @param keyword    关键字
	 * @param sqlin      用in子句包括的id值
	 * @return
	 */
	public PagerList<Link_user_role> pagerListLink_user_role(Integer pagenumber, Integer pagesize, String keyword,
			Map<String, String> sqlin) {
		return pagerListLink_user_role(pagenumber, pagesize, keyword, sqlin, new HashMap<String, Object>());
	}

	/***
	 * 
	 * @param pagenumber 页码
	 * @param pagesize   页面显示数量
	 * @param keyword    关键字
	 * @param sqlin      用in子句包括的id值
	 * @param params     筛选条件
	 * @return
	 */
	public PagerList<Link_user_role> pagerListLink_user_role(Integer pagenumber, Integer pagesize, String keyword,
			Map<String, String> sqlin, Map<String, Object> params) {
		List<KeyAndValue> ordlist = new ArrayList<KeyAndValue>();
		ordlist.add(new KeyAndValue(Link_user_role.ID, "desc"));
		return pagerListLink_user_role(pagenumber, pagesize, keyword, sqlin, params, ordlist);
	}

	/***
	 * 
	 * @param pagenumber 页码
	 * @param pagesize   页面显示数量
	 * @param keyword    关键字
	 * @param sqlin      用in子句包括的id值
	 * @return
	 */
	public PagerList<Link_user_role> pagerListLink_user_role(Integer pagenumber, Integer pagesize, String keyword,
			Map<String, String> sqlin, Map<String, Object> params, List<KeyAndValue> ordlist) {

		Page<Link_user_role> page = new Page<>(pagenumber, pagesize);
		List<Link_user_role> list = null;

		QueryWrapper<Link_user_role> queryWrapper = new QueryWrapper<>();
		// 读取url中是否包含筛选条件
		String user_id = sqlin.get(Link_user_role.USER_ID + "_id");
		String role_id = sqlin.get(Link_user_role.ROLE_ID + "_id");

		if (params.size() > 0) {
			queryWrapper.allEq(params);
		}
		if (StringUtils.isBlank(keyword) && StringUtils.isBlank(user_id) && StringUtils.isBlank(role_id)) {

			// --------1.准确匹配模式---------

		} else {
			// --------2.模糊匹配模式---------
			// 添加关键字模糊查找条件
			if (!StringUtils.isBlank(keyword)) {
				String kwss = keyword;
			}
			// 添加id使用in语句筛选
			if (!StringUtils.isBlank(user_id)) {
				queryWrapper.inSql(Link_user_role.USER_ID, user_id);
			}
			if (!StringUtils.isBlank(role_id)) {
				queryWrapper.inSql(Link_user_role.ROLE_ID, role_id);
			}
			// --------2.模糊匹配模式---------
		}
		for (KeyAndValue od : ordlist) {
			if (od.getValue().equals("desc")) {
				queryWrapper.orderByDesc((String) od.getKey());
			} else {
				queryWrapper.orderByAsc((String) od.getKey());
			}
		}
		list = svclink_user_role.page(page, queryWrapper).getRecords();
		// 清理数据,标注关键字，范围：所有字符型
		for (int i = 0; i < list.size(); i++) {
			// 如果头像为空，加载默认头像
			// if (StringUtils.isBlank(list.get(i).getWechat_headimgurl())
			// || list.get(i).getWechat_headimgurl().equals("0")) {
			// list.get(i).setWechat_headimgurl(Common.userheadimgurl);
			// }
			// 标注关键字，范围：所有字符型
			if (!StringUtils.isBlank(keyword)) {
				// 避免空值出现错误
				try {

				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		}

		Pager<Link_user_role> pager = new Pager<>(page);
		PagerList<Link_user_role> pagerList = new PagerList<>(pager, list);

		return pagerList;
	}

	/***
	 * 保持新的实体，返回是否成功
	 * 
	 * @param it 实体
	 * @return 是否成功
	 */
	public Boolean saveLink_user_role(Link_user_role it) {

		logger.debug(this.getClass().getName() + ".saveLink_user_role()");
		return svclink_user_role.save(it);
	}

	/***
	 * 按id删除，返回是否成功
	 * 
	 * @param id
	 * @return 是否成功
	 */
	public Boolean removeLink_user_roleById(Serializable id) {

		logger.debug(this.getClass().getName() + ".removeLink_user_roleById()");
		return svclink_user_role.removeById(id);
	}

	/***
	 * 按id修改实体，返回布尔值，是否成功
	 * 
	 * @param it 实体
	 * @return 是否成功
	 */
	public Boolean updateLink_user_roleById(Integer user_id, Integer role_id, Integer update_userid, Long update_gmt,
			Integer id) {

		logger.debug(this.getClass().getName() + ".updateLink_user_roleById()");
		UpdateWrapper<Link_user_role> uwr = new UpdateWrapper<>();
		uwr.set(Link_user_role.USER_ID, user_id);
		uwr.set(Link_user_role.ROLE_ID, role_id);
		uwr.set(Link_user_role.UPDATE_USERID, update_userid);
		uwr.set(Link_user_role.UPDATE_GMT, update_gmt);

		uwr.eq(Link_user_role.ID, id);
		return svclink_user_role.update(uwr);
	}

	/***
	 * 按id修改实体，返回是否成功
	 * 
	 * @param it 实体
	 * @return 是否成功
	 */
	public Boolean updateLink_user_roleById(Link_user_role it) {

		logger.debug(this.getClass().getName() + ".updateLink_user_roleById()");
		return svclink_user_role.updateById(it);
	}

	/***
	 * 统计当前表的数量
	 * 
	 * @return
	 */
	public Integer countLink_user_role() {
		return svclink_user_role.count();
	}

	/***
	 * 统计当前表的数量
	 * 
	 * @return
	 */
	public Integer countLink_user_role(QueryWrapper<Link_user_role> queryWrapper) {
		return svclink_user_role.count(queryWrapper);
	}

	/***
	 * 按自定义查询统计,返回map
	 * 
	 * @return
	 */
	public Map<String, Integer> statLink_user_roleGroupbyId() {
		List<Map<String, Object>> list = svclink_user_role
				.listMaps(new QueryWrapper<Link_user_role>().select(Link_user_role.ID, "count(*)")
						.eq(Link_user_role.USER_ID, 0).groupBy(Link_user_role.ID).orderByAsc(Link_user_role.ID));
		return Util.listmapToMap(list, Link_user_role.ID, "count(*)");
	}

	/***
	 * 按自定义查询统计,返回map
	 * 
	 * @return
	 */
	public Map<String, Integer> statLink_user_roleGroupbyUser_id() {

		return svclink_user_role.statMapByFieldname(Link_user_role.USER_ID);
	}

	// TODO:--------------manageLink_user_role-end----------------
	// TODO:--------------manageMessage-begin----------------
	/***
	 * 统计Message中，指定字段的最大值列表
	 * 
	 * @param fieldname 需要统计的字段
	 * @return Message表，指定字段中的最大值
	 */
	public Integer maxMessage(String fieldname) {

		int rtv = 0;
		try {
			rtv = svcmessage.max(fieldname);
		} catch (Exception e) {
		}
		return rtv;
	}

	/***
	 * 查询全部，返回一个map，用于数量较少时的映射
	 * 
	 * @return
	 */
	public Map<Integer, String> mapMessage() {
		List<Message> list = svcmessage.list();
		Map<Integer, String> map = new HashMap<Integer, String>();
		for (int i = 0; i < list.size(); i++) {
			map.put(list.get(i).getId(), list.get(i).getFrom());
		}
		return map;
	}

	public Map<Integer, String> mapMessage(Map<String, Object> params) {
		List<Message> list = listMessageByMap(params);
		Map<Integer, String> map = new HashMap<Integer, String>();
		for (int i = 0; i < list.size(); i++) {
			map.put(list.get(i).getId(), list.get(i).getFrom());
		}
		return map;
	}

	/***
	 * 查询，返回Message列表
	 * 
	 * @return Message列表
	 */
	public List<Message> listMessage() {

		Map<String, Object> params = new HashMap<String, Object>();
		return (List<Message>) svcmessage.listByMap(params);
	}

	/***
	 * 查询，返回Message列表
	 * 
	 * @param params 查询条件
	 * @return Message列表
	 */
	public List<Message> listMessageByMap(Map<String, Object> params) {

		logger.debug(this.getClass().getName() + ".listMessageByMap()");
		return (List<Message>) svcmessage.listByMap(params);
	}

	/***
	 * 查询，返回Message列表
	 * 
	 * @param params  查询条件（可以多个）
	 * @param ordlist 排序条件（可以多个）
	 * @return Message列表
	 */
	public List<Message> listMessageByMap(Map<String, Object> params, List<KeyAndValue> ordlist) {

		logger.debug(this.getClass().getName() + ".listMessageByMap()");
		// Map<String, Object> params = new HashMap<String, Object>();
		// params.put(Message.ID, 0);
		// List<KeyAndValue> ordlist = new ArrayList<KeyAndValue>();
		// ordlist.add(new KeyAndValue(Message.ID, "desc"));
		QueryWrapper<Message> queryWrapper = new QueryWrapper<>();
		if (params.size() > 0) {
			queryWrapper.allEq(params);
		}
		for (KeyAndValue od : ordlist) {
			if (od.getValue().equals("desc")) {
				queryWrapper.orderByDesc((String) od.getKey());
			} else {
				queryWrapper.orderByAsc((String) od.getKey());
			}
		}
		return svcmessage.list(queryWrapper);
	}

	/***
	 * 按id查询，返回Message
	 * 
	 * @param id
	 * @return Message
	 */
	public Message getMessageById(Serializable id) {

		logger.debug(this.getClass().getName() + ".getMessageById()");
		return svcmessage.getById(id);
	}

	/***
	 * 通过唯一值(数字)查找记录，返回Message
	 * 
	 * @param infoid
	 * @return Message
	 */
	public Message getMessageByFrom(Serializable from) {

		logger.debug(this.getClass().getName() + ".getMessageByFrom()");
		return svcmessage.getOne(new QueryWrapper<Message>().eq(Message.FROM, from).last("limit 1"));
	}

	/***
	 * 通过Map(多个条件)，查询返回Message
	 * 
	 * @param params 多个条件
	 * @return Message
	 */
	public Message getMessageByMap(Map<String, Object> params) {

		logger.debug(this.getClass().getName() + ".getMessageByMap()");
		// Map<String, Object> params = new HashMap<String, Object>();
		// params.put(Message.ID, 0);
		return svcmessage.getOne(new QueryWrapper<Message>().allEq(params).last("limit 1"));
	}

	/***
	 * 查询，返回Message列表
	 * 
	 * @param columnname 排序字段
	 * @return Message列表
	 */
	public List<Message> listMessageOrderByAsc(String columnname) {

		logger.debug(this.getClass().getName() + ".listMessageOrderByAsc()");
		return svcmessage.list(new QueryWrapper<Message>().orderByAsc(columnname));
	}

	/***
	 * 查询，返回Message列表
	 * 
	 * @param columnname 排序字段
	 * @return Message列表
	 */
	public List<Message> listMessageOrderByDesc(String columnname) {

		logger.debug(this.getClass().getName() + ".listMessageOrderByDesc()");
		return svcmessage.list(new QueryWrapper<Message>().orderByDesc(columnname));
	}

	/***
	 * 查询，返回Message列表
	 * 
	 * @param columnname 排序字段
	 * @return Message列表
	 */
	public List<Message> listMessageByMapAsc(Map<String, Object> params, String columnname) {

		logger.debug(this.getClass().getName() + ".listMessageByMapAsc()");
		return svcmessage.list(new QueryWrapper<Message>().allEq(params).orderByAsc(columnname));
	}

	/***
	 * 查询，返回Message列表
	 * 
	 * @param columnname 排序字段
	 * @return Message列表
	 */
	public List<Message> listMessageByMapDesc(Map<String, Object> params, String columnname) {

		logger.debug(this.getClass().getName() + ".listMessageByMapDesc()");
		return svcmessage.list(new QueryWrapper<Message>().allEq(params).orderByDesc(columnname));
	}

	/***
	 * 
	 * @param pagenumber 页码
	 * @param pagesize   页面显示数量
	 * @return
	 */
	public PagerList<Message> pagerListMessage(Integer pagenumber, Integer pagesize) {

		return pagerListMessage(pagenumber, pagesize, "", new HashMap<String, String>());
	}

	/***
	 * 
	 * @param pagenumber 页码
	 * @param pagesize   页面显示数量
	 * @param keyword    关键字
	 * @return
	 */
	public PagerList<Message> pagerListMessage(Integer pagenumber, Integer pagesize, String keyword) {

		return pagerListMessage(pagenumber, pagesize, keyword, new HashMap<String, String>());
	}

	/***
	 * 
	 * @param pagenumber 页码
	 * @param pagesize   页面显示数量
	 * @param keyword    关键字
	 * @param sqlin      用in子句包括的id值
	 * @return
	 */
	public PagerList<Message> pagerListMessage(Integer pagenumber, Integer pagesize, String keyword,
			Map<String, String> sqlin) {
		return pagerListMessage(pagenumber, pagesize, keyword, sqlin, new HashMap<String, Object>());
	}

	/***
	 * 
	 * @param pagenumber 页码
	 * @param pagesize   页面显示数量
	 * @param keyword    关键字
	 * @param sqlin      用in子句包括的id值
	 * @param params     筛选条件
	 * @return
	 */
	public PagerList<Message> pagerListMessage(Integer pagenumber, Integer pagesize, String keyword,
			Map<String, String> sqlin, Map<String, Object> params) {
		List<KeyAndValue> ordlist = new ArrayList<KeyAndValue>();
		ordlist.add(new KeyAndValue(Message.ID, "desc"));
		return pagerListMessage(pagenumber, pagesize, keyword, sqlin, params, ordlist);
	}

	/***
	 * 
	 * @param pagenumber 页码
	 * @param pagesize   页面显示数量
	 * @param keyword    关键字
	 * @param sqlin      用in子句包括的id值
	 * @return
	 */
	public PagerList<Message> pagerListMessage(Integer pagenumber, Integer pagesize, String keyword,
			Map<String, String> sqlin, Map<String, Object> params, List<KeyAndValue> ordlist) {

		Page<Message> page = new Page<>(pagenumber, pagesize);
		List<Message> list = null;

		QueryWrapper<Message> queryWrapper = new QueryWrapper<>();
		// 读取url中是否包含筛选条件

		if (params.size() > 0) {
			queryWrapper.allEq(params);
		}
		if (StringUtils.isBlank(keyword)) {

			// --------1.准确匹配模式---------

		} else {
			// --------2.模糊匹配模式---------
			// 添加关键字模糊查找条件
			if (!StringUtils.isBlank(keyword)) {
				String kwss = keyword;
				queryWrapper.and(wr -> wr.like(Message.FROM, kwss).or().like(Message.TO, kwss).or()
						.like(Message.USERNAME, kwss).or().like(Message.EMAIL, kwss).or().like(Message.MSG, kwss));
			}
			// 添加id使用in语句筛选
			// --------2.模糊匹配模式---------
		}
		for (KeyAndValue od : ordlist) {
			if (od.getValue().equals("desc")) {
				queryWrapper.orderByDesc((String) od.getKey());
			} else {
				queryWrapper.orderByAsc((String) od.getKey());
			}
		}
		list = svcmessage.page(page, queryWrapper).getRecords();
		// 清理数据,标注关键字，范围：所有字符型
		for (int i = 0; i < list.size(); i++) {
			// 如果头像为空，加载默认头像
			// if (StringUtils.isBlank(list.get(i).getWechat_headimgurl())
			// || list.get(i).getWechat_headimgurl().equals("0")) {
			// list.get(i).setWechat_headimgurl(Common.userheadimgurl);
			// }
			// 标注关键字，范围：所有字符型
			if (!StringUtils.isBlank(keyword)) {
				// 避免空值出现错误
				try {

					list.get(i).setFrom((list.get(i).getFrom().replace(keyword, Common.getKeywordSpan(keyword))));
					list.get(i).setTo((list.get(i).getTo().replace(keyword, Common.getKeywordSpan(keyword))));
					list.get(i)
							.setUsername((list.get(i).getUsername().replace(keyword, Common.getKeywordSpan(keyword))));
					list.get(i).setEmail((list.get(i).getEmail().replace(keyword, Common.getKeywordSpan(keyword))));
					list.get(i).setMsg((list.get(i).getMsg().replace(keyword, Common.getKeywordSpan(keyword))));
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		}

		Pager<Message> pager = new Pager<>(page);
		PagerList<Message> pagerList = new PagerList<>(pager, list);

		return pagerList;
	}

	/***
	 * 保持新的实体，返回是否成功
	 * 
	 * @param it 实体
	 * @return 是否成功
	 */
	public Boolean saveMessage(Message it) {

		logger.debug(this.getClass().getName() + ".saveMessage()");
		return svcmessage.save(it);
	}

	/***
	 * 按id删除，返回是否成功
	 * 
	 * @param id
	 * @return 是否成功
	 */
	public Boolean removeMessageById(Serializable id) {

		logger.debug(this.getClass().getName() + ".removeMessageById()");
		return svcmessage.removeById(id);
	}

	/***
	 * 按id修改实体，返回布尔值，是否成功
	 * 
	 * @param it 实体
	 * @return 是否成功
	 */
	public Boolean updateMessageById(String from, String to, String username, String email, String msg, Long update_gmt,
			Integer id) {

		logger.debug(this.getClass().getName() + ".updateMessageById()");
		UpdateWrapper<Message> uwr = new UpdateWrapper<>();
		uwr.set(Message.FROM, from);
		uwr.set(Message.TO, to);
		uwr.set(Message.USERNAME, username);
		uwr.set(Message.EMAIL, email);
		uwr.set(Message.MSG, msg);
		uwr.set(Message.UPDATE_GMT, update_gmt);

		uwr.eq(Message.ID, id);
		return svcmessage.update(uwr);
	}

	/***
	 * 按id修改实体，返回是否成功
	 * 
	 * @param it 实体
	 * @return 是否成功
	 */
	public Boolean updateMessageById(Message it) {

		logger.debug(this.getClass().getName() + ".updateMessageById()");
		return svcmessage.updateById(it);
	}

	/***
	 * 统计当前表的数量
	 * 
	 * @return
	 */
	public Integer countMessage() {
		return svcmessage.count();
	}

	/***
	 * 统计当前表的数量
	 * 
	 * @return
	 */
	public Integer countMessage(QueryWrapper<Message> queryWrapper) {
		return svcmessage.count(queryWrapper);
	}

	/***
	 * 按自定义查询统计,返回map
	 * 
	 * @return
	 */
	public Map<String, Integer> statMessageGroupbyId() {
		List<Map<String, Object>> list = svcmessage.listMaps(new QueryWrapper<Message>()
				.select(Message.FROM, "count(*)").eq(Message.FROM, 0).groupBy(Message.ID).orderByAsc(Message.ID));
		return Util.listmapToMap(list, Message.FROM, "count(*)");
	}

	/***
	 * 按自定义查询统计,返回map
	 * 
	 * @return
	 */
	public Map<String, Integer> statMessageGroupbyFrom() {

		return svcmessage.statMapByFieldname(Message.FROM);
	}

	// TODO:--------------manageMessage-end----------------
	// TODO:--------------managePermit-begin----------------
	/***
	 * 统计Permit中，指定字段的最大值列表
	 * 
	 * @param fieldname 需要统计的字段
	 * @return Permit表，指定字段中的最大值
	 */
	public Integer maxPermit(String fieldname) {

		int rtv = 0;
		try {
			rtv = svcpermit.max(fieldname);
		} catch (Exception e) {
		}
		return rtv;
	}

	/***
	 * 查询全部，返回一个map，用于数量较少时的映射
	 * 
	 * @return
	 */
	public Map<Integer, String> mapPermit() {
		List<Permit> list = svcpermit.list();
		Map<Integer, String> map = new HashMap<Integer, String>();
		for (int i = 0; i < list.size(); i++) {
			map.put(list.get(i).getId(), list.get(i).getTarget());
		}
		return map;
	}

	public Map<Integer, String> mapPermit(Map<String, Object> params) {
		List<Permit> list = listPermitByMap(params);
		Map<Integer, String> map = new HashMap<Integer, String>();
		for (int i = 0; i < list.size(); i++) {
			map.put(list.get(i).getId(), list.get(i).getTarget());
		}
		return map;
	}

	/***
	 * 查询，返回Permit列表
	 * 
	 * @return Permit列表
	 */
	public List<Permit> listPermit() {

		Map<String, Object> params = new HashMap<String, Object>();
		return (List<Permit>) svcpermit.listByMap(params);
	}

	/***
	 * 查询，返回Permit列表
	 * 
	 * @param params 查询条件
	 * @return Permit列表
	 */
	public List<Permit> listPermitByMap(Map<String, Object> params) {

		logger.debug(this.getClass().getName() + ".listPermitByMap()");
		return (List<Permit>) svcpermit.listByMap(params);
	}

	/***
	 * 查询，返回Permit列表
	 * 
	 * @param params  查询条件（可以多个）
	 * @param ordlist 排序条件（可以多个）
	 * @return Permit列表
	 */
	public List<Permit> listPermitByMap(Map<String, Object> params, List<KeyAndValue> ordlist) {

		logger.debug(this.getClass().getName() + ".listPermitByMap()");
		// Map<String, Object> params = new HashMap<String, Object>();
		// params.put(Permit.ID, 0);
		// List<KeyAndValue> ordlist = new ArrayList<KeyAndValue>();
		// ordlist.add(new KeyAndValue(Permit.ID, "desc"));
		QueryWrapper<Permit> queryWrapper = new QueryWrapper<>();
		if (params.size() > 0) {
			queryWrapper.allEq(params);
		}
		for (KeyAndValue od : ordlist) {
			if (od.getValue().equals("desc")) {
				queryWrapper.orderByDesc((String) od.getKey());
			} else {
				queryWrapper.orderByAsc((String) od.getKey());
			}
		}
		return svcpermit.list(queryWrapper);
	}

	/***
	 * 按id查询，返回Permit
	 * 
	 * @param id
	 * @return Permit
	 */
	public Permit getPermitById(Serializable id) {

		logger.debug(this.getClass().getName() + ".getPermitById()");
		return svcpermit.getById(id);
	}

	/***
	 * 通过唯一值(数字)查找记录，返回Permit
	 * 
	 * @param infoid
	 * @return Permit
	 */
	public Permit getPermitByCreate_userid(Serializable create_userid) {

		logger.debug(this.getClass().getName() + ".getPermitByCreate_userid()");
		return svcpermit.getOne(new QueryWrapper<Permit>().eq(Permit.CREATE_USERID, create_userid).last("limit 1"));
	}

	/***
	 * 通过Map(多个条件)，查询返回Permit
	 * 
	 * @param params 多个条件
	 * @return Permit
	 */
	public Permit getPermitByMap(Map<String, Object> params) {

		logger.debug(this.getClass().getName() + ".getPermitByMap()");
		// Map<String, Object> params = new HashMap<String, Object>();
		// params.put(Permit.ID, 0);
		return svcpermit.getOne(new QueryWrapper<Permit>().allEq(params).last("limit 1"));
	}

	/***
	 * 查询，返回Permit列表
	 * 
	 * @param columnname 排序字段
	 * @return Permit列表
	 */
	public List<Permit> listPermitOrderByAsc(String columnname) {

		logger.debug(this.getClass().getName() + ".listPermitOrderByAsc()");
		return svcpermit.list(new QueryWrapper<Permit>().orderByAsc(columnname));
	}

	/***
	 * 查询，返回Permit列表
	 * 
	 * @param columnname 排序字段
	 * @return Permit列表
	 */
	public List<Permit> listPermitOrderByDesc(String columnname) {

		logger.debug(this.getClass().getName() + ".listPermitOrderByDesc()");
		return svcpermit.list(new QueryWrapper<Permit>().orderByDesc(columnname));
	}

	/***
	 * 查询，返回Permit列表
	 * 
	 * @param columnname 排序字段
	 * @return Permit列表
	 */
	public List<Permit> listPermitByMapAsc(Map<String, Object> params, String columnname) {

		logger.debug(this.getClass().getName() + ".listPermitByMapAsc()");
		return svcpermit.list(new QueryWrapper<Permit>().allEq(params).orderByAsc(columnname));
	}

	/***
	 * 查询，返回Permit列表
	 * 
	 * @param columnname 排序字段
	 * @return Permit列表
	 */
	public List<Permit> listPermitByMapDesc(Map<String, Object> params, String columnname) {

		logger.debug(this.getClass().getName() + ".listPermitByMapDesc()");
		return svcpermit.list(new QueryWrapper<Permit>().allEq(params).orderByDesc(columnname));
	}

	/***
	 * 
	 * @param pagenumber 页码
	 * @param pagesize   页面显示数量
	 * @return
	 */
	public PagerList<Permit> pagerListPermit(Integer pagenumber, Integer pagesize) {

		return pagerListPermit(pagenumber, pagesize, "", new HashMap<String, String>());
	}

	/***
	 * 
	 * @param pagenumber 页码
	 * @param pagesize   页面显示数量
	 * @param keyword    关键字
	 * @return
	 */
	public PagerList<Permit> pagerListPermit(Integer pagenumber, Integer pagesize, String keyword) {

		return pagerListPermit(pagenumber, pagesize, keyword, new HashMap<String, String>());
	}

	/***
	 * 
	 * @param pagenumber 页码
	 * @param pagesize   页面显示数量
	 * @param keyword    关键字
	 * @param sqlin      用in子句包括的id值
	 * @return
	 */
	public PagerList<Permit> pagerListPermit(Integer pagenumber, Integer pagesize, String keyword,
			Map<String, String> sqlin) {
		return pagerListPermit(pagenumber, pagesize, keyword, sqlin, new HashMap<String, Object>());
	}

	/***
	 * 
	 * @param pagenumber 页码
	 * @param pagesize   页面显示数量
	 * @param keyword    关键字
	 * @param sqlin      用in子句包括的id值
	 * @param params     筛选条件
	 * @return
	 */
	public PagerList<Permit> pagerListPermit(Integer pagenumber, Integer pagesize, String keyword,
			Map<String, String> sqlin, Map<String, Object> params) {
		List<KeyAndValue> ordlist = new ArrayList<KeyAndValue>();
		ordlist.add(new KeyAndValue(Permit.ID, "desc"));
		return pagerListPermit(pagenumber, pagesize, keyword, sqlin, params, ordlist);
	}

	/***
	 * 
	 * @param pagenumber 页码
	 * @param pagesize   页面显示数量
	 * @param keyword    关键字
	 * @param sqlin      用in子句包括的id值
	 * @return
	 */
	public PagerList<Permit> pagerListPermit(Integer pagenumber, Integer pagesize, String keyword,
			Map<String, String> sqlin, Map<String, Object> params, List<KeyAndValue> ordlist) {

		Page<Permit> page = new Page<>(pagenumber, pagesize);
		List<Permit> list = null;

		QueryWrapper<Permit> queryWrapper = new QueryWrapper<>();
		// 读取url中是否包含筛选条件

		if (params.size() > 0) {
			queryWrapper.allEq(params);
		}
		if (StringUtils.isBlank(keyword)) {

			// --------1.准确匹配模式---------

		} else {
			// --------2.模糊匹配模式---------
			// 添加关键字模糊查找条件
			if (!StringUtils.isBlank(keyword)) {
				String kwss = keyword;
				queryWrapper.and(wr -> wr.like(Permit.TARGET, kwss).or().like(Permit.OPERATION, kwss).or()
						.like(Permit.NAME, kwss).or().like(Permit.CODE, kwss));
			}
			// 添加id使用in语句筛选
			// --------2.模糊匹配模式---------
		}
		for (KeyAndValue od : ordlist) {
			if (od.getValue().equals("desc")) {
				queryWrapper.orderByDesc((String) od.getKey());
			} else {
				queryWrapper.orderByAsc((String) od.getKey());
			}
		}
		list = svcpermit.page(page, queryWrapper).getRecords();
		// 清理数据,标注关键字，范围：所有字符型
		for (int i = 0; i < list.size(); i++) {
			// 如果头像为空，加载默认头像
			// if (StringUtils.isBlank(list.get(i).getWechat_headimgurl())
			// || list.get(i).getWechat_headimgurl().equals("0")) {
			// list.get(i).setWechat_headimgurl(Common.userheadimgurl);
			// }
			// 标注关键字，范围：所有字符型
			if (!StringUtils.isBlank(keyword)) {
				// 避免空值出现错误
				try {

					list.get(i).setTarget((list.get(i).getTarget().replace(keyword, Common.getKeywordSpan(keyword))));
					list.get(i).setOperation(
							(list.get(i).getOperation().replace(keyword, Common.getKeywordSpan(keyword))));
					list.get(i).setName((list.get(i).getName().replace(keyword, Common.getKeywordSpan(keyword))));
					list.get(i).setCode((list.get(i).getCode().replace(keyword, Common.getKeywordSpan(keyword))));
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		}

		Pager<Permit> pager = new Pager<>(page);
		PagerList<Permit> pagerList = new PagerList<>(pager, list);

		return pagerList;
	}

	/***
	 * 保持新的实体，返回是否成功
	 * 
	 * @param it 实体
	 * @return 是否成功
	 */
	public Boolean savePermit(Permit it) {

		logger.debug(this.getClass().getName() + ".savePermit()");
		return svcpermit.save(it);
	}

	/***
	 * 按id删除，返回是否成功
	 * 
	 * @param id
	 * @return 是否成功
	 */
	public Boolean removePermitById(Serializable id) {

		logger.debug(this.getClass().getName() + ".removePermitById()");
		return svcpermit.removeById(id);
	}

	/***
	 * 按id修改实体，返回布尔值，是否成功
	 * 
	 * @param it 实体
	 * @return 是否成功
	 */
	public Boolean updatePermitById(String target, String operation, String name, String code, Integer update_userid,
			Long update_gmt, Integer id) {

		logger.debug(this.getClass().getName() + ".updatePermitById()");
		UpdateWrapper<Permit> uwr = new UpdateWrapper<>();
		uwr.set(Permit.TARGET, target);
		uwr.set(Permit.OPERATION, operation);
		uwr.set(Permit.NAME, name);
		uwr.set(Permit.CODE, code);
		uwr.set(Permit.UPDATE_USERID, update_userid);
		uwr.set(Permit.UPDATE_GMT, update_gmt);

		uwr.eq(Permit.ID, id);
		return svcpermit.update(uwr);
	}

	/***
	 * 按id修改实体，返回是否成功
	 * 
	 * @param it 实体
	 * @return 是否成功
	 */
	public Boolean updatePermitById(Permit it) {

		logger.debug(this.getClass().getName() + ".updatePermitById()");
		return svcpermit.updateById(it);
	}

	/***
	 * 统计当前表的数量
	 * 
	 * @return
	 */
	public Integer countPermit() {
		return svcpermit.count();
	}

	/***
	 * 统计当前表的数量
	 * 
	 * @return
	 */
	public Integer countPermit(QueryWrapper<Permit> queryWrapper) {
		return svcpermit.count(queryWrapper);
	}

	/***
	 * 按自定义查询统计,返回map
	 * 
	 * @return
	 */
	public Map<String, Integer> statPermitGroupbyId() {
		List<Map<String, Object>> list = svcpermit.listMaps(new QueryWrapper<Permit>().select(Permit.TARGET, "count(*)")
				.eq(Permit.CREATE_USERID, 0).groupBy(Permit.ID).orderByAsc(Permit.ID));
		return Util.listmapToMap(list, Permit.TARGET, "count(*)");
	}

	/***
	 * 按自定义查询统计,返回map
	 * 
	 * @return
	 */
	public Map<String, Integer> statPermitGroupbyCreate_userid() {

		return svcpermit.statMapByFieldname(Permit.CREATE_USERID);
	}

	// TODO:--------------managePermit-end----------------
	// TODO:--------------manageRole-begin----------------
	/***
	 * 统计Role中，指定字段的最大值列表
	 * 
	 * @param fieldname 需要统计的字段
	 * @return Role表，指定字段中的最大值
	 */
	public Integer maxRole(String fieldname) {

		int rtv = 0;
		try {
			rtv = svcrole.max(fieldname);
		} catch (Exception e) {
		}
		return rtv;
	}

	/***
	 * 查询全部，返回一个map，用于数量较少时的映射
	 * 
	 * @return
	 */
	public Map<Integer, String> mapRole() {
		List<Role> list = svcrole.list();
		Map<Integer, String> map = new HashMap<Integer, String>();
		for (int i = 0; i < list.size(); i++) {
			map.put(list.get(i).getId(), list.get(i).getName());
		}
		return map;
	}

	public Map<Integer, String> mapRole(Map<String, Object> params) {
		List<Role> list = listRoleByMap(params);
		Map<Integer, String> map = new HashMap<Integer, String>();
		for (int i = 0; i < list.size(); i++) {
			map.put(list.get(i).getId(), list.get(i).getName());
		}
		return map;
	}

	/***
	 * 查询，返回Role列表
	 * 
	 * @return Role列表
	 */
	public List<Role> listRole() {

		Map<String, Object> params = new HashMap<String, Object>();
		return (List<Role>) svcrole.listByMap(params);
	}

	/***
	 * 查询，返回Role列表
	 * 
	 * @param params 查询条件
	 * @return Role列表
	 */
	public List<Role> listRoleByMap(Map<String, Object> params) {

		logger.debug(this.getClass().getName() + ".listRoleByMap()");
		return (List<Role>) svcrole.listByMap(params);
	}

	/***
	 * 查询，返回Role列表
	 * 
	 * @param params  查询条件（可以多个）
	 * @param ordlist 排序条件（可以多个）
	 * @return Role列表
	 */
	public List<Role> listRoleByMap(Map<String, Object> params, List<KeyAndValue> ordlist) {

		logger.debug(this.getClass().getName() + ".listRoleByMap()");
		// Map<String, Object> params = new HashMap<String, Object>();
		// params.put(Role.ID, 0);
		// List<KeyAndValue> ordlist = new ArrayList<KeyAndValue>();
		// ordlist.add(new KeyAndValue(Role.ID, "desc"));
		QueryWrapper<Role> queryWrapper = new QueryWrapper<>();
		if (params.size() > 0) {
			queryWrapper.allEq(params);
		}
		for (KeyAndValue od : ordlist) {
			if (od.getValue().equals("desc")) {
				queryWrapper.orderByDesc((String) od.getKey());
			} else {
				queryWrapper.orderByAsc((String) od.getKey());
			}
		}
		return svcrole.list(queryWrapper);
	}

	/***
	 * 按id查询，返回Role
	 * 
	 * @param id
	 * @return Role
	 */
	public Role getRoleById(Serializable id) {

		logger.debug(this.getClass().getName() + ".getRoleById()");
		return svcrole.getById(id);
	}

	/***
	 * 通过唯一值(数字)查找记录，返回Role
	 * 
	 * @param infoid
	 * @return Role
	 */
	public Role getRoleByCreate_userid(Serializable create_userid) {

		logger.debug(this.getClass().getName() + ".getRoleByCreate_userid()");
		return svcrole.getOne(new QueryWrapper<Role>().eq(Role.CREATE_USERID, create_userid).last("limit 1"));
	}

	/***
	 * 通过Map(多个条件)，查询返回Role
	 * 
	 * @param params 多个条件
	 * @return Role
	 */
	public Role getRoleByMap(Map<String, Object> params) {

		logger.debug(this.getClass().getName() + ".getRoleByMap()");
		// Map<String, Object> params = new HashMap<String, Object>();
		// params.put(Role.ID, 0);
		return svcrole.getOne(new QueryWrapper<Role>().allEq(params).last("limit 1"));
	}

	/***
	 * 查询，返回Role列表
	 * 
	 * @param columnname 排序字段
	 * @return Role列表
	 */
	public List<Role> listRoleOrderByAsc(String columnname) {

		logger.debug(this.getClass().getName() + ".listRoleOrderByAsc()");
		return svcrole.list(new QueryWrapper<Role>().orderByAsc(columnname));
	}

	/***
	 * 查询，返回Role列表
	 * 
	 * @param columnname 排序字段
	 * @return Role列表
	 */
	public List<Role> listRoleOrderByDesc(String columnname) {

		logger.debug(this.getClass().getName() + ".listRoleOrderByDesc()");
		return svcrole.list(new QueryWrapper<Role>().orderByDesc(columnname));
	}

	/***
	 * 查询，返回Role列表
	 * 
	 * @param columnname 排序字段
	 * @return Role列表
	 */
	public List<Role> listRoleByMapAsc(Map<String, Object> params, String columnname) {

		logger.debug(this.getClass().getName() + ".listRoleByMapAsc()");
		return svcrole.list(new QueryWrapper<Role>().allEq(params).orderByAsc(columnname));
	}

	/***
	 * 查询，返回Role列表
	 * 
	 * @param columnname 排序字段
	 * @return Role列表
	 */
	public List<Role> listRoleByMapDesc(Map<String, Object> params, String columnname) {

		logger.debug(this.getClass().getName() + ".listRoleByMapDesc()");
		return svcrole.list(new QueryWrapper<Role>().allEq(params).orderByDesc(columnname));
	}

	/***
	 * 
	 * @param pagenumber 页码
	 * @param pagesize   页面显示数量
	 * @return
	 */
	public PagerList<Role> pagerListRole(Integer pagenumber, Integer pagesize) {

		return pagerListRole(pagenumber, pagesize, "", new HashMap<String, String>());
	}

	/***
	 * 
	 * @param pagenumber 页码
	 * @param pagesize   页面显示数量
	 * @param keyword    关键字
	 * @return
	 */
	public PagerList<Role> pagerListRole(Integer pagenumber, Integer pagesize, String keyword) {

		return pagerListRole(pagenumber, pagesize, keyword, new HashMap<String, String>());
	}

	/***
	 * 
	 * @param pagenumber 页码
	 * @param pagesize   页面显示数量
	 * @param keyword    关键字
	 * @param sqlin      用in子句包括的id值
	 * @return
	 */
	public PagerList<Role> pagerListRole(Integer pagenumber, Integer pagesize, String keyword,
			Map<String, String> sqlin) {
		return pagerListRole(pagenumber, pagesize, keyword, sqlin, new HashMap<String, Object>());
	}

	/***
	 * 
	 * @param pagenumber 页码
	 * @param pagesize   页面显示数量
	 * @param keyword    关键字
	 * @param sqlin      用in子句包括的id值
	 * @param params     筛选条件
	 * @return
	 */
	public PagerList<Role> pagerListRole(Integer pagenumber, Integer pagesize, String keyword,
			Map<String, String> sqlin, Map<String, Object> params) {
		List<KeyAndValue> ordlist = new ArrayList<KeyAndValue>();
		ordlist.add(new KeyAndValue(Role.ID, "desc"));
		return pagerListRole(pagenumber, pagesize, keyword, sqlin, params, ordlist);
	}

	/***
	 * 
	 * @param pagenumber 页码
	 * @param pagesize   页面显示数量
	 * @param keyword    关键字
	 * @param sqlin      用in子句包括的id值
	 * @return
	 */
	public PagerList<Role> pagerListRole(Integer pagenumber, Integer pagesize, String keyword,
			Map<String, String> sqlin, Map<String, Object> params, List<KeyAndValue> ordlist) {

		Page<Role> page = new Page<>(pagenumber, pagesize);
		List<Role> list = null;

		QueryWrapper<Role> queryWrapper = new QueryWrapper<>();
		// 读取url中是否包含筛选条件

		if (params.size() > 0) {
			queryWrapper.allEq(params);
		}
		if (StringUtils.isBlank(keyword)) {

			// --------1.准确匹配模式---------

		} else {
			// --------2.模糊匹配模式---------
			// 添加关键字模糊查找条件
			if (!StringUtils.isBlank(keyword)) {
				String kwss = keyword;
				queryWrapper
						.and(wr -> wr.like(Role.NAME, kwss).or().like(Role.ALIAS, kwss).or().like(Role.REMARK, kwss));
			}
			// 添加id使用in语句筛选
			// --------2.模糊匹配模式---------
		}
		for (KeyAndValue od : ordlist) {
			if (od.getValue().equals("desc")) {
				queryWrapper.orderByDesc((String) od.getKey());
			} else {
				queryWrapper.orderByAsc((String) od.getKey());
			}
		}
		list = svcrole.page(page, queryWrapper).getRecords();
		// 清理数据,标注关键字，范围：所有字符型
		for (int i = 0; i < list.size(); i++) {
			// 如果头像为空，加载默认头像
			// if (StringUtils.isBlank(list.get(i).getWechat_headimgurl())
			// || list.get(i).getWechat_headimgurl().equals("0")) {
			// list.get(i).setWechat_headimgurl(Common.userheadimgurl);
			// }
			// 标注关键字，范围：所有字符型
			if (!StringUtils.isBlank(keyword)) {
				// 避免空值出现错误
				try {

					list.get(i).setName((list.get(i).getName().replace(keyword, Common.getKeywordSpan(keyword))));
					list.get(i).setAlias((list.get(i).getAlias().replace(keyword, Common.getKeywordSpan(keyword))));
					list.get(i).setRemark((list.get(i).getRemark().replace(keyword, Common.getKeywordSpan(keyword))));
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		}

		Pager<Role> pager = new Pager<>(page);
		PagerList<Role> pagerList = new PagerList<>(pager, list);

		return pagerList;
	}

	/***
	 * 保持新的实体，返回是否成功
	 * 
	 * @param it 实体
	 * @return 是否成功
	 */
	public Boolean saveRole(Role it) {

		logger.debug(this.getClass().getName() + ".saveRole()");
		return svcrole.save(it);
	}

	/***
	 * 按id删除，返回是否成功
	 * 
	 * @param id
	 * @return 是否成功
	 */
	public Boolean removeRoleById(Serializable id) {

		logger.debug(this.getClass().getName() + ".removeRoleById()");
		return svcrole.removeById(id);
	}

	/***
	 * 按id修改实体，返回布尔值，是否成功
	 * 
	 * @param it 实体
	 * @return 是否成功
	 */
	public Boolean updateRoleById(String name, String alias, Boolean is_system, Boolean is_actived, String remark,
			Integer update_userid, Long update_gmt, Integer id) {

		logger.debug(this.getClass().getName() + ".updateRoleById()");
		UpdateWrapper<Role> uwr = new UpdateWrapper<>();
		uwr.set(Role.NAME, name);
		uwr.set(Role.ALIAS, alias);
		uwr.set(Role.IS_SYSTEM, is_system);
		uwr.set(Role.IS_ACTIVED, is_actived);
		uwr.set(Role.REMARK, remark);
		uwr.set(Role.UPDATE_USERID, update_userid);
		uwr.set(Role.UPDATE_GMT, update_gmt);

		uwr.eq(Role.ID, id);
		return svcrole.update(uwr);
	}

	/***
	 * 按id修改实体，返回是否成功
	 * 
	 * @param it 实体
	 * @return 是否成功
	 */
	public Boolean updateRoleById(Role it) {

		logger.debug(this.getClass().getName() + ".updateRoleById()");
		return svcrole.updateById(it);
	}

	/***
	 * 按id修改实体的IS_ACTIVED字段，返回是否成功
	 * 
	 * @param it 实体
	 * @return 是否成功
	 */
	public Boolean updateRoleById(String operate, Integer id) {

		logger.debug(this.getClass().getName() + ".updateRoleById()IS_ACTIVED");
		UpdateWrapper<Role> uwr = new UpdateWrapper<>();
		if (operate.equals("hideitem")) {
			uwr.set(Role.IS_ACTIVED, false);
		} else {
			uwr.set(Role.IS_ACTIVED, true);
		}
		uwr.eq(Role.ID, id);
		return svcrole.update(uwr);
	}

	/***
	 * 统计当前表的数量
	 * 
	 * @return
	 */
	public Integer countRole() {
		return svcrole.count();
	}

	/***
	 * 统计当前表的数量
	 * 
	 * @return
	 */
	public Integer countRole(QueryWrapper<Role> queryWrapper) {
		return svcrole.count(queryWrapper);
	}

	/***
	 * 按自定义查询统计,返回map
	 * 
	 * @return
	 */
	public Map<String, Integer> statRoleGroupbyId() {
		List<Map<String, Object>> list = svcrole.listMaps(new QueryWrapper<Role>().select(Role.NAME, "count(*)")
				.eq(Role.CREATE_USERID, 0).groupBy(Role.ID).orderByAsc(Role.ID));
		return Util.listmapToMap(list, Role.NAME, "count(*)");
	}

	/***
	 * 按自定义查询统计,返回map
	 * 
	 * @return
	 */
	public Map<String, Integer> statRoleGroupbyCreate_userid() {

		return svcrole.statMapByFieldname(Role.CREATE_USERID);
	}

	// TODO:--------------manageRole-end----------------
	// TODO:--------------manageStatistic-begin----------------
	/***
	 * 统计Statistic中，指定字段的最大值列表
	 * 
	 * @param fieldname 需要统计的字段
	 * @return Statistic表，指定字段中的最大值
	 */
	public Integer maxStatistic(String fieldname) {

		int rtv = 0;
		try {
			rtv = svcstatistic.max(fieldname);
		} catch (Exception e) {
		}
		return rtv;
	}

	/***
	 * 查询全部，返回一个map，用于数量较少时的映射
	 * 
	 * @return
	 */
	public Map<Integer, String> mapStatistic() {
		List<Statistic> list = svcstatistic.list();
		Map<Integer, String> map = new HashMap<Integer, String>();
		for (int i = 0; i < list.size(); i++) {
			map.put(list.get(i).getId(), list.get(i).getSt_date());
		}
		return map;
	}

	public Map<Integer, String> mapStatistic(Map<String, Object> params) {
		List<Statistic> list = listStatisticByMap(params);
		Map<Integer, String> map = new HashMap<Integer, String>();
		for (int i = 0; i < list.size(); i++) {
			map.put(list.get(i).getId(), list.get(i).getSt_date());
		}
		return map;
	}

	/***
	 * 查询，返回Statistic列表
	 * 
	 * @return Statistic列表
	 */
	public List<Statistic> listStatistic() {

		Map<String, Object> params = new HashMap<String, Object>();
		return (List<Statistic>) svcstatistic.listByMap(params);
	}

	/***
	 * 查询，返回Statistic列表
	 * 
	 * @param params 查询条件
	 * @return Statistic列表
	 */
	public List<Statistic> listStatisticByMap(Map<String, Object> params) {

		logger.debug(this.getClass().getName() + ".listStatisticByMap()");
		return (List<Statistic>) svcstatistic.listByMap(params);
	}

	/***
	 * 查询，返回Statistic列表
	 * 
	 * @param params  查询条件（可以多个）
	 * @param ordlist 排序条件（可以多个）
	 * @return Statistic列表
	 */
	public List<Statistic> listStatisticByMap(Map<String, Object> params, List<KeyAndValue> ordlist) {

		logger.debug(this.getClass().getName() + ".listStatisticByMap()");
		// Map<String, Object> params = new HashMap<String, Object>();
		// params.put(Statistic.ID, 0);
		// List<KeyAndValue> ordlist = new ArrayList<KeyAndValue>();
		// ordlist.add(new KeyAndValue(Statistic.ID, "desc"));
		QueryWrapper<Statistic> queryWrapper = new QueryWrapper<>();
		if (params.size() > 0) {
			queryWrapper.allEq(params);
		}
		for (KeyAndValue od : ordlist) {
			if (od.getValue().equals("desc")) {
				queryWrapper.orderByDesc((String) od.getKey());
			} else {
				queryWrapper.orderByAsc((String) od.getKey());
			}
		}
		return svcstatistic.list(queryWrapper);
	}

	/***
	 * 按id查询，返回Statistic
	 * 
	 * @param id
	 * @return Statistic
	 */
	public Statistic getStatisticById(Serializable id) {

		logger.debug(this.getClass().getName() + ".getStatisticById()");
		return svcstatistic.getById(id);
	}

	/***
	 * 通过唯一值(数字)查找记录，返回Statistic
	 * 
	 * @param infoid
	 * @return Statistic
	 */
	public Statistic getStatisticBySt_total(Serializable st_total) {

		logger.debug(this.getClass().getName() + ".getStatisticBySt_total()");
		return svcstatistic.getOne(new QueryWrapper<Statistic>().eq(Statistic.ST_TOTAL, st_total).last("limit 1"));
	}

	/***
	 * 通过Map(多个条件)，查询返回Statistic
	 * 
	 * @param params 多个条件
	 * @return Statistic
	 */
	public Statistic getStatisticByMap(Map<String, Object> params) {

		logger.debug(this.getClass().getName() + ".getStatisticByMap()");
		// Map<String, Object> params = new HashMap<String, Object>();
		// params.put(Statistic.ID, 0);
		return svcstatistic.getOne(new QueryWrapper<Statistic>().allEq(params).last("limit 1"));
	}

	/***
	 * 查询，返回Statistic列表
	 * 
	 * @param columnname 排序字段
	 * @return Statistic列表
	 */
	public List<Statistic> listStatisticOrderByAsc(String columnname) {

		logger.debug(this.getClass().getName() + ".listStatisticOrderByAsc()");
		return svcstatistic.list(new QueryWrapper<Statistic>().orderByAsc(columnname));
	}

	/***
	 * 查询，返回Statistic列表
	 * 
	 * @param columnname 排序字段
	 * @return Statistic列表
	 */
	public List<Statistic> listStatisticOrderByDesc(String columnname) {

		logger.debug(this.getClass().getName() + ".listStatisticOrderByDesc()");
		return svcstatistic.list(new QueryWrapper<Statistic>().orderByDesc(columnname));
	}

	/***
	 * 查询，返回Statistic列表
	 * 
	 * @param columnname 排序字段
	 * @return Statistic列表
	 */
	public List<Statistic> listStatisticByMapAsc(Map<String, Object> params, String columnname) {

		logger.debug(this.getClass().getName() + ".listStatisticByMapAsc()");
		return svcstatistic.list(new QueryWrapper<Statistic>().allEq(params).orderByAsc(columnname));
	}

	/***
	 * 查询，返回Statistic列表
	 * 
	 * @param columnname 排序字段
	 * @return Statistic列表
	 */
	public List<Statistic> listStatisticByMapDesc(Map<String, Object> params, String columnname) {

		logger.debug(this.getClass().getName() + ".listStatisticByMapDesc()");
		return svcstatistic.list(new QueryWrapper<Statistic>().allEq(params).orderByDesc(columnname));
	}

	/***
	 * 
	 * @param pagenumber 页码
	 * @param pagesize   页面显示数量
	 * @return
	 */
	public PagerList<Statistic> pagerListStatistic(Integer pagenumber, Integer pagesize) {

		return pagerListStatistic(pagenumber, pagesize, "", new HashMap<String, String>());
	}

	/***
	 * 
	 * @param pagenumber 页码
	 * @param pagesize   页面显示数量
	 * @param keyword    关键字
	 * @return
	 */
	public PagerList<Statistic> pagerListStatistic(Integer pagenumber, Integer pagesize, String keyword) {

		return pagerListStatistic(pagenumber, pagesize, keyword, new HashMap<String, String>());
	}

	/***
	 * 
	 * @param pagenumber 页码
	 * @param pagesize   页面显示数量
	 * @param keyword    关键字
	 * @param sqlin      用in子句包括的id值
	 * @return
	 */
	public PagerList<Statistic> pagerListStatistic(Integer pagenumber, Integer pagesize, String keyword,
			Map<String, String> sqlin) {
		return pagerListStatistic(pagenumber, pagesize, keyword, sqlin, new HashMap<String, Object>());
	}

	/***
	 * 
	 * @param pagenumber 页码
	 * @param pagesize   页面显示数量
	 * @param keyword    关键字
	 * @param sqlin      用in子句包括的id值
	 * @param params     筛选条件
	 * @return
	 */
	public PagerList<Statistic> pagerListStatistic(Integer pagenumber, Integer pagesize, String keyword,
			Map<String, String> sqlin, Map<String, Object> params) {
		List<KeyAndValue> ordlist = new ArrayList<KeyAndValue>();
		ordlist.add(new KeyAndValue(Statistic.ID, "desc"));
		return pagerListStatistic(pagenumber, pagesize, keyword, sqlin, params, ordlist);
	}

	/***
	 * 
	 * @param pagenumber 页码
	 * @param pagesize   页面显示数量
	 * @param keyword    关键字
	 * @param sqlin      用in子句包括的id值
	 * @return
	 */
	public PagerList<Statistic> pagerListStatistic(Integer pagenumber, Integer pagesize, String keyword,
			Map<String, String> sqlin, Map<String, Object> params, List<KeyAndValue> ordlist) {

		Page<Statistic> page = new Page<>(pagenumber, pagesize);
		List<Statistic> list = null;

		QueryWrapper<Statistic> queryWrapper = new QueryWrapper<>();
		// 读取url中是否包含筛选条件

		if (params.size() > 0) {
			queryWrapper.allEq(params);
		}
		if (StringUtils.isBlank(keyword)) {

			// --------1.准确匹配模式---------

		} else {
			// --------2.模糊匹配模式---------
			// 添加关键字模糊查找条件
			if (!StringUtils.isBlank(keyword)) {
				String kwss = keyword;
				queryWrapper.and(wr -> wr.like(Statistic.ST_DATE, kwss));
			}
			// 添加id使用in语句筛选
			// --------2.模糊匹配模式---------
		}
		for (KeyAndValue od : ordlist) {
			if (od.getValue().equals("desc")) {
				queryWrapper.orderByDesc((String) od.getKey());
			} else {
				queryWrapper.orderByAsc((String) od.getKey());
			}
		}
		list = svcstatistic.page(page, queryWrapper).getRecords();
		// 清理数据,标注关键字，范围：所有字符型
		for (int i = 0; i < list.size(); i++) {
			// 如果头像为空，加载默认头像
			// if (StringUtils.isBlank(list.get(i).getWechat_headimgurl())
			// || list.get(i).getWechat_headimgurl().equals("0")) {
			// list.get(i).setWechat_headimgurl(Common.userheadimgurl);
			// }
			// 标注关键字，范围：所有字符型
			if (!StringUtils.isBlank(keyword)) {
				// 避免空值出现错误
				try {

					list.get(i).setSt_date((list.get(i).getSt_date().replace(keyword, Common.getKeywordSpan(keyword))));
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		}

		Pager<Statistic> pager = new Pager<>(page);
		PagerList<Statistic> pagerList = new PagerList<>(pager, list);

		return pagerList;
	}

	/***
	 * 保持新的实体，返回是否成功
	 * 
	 * @param it 实体
	 * @return 是否成功
	 */
	public Boolean saveStatistic(Statistic it) {

		logger.debug(this.getClass().getName() + ".saveStatistic()");
		return svcstatistic.save(it);
	}

	/***
	 * 按id删除，返回是否成功
	 * 
	 * @param id
	 * @return 是否成功
	 */
	public Boolean removeStatisticById(Serializable id) {

		logger.debug(this.getClass().getName() + ".removeStatisticById()");
		return svcstatistic.removeById(id);
	}

	/***
	 * 按id修改实体，返回布尔值，是否成功
	 * 
	 * @param it 实体
	 * @return 是否成功
	 */
	public Boolean updateStatisticById(String st_date, Integer st_total, Integer st_today, Integer id) {

		logger.debug(this.getClass().getName() + ".updateStatisticById()");
		UpdateWrapper<Statistic> uwr = new UpdateWrapper<>();
		uwr.set(Statistic.ST_DATE, st_date);
		uwr.set(Statistic.ST_TOTAL, st_total);
		uwr.set(Statistic.ST_TODAY, st_today);

		uwr.eq(Statistic.ID, id);
		return svcstatistic.update(uwr);
	}

	/***
	 * 按id修改实体，返回是否成功
	 * 
	 * @param it 实体
	 * @return 是否成功
	 */
	public Boolean updateStatisticById(Statistic it) {

		logger.debug(this.getClass().getName() + ".updateStatisticById()");
		return svcstatistic.updateById(it);
	}

	/***
	 * 统计当前表的数量
	 * 
	 * @return
	 */
	public Integer countStatistic() {
		return svcstatistic.count();
	}

	/***
	 * 统计当前表的数量
	 * 
	 * @return
	 */
	public Integer countStatistic(QueryWrapper<Statistic> queryWrapper) {
		return svcstatistic.count(queryWrapper);
	}

	/***
	 * 按自定义查询统计,返回map
	 * 
	 * @return
	 */
	public Map<String, Integer> statStatisticGroupbyId() {
		List<Map<String, Object>> list = svcstatistic
				.listMaps(new QueryWrapper<Statistic>().select(Statistic.ST_DATE, "count(*)").eq(Statistic.ST_TOTAL, 0)
						.groupBy(Statistic.ID).orderByAsc(Statistic.ID));
		return Util.listmapToMap(list, Statistic.ST_DATE, "count(*)");
	}

	/***
	 * 按自定义查询统计,返回map
	 * 
	 * @return
	 */
	public Map<String, Integer> statStatisticGroupbySt_total() {

		return svcstatistic.statMapByFieldname(Statistic.ST_TOTAL);
	}

	// TODO:--------------manageStatistic-end----------------
	// TODO:--------------manageStudent-begin----------------
	/***
	 * 统计Student中，指定字段的最大值列表
	 * 
	 * @param fieldname 需要统计的字段
	 * @return Student表，指定字段中的最大值
	 */
	public Integer maxStudent(String fieldname) {

		int rtv = 0;
		try {
			rtv = svcstudent.max(fieldname);
		} catch (Exception e) {
		}
		return rtv;
	}

	/***
	 * 查询全部，返回一个map，用于数量较少时的映射
	 * 
	 * @return
	 */
	public Map<Integer, String> mapStudent() {
		List<Student> list = svcstudent.list();
		Map<Integer, String> map = new HashMap<Integer, String>();
		for (int i = 0; i < list.size(); i++) {
			map.put(list.get(i).getId(), list.get(i).getSno());
		}
		return map;
	}

	public Map<Integer, String> mapStudent(Map<String, Object> params) {
		List<Student> list = listStudentByMap(params);
		Map<Integer, String> map = new HashMap<Integer, String>();
		for (int i = 0; i < list.size(); i++) {
			map.put(list.get(i).getId(), list.get(i).getSno());
		}
		return map;
	}

	/***
	 * 查询，返回Student列表
	 * 
	 * @return Student列表
	 */
	public List<Student> listStudent() {

		Map<String, Object> params = new HashMap<String, Object>();
		return (List<Student>) svcstudent.listByMap(params);
	}

//	/***
//	 * 查询，返回Student列表
//	 *
//	 * @param params 查询条件
//	 * @return Student列表
//	 */
//	public List<Student> listStudentByMap(Map<String, Object> params) {
//
//		logger.debug(this.getClass().getName() + ".listStudentByMap()");
//		return (List<Student>) svcstudent.listByMap(params);
//	}
	/***
	 * 查询，返回Student列表  -julius
	 *
	 * @param params 查询条件
	 * @return Student列表
	 */
	public List<Student> listStudentByMap(Map<String, Object> params) {
		logger.debug(this.getClass().getName() + ".listStudentByMap()");
		return (List<Student>) svcstudent.listByMap(params);
	}

	/***
	 * 查询，返回Student列表
	 * 
	 * @param params  查询条件（可以多个）
	 * @param ordlist 排序条件（可以多个）
	 * @return Student列表
	 */
	public List<Student> listStudentByMap(Map<String, Object> params, List<KeyAndValue> ordlist) {

		logger.debug(this.getClass().getName() + ".listStudentByMap()");
		// Map<String, Object> params = new HashMap<String, Object>();
		// params.put(Student.ID, 0);
		// List<KeyAndValue> ordlist = new ArrayList<KeyAndValue>();
		// ordlist.add(new KeyAndValue(Student.ID, "desc"));
		QueryWrapper<Student> queryWrapper = new QueryWrapper<>();
		if (params.size() > 0) {
			queryWrapper.allEq(params);
		}
		for (KeyAndValue od : ordlist) {
			if (od.getValue().equals("desc")) {
				queryWrapper.orderByDesc((String) od.getKey());
			} else {
				queryWrapper.orderByAsc((String) od.getKey());
			}
		}
		return svcstudent.list(queryWrapper);
	}

	/***
	 * 按id查询，返回Student
	 * 
	 * @param id
	 * @return Student
	 */
	public Student getStudentById(Serializable id) {

		logger.debug(this.getClass().getName() + ".getStudentById()");
		return svcstudent.getById(id);
	}

	/***
	 * 通过唯一值(数字)查找记录，返回Student
	 * 
	 * @param infoid
	 * @return Student
	 */
	public Student getStudentByLogin_method(Serializable login_method) {

		logger.debug(this.getClass().getName() + ".getStudentByLogin_method()");
		return svcstudent.getOne(new QueryWrapper<Student>().eq(Student.LOGIN_METHOD, login_method).last("limit 1"));
	}

	/***
	 * 通过Map(多个条件)，查询返回Student
	 * 
	 * @param params 多个条件
	 * @return Student
	 */
	public Student getStudentByMap(Map<String, Object> params) {

		logger.debug(this.getClass().getName() + ".getStudentByMap()");
		// Map<String, Object> params = new HashMap<String, Object>();
		// params.put(Student.ID, 0);
		return svcstudent.getOne(new QueryWrapper<Student>().allEq(params).last("limit 1"));
	}

	/***
	 * 查询，返回Student列表
	 * 
	 * @param columnname 排序字段
	 * @return Student列表
	 */
	public List<Student> listStudentOrderByAsc(String columnname) {

		logger.debug(this.getClass().getName() + ".listStudentOrderByAsc()");
		return svcstudent.list(new QueryWrapper<Student>().orderByAsc(columnname));
	}

	/***
	 * 查询，返回Student列表
	 * 
	 * @param columnname 排序字段
	 * @return Student列表
	 */
	public List<Student> listStudentOrderByDesc(String columnname) {

		logger.debug(this.getClass().getName() + ".listStudentOrderByDesc()");
		return svcstudent.list(new QueryWrapper<Student>().orderByDesc(columnname));
	}

	/***
	 * 查询，返回Student列表
	 * 
	 * @param columnname 排序字段
	 * @return Student列表
	 */
	public List<Student> listStudentByMapAsc(Map<String, Object> params, String columnname) {

		logger.debug(this.getClass().getName() + ".listStudentByMapAsc()");
		return svcstudent.list(new QueryWrapper<Student>().allEq(params).orderByAsc(columnname));
	}

	/***
	 * 查询，返回Student列表
	 * 
	 * @param columnname 排序字段
	 * @return Student列表
	 */
	public List<Student> listStudentByMapDesc(Map<String, Object> params, String columnname) {

		logger.debug(this.getClass().getName() + ".listStudentByMapDesc()");
		return svcstudent.list(new QueryWrapper<Student>().allEq(params).orderByDesc(columnname));
	}

	/***
	 * 
	 * @param pagenumber 页码
	 * @param pagesize   页面显示数量
	 * @return
	 */
	public PagerList<Student> pagerListStudent(Integer pagenumber, Integer pagesize) {

		return pagerListStudent(pagenumber, pagesize, "", new HashMap<String, String>());
	}

	/***
	 * 
	 * @param pagenumber 页码
	 * @param pagesize   页面显示数量
	 * @param keyword    关键字
	 * @return
	 */
	public PagerList<Student> pagerListStudent(Integer pagenumber, Integer pagesize, String keyword) {

		return pagerListStudent(pagenumber, pagesize, keyword, new HashMap<String, String>());
	}

	/***
	 * 
	 * @param pagenumber 页码
	 * @param pagesize   页面显示数量
	 * @param keyword    关键字
	 * @param sqlin      用in子句包括的id值
	 * @return
	 */
	public PagerList<Student> pagerListStudent(Integer pagenumber, Integer pagesize, String keyword,
			Map<String, String> sqlin) {
		return pagerListStudent(pagenumber, pagesize, keyword, sqlin, new HashMap<String, Object>());
	}

	/***
	 * 
	 * @param pagenumber 页码
	 * @param pagesize   页面显示数量
	 * @param keyword    关键字
	 * @param sqlin      用in子句包括的id值
	 * @param params     筛选条件
	 * @return
	 */
	public PagerList<Student> pagerListStudent(Integer pagenumber, Integer pagesize, String keyword,
			Map<String, String> sqlin, Map<String, Object> params) {
		List<KeyAndValue> ordlist = new ArrayList<KeyAndValue>();
		ordlist.add(new KeyAndValue(Student.ID, "desc"));
		return pagerListStudent(pagenumber, pagesize, keyword, sqlin, params, ordlist);
	}

	/***
	 * 
	 * @param pagenumber 页码
	 * @param pagesize   页面显示数量
	 * @param keyword    关键字
	 * @param sqlin      用in子句包括的id值
	 * @return
	 */
	public PagerList<Student> pagerListStudent(Integer pagenumber, Integer pagesize, String keyword,
			Map<String, String> sqlin, Map<String, Object> params, List<KeyAndValue> ordlist) {

		Page<Student> page = new Page<>(pagenumber, pagesize);
		List<Student> list = null;

		QueryWrapper<Student> queryWrapper = new QueryWrapper<>();
		// 读取url中是否包含筛选条件

		if (params.size() > 0) {
			queryWrapper.allEq(params);
		}
		if (StringUtils.isBlank(keyword)) {

			// --------1.准确匹配模式---------

		} else {
			// --------2.模糊匹配模式---------
			// 添加关键字模糊查找条件
			if (!StringUtils.isBlank(keyword)) {
				String kwss = keyword;
				queryWrapper.and(wr -> wr.like(Student.SNO, kwss).or().like(Student.LOGIN_NAME, kwss).or()
						.like(Student.LOGIN_PASSWORD, kwss).or().like(Student.NAME, kwss).or().like(Student.EMAIL, kwss)
						.or().like(Student.MOBILE, kwss).or().like(Student.QQ, kwss).or()
						.like(Student.WECHAT_OPENID, kwss).or().like(Student.WECHAT_NICKNAME, kwss).or()
						.like(Student.WECHAT_HEADIMGURL, kwss).or().like(Student.CLASSCODE, kwss));
			}
			// 添加id使用in语句筛选
			// --------2.模糊匹配模式---------
		}
		for (KeyAndValue od : ordlist) {
			if (od.getValue().equals("desc")) {
				queryWrapper.orderByDesc((String) od.getKey());
			} else {
				queryWrapper.orderByAsc((String) od.getKey());
			}
		}
		list = svcstudent.page(page, queryWrapper).getRecords();
		// 清理数据,标注关键字，范围：所有字符型
		for (int i = 0; i < list.size(); i++) {
			// 如果头像为空，加载默认头像
			// if (StringUtils.isBlank(list.get(i).getWechat_headimgurl())
			// || list.get(i).getWechat_headimgurl().equals("0")) {
			// list.get(i).setWechat_headimgurl(Common.userheadimgurl);
			// }
			// 标注关键字，范围：所有字符型
			if (!StringUtils.isBlank(keyword)) {
				// 避免空值出现错误
				try {

					list.get(i).setSno((list.get(i).getSno().replace(keyword, Common.getKeywordSpan(keyword))));
					list.get(i).setLogin_name(
							(list.get(i).getLogin_name().replace(keyword, Common.getKeywordSpan(keyword))));
					list.get(i).setLogin_name_digest(
							(list.get(i).getLogin_name_digest().replace(keyword, Common.getKeywordSpan(keyword))));
					list.get(i).setLogin_password(
							(list.get(i).getLogin_password().replace(keyword, Common.getKeywordSpan(keyword))));
					list.get(i).setLogin_password_digest(
							(list.get(i).getLogin_password_digest().replace(keyword, Common.getKeywordSpan(keyword))));
					list.get(i).setName((list.get(i).getName().replace(keyword, Common.getKeywordSpan(keyword))));
					list.get(i).setEmail((list.get(i).getEmail().replace(keyword, Common.getKeywordSpan(keyword))));
					list.get(i).setMobile((list.get(i).getMobile().replace(keyword, Common.getKeywordSpan(keyword))));
					list.get(i).setQq((list.get(i).getQq().replace(keyword, Common.getKeywordSpan(keyword))));
					list.get(i).setWechat_openid(
							(list.get(i).getWechat_openid().replace(keyword, Common.getKeywordSpan(keyword))));
					list.get(i).setWechat_nickname(
							(list.get(i).getWechat_nickname().replace(keyword, Common.getKeywordSpan(keyword))));
					list.get(i).setWechat_headimgurl(
							(list.get(i).getWechat_headimgurl().replace(keyword, Common.getKeywordSpan(keyword))));
					list.get(i).setClasscode(
							(list.get(i).getClasscode().replace(keyword, Common.getKeywordSpan(keyword))));
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		}

		Pager<Student> pager = new Pager<>(page);
		PagerList<Student> pagerList = new PagerList<>(pager, list);

		return pagerList;
	}

	/***
	 * 保持新的实体，返回是否成功
	 * 
	 * @param it 实体
	 * @return 是否成功
	 */
	public Boolean saveStudent(Student it) {

		logger.debug(this.getClass().getName() + ".saveStudent()");
		return svcstudent.save(it);
	}

	/***
	 * 按id删除，返回是否成功
	 * 
	 * @param id
	 * @return 是否成功
	 */
	public Boolean removeStudentById(Serializable id) {

		logger.debug(this.getClass().getName() + ".removeStudentById()");
		return svcstudent.removeById(id);
	}

	/***
	 * 按id修改实体，返回布尔值，是否成功
	 * 
	 * @param it 实体
	 * @return 是否成功
	 */
	public Boolean updateStudentById(String sno, String login_name, String login_name_digest, String login_password,
			String login_password_digest, String name, String email, Boolean is_actived, String mobile, String qq,
			String wechat_openid, String wechat_nickname, String wechat_headimgurl, Integer login_method,
			String classcode, Long update_gmt, Integer id) {

		logger.debug(this.getClass().getName() + ".updateStudentById()");
		UpdateWrapper<Student> uwr = new UpdateWrapper<>();
		uwr.set(Student.SNO, sno);
		uwr.set(Student.LOGIN_NAME, login_name);
		uwr.set(Student.LOGIN_NAME_DIGEST, login_name_digest);
		uwr.set(Student.LOGIN_PASSWORD, login_password);
		uwr.set(Student.LOGIN_PASSWORD_DIGEST, login_password_digest);
		uwr.set(Student.NAME, name);
		uwr.set(Student.EMAIL, email);
		uwr.set(Student.IS_ACTIVED, is_actived);
		uwr.set(Student.MOBILE, mobile);
		uwr.set(Student.QQ, qq);
		uwr.set(Student.WECHAT_OPENID, wechat_openid);
		uwr.set(Student.WECHAT_NICKNAME, wechat_nickname);
		uwr.set(Student.WECHAT_HEADIMGURL, wechat_headimgurl);
		uwr.set(Student.LOGIN_METHOD, login_method);
		uwr.set(Student.CLASSCODE, classcode);
		uwr.set(Student.UPDATE_GMT, update_gmt);

		uwr.eq(Student.ID, id);
		return svcstudent.update(uwr);
	}

	/***
	 * 按id修改实体，返回是否成功
	 * 
	 * @param it 实体
	 * @return 是否成功
	 */
	public Boolean updateStudentById(Student it) {

		logger.debug(this.getClass().getName() + ".updateStudentById()");
		return svcstudent.updateById(it);
	}

	/***
	 * 按id修改实体的IS_ACTIVED字段，返回是否成功
	 * 
	 * @param it 实体
	 * @return 是否成功
	 */
	public Boolean updateStudentById(String operate, Integer id) {

		logger.debug(this.getClass().getName() + ".updateStudentById()IS_ACTIVED");
		UpdateWrapper<Student> uwr = new UpdateWrapper<>();
		if (operate.equals("hideitem")) {
			uwr.set(Student.IS_ACTIVED, false);
		} else {
			uwr.set(Student.IS_ACTIVED, true);
		}
		uwr.eq(Student.ID, id);
		return svcstudent.update(uwr);
	}

	/***
	 * 统计当前表的数量
	 * 
	 * @return
	 */
	public Integer countStudent() {
		return svcstudent.count();
	}

	/***
	 * 统计当前表的数量
	 * 
	 * @return
	 */
	public Integer countStudent(QueryWrapper<Student> queryWrapper) {
		return svcstudent.count(queryWrapper);
	}

	/***
	 * 按自定义查询统计,返回map
	 * 
	 * @return
	 */
	public Map<String, Integer> statStudentGroupbyId() {
		List<Map<String, Object>> list = svcstudent.listMaps(new QueryWrapper<Student>().select(Student.SNO, "count(*)")
				.eq(Student.LOGIN_METHOD, 0).groupBy(Student.ID).orderByAsc(Student.ID));
		return Util.listmapToMap(list, Student.SNO, "count(*)");
	}

	/***
	 * 按自定义查询统计,返回map
	 * 
	 * @return
	 */
	public Map<String, Integer> statStudentGroupbyLogin_method() {

		return svcstudent.statMapByFieldname(Student.LOGIN_METHOD);
	}

	// TODO:--------------manageStudent-end----------------
	// TODO:--------------manageStudent_group-begin----------------
	/***
	 * 统计Student_group中，指定字段的最大值列表
	 * 
	 * @param fieldname 需要统计的字段
	 * @return Student_group表，指定字段中的最大值
	 */
	public Integer maxStudent_group(String fieldname) {

		int rtv = 0;
		try {
			rtv = svcstudent_group.max(fieldname);
		} catch (Exception e) {
		}
		return rtv;
	}

	/***
	 * 查询全部，返回一个map，用于数量较少时的映射
	 * 
	 * @return
	 */
	public Map<Integer, String> mapStudent_group() {
		List<Student_group> list = svcstudent_group.list();
		Map<Integer, String> map = new HashMap<Integer, String>();
		for (int i = 0; i < list.size(); i++) {
			map.put(list.get(i).getId(), list.get(i).getCode());//key=student_group.id  value=student_group.code班号
		}
		return map;
	}

	public Map<Integer, String> mapStudent_group(Map<String, Object> params) {
		List<Student_group> list = listStudent_groupByMap(params);
		Map<Integer, String> map = new HashMap<Integer, String>();
		for (int i = 0; i < list.size(); i++) {
			map.put(list.get(i).getId(), list.get(i).getCode());
		}
		return map;
	}

	/***
	 * 查询，返回Student_group列表
	 * 
	 * @return Student_group列表
	 */
	public List<Student_group> listStudent_group() {

		Map<String, Object> params = new HashMap<String, Object>();
		return (List<Student_group>) svcstudent_group.listByMap(params);
	}

	/***
	 * 查询，返回Student_group列表
	 * 
	 * @param params 查询条件
	 * @return Student_group列表
	 */
	public List<Student_group> listStudent_groupByMap(Map<String, Object> params) {

		logger.debug(this.getClass().getName() + ".listStudent_groupByMap()");
		return (List<Student_group>) svcstudent_group.listByMap(params);
	}

	/***
	 * 查询，返回Student_group列表
	 * 
	 * @param params  查询条件（可以多个）
	 * @param ordlist 排序条件（可以多个）
	 * @return Student_group列表
	 */
	public List<Student_group> listStudent_groupByMap(Map<String, Object> params, List<KeyAndValue> ordlist) {

		logger.debug(this.getClass().getName() + ".listStudent_groupByMap()");
		// Map<String, Object> params = new HashMap<String, Object>();
		// params.put(Student_group.ID, 0);
		// List<KeyAndValue> ordlist = new ArrayList<KeyAndValue>();
		// ordlist.add(new KeyAndValue(Student_group.ID, "desc"));
		QueryWrapper<Student_group> queryWrapper = new QueryWrapper<>();
		if (params.size() > 0) {
			queryWrapper.allEq(params);
		}
		for (KeyAndValue od : ordlist) {
			if (od.getValue().equals("desc")) {
				queryWrapper.orderByDesc((String) od.getKey());
			} else {
				queryWrapper.orderByAsc((String) od.getKey());
			}
		}
		return svcstudent_group.list(queryWrapper);
	}

	/***
	 * 按id查询，返回Student_group
	 * 
	 * @param id
	 * @return Student_group
	 */
	public Student_group getStudent_groupById(Serializable id) {

		logger.debug(this.getClass().getName() + ".getStudent_groupById()");
		return svcstudent_group.getById(id);
	}

	/***
	 * 通过唯一值(数字)查找记录，返回Student_group
	 * 
	 * @param infoid
	 * @return Student_group
	 */
	public Student_group getStudent_groupByIs_actived(Serializable is_actived) {

		logger.debug(this.getClass().getName() + ".getStudent_groupByIs_actived()");
		return svcstudent_group
				.getOne(new QueryWrapper<Student_group>().eq(Student_group.IS_ACTIVED, is_actived).last("limit 1"));
	}

	/***
	 * 通过Map(多个条件)，查询返回Student_group
	 * 
	 * @param params 多个条件
	 * @return Student_group
	 */
	public Student_group getStudent_groupByMap(Map<String, Object> params) {

		logger.debug(this.getClass().getName() + ".getStudent_groupByMap()");
		// Map<String, Object> params = new HashMap<String, Object>();
		// params.put(Student_group.ID, 0);
		return svcstudent_group.getOne(new QueryWrapper<Student_group>().allEq(params).last("limit 1"));
	}

	/***
	 * 查询，返回Student_group列表
	 * 
	 * @param columnname 排序字段
	 * @return Student_group列表
	 */
	public List<Student_group> listStudent_groupOrderByAsc(String columnname) {

		logger.debug(this.getClass().getName() + ".listStudent_groupOrderByAsc()");
		return svcstudent_group.list(new QueryWrapper<Student_group>().orderByAsc(columnname));
	}

	/***
	 * 查询，返回Student_group列表
	 * 
	 * @param columnname 排序字段
	 * @return Student_group列表
	 */
	public List<Student_group> listStudent_groupOrderByDesc(String columnname) {

		logger.debug(this.getClass().getName() + ".listStudent_groupOrderByDesc()");
		return svcstudent_group.list(new QueryWrapper<Student_group>().orderByDesc(columnname));
	}

	/***
	 * 查询，返回Student_group列表
	 * 
	 * @param columnname 排序字段
	 * @return Student_group列表
	 */
	public List<Student_group> listStudent_groupByMapAsc(Map<String, Object> params, String columnname) {

		logger.debug(this.getClass().getName() + ".listStudent_groupByMapAsc()");
		return svcstudent_group.list(new QueryWrapper<Student_group>().allEq(params).orderByAsc(columnname));
	}

	/***
	 * 查询，返回Student_group列表
	 * 
	 * @param columnname 排序字段
	 * @return Student_group列表
	 */
	public List<Student_group> listStudent_groupByMapDesc(Map<String, Object> params, String columnname) {

		logger.debug(this.getClass().getName() + ".listStudent_groupByMapDesc()");
		return svcstudent_group.list(new QueryWrapper<Student_group>().allEq(params).orderByDesc(columnname));
	}

	/***
	 * 
	 * @param pagenumber 页码
	 * @param pagesize   页面显示数量
	 * @return
	 */
	public PagerList<Student_group> pagerListStudent_group(Integer pagenumber, Integer pagesize) {

		return pagerListStudent_group(pagenumber, pagesize, "", new HashMap<String, String>());
	}

	/***
	 * 
	 * @param pagenumber 页码
	 * @param pagesize   页面显示数量
	 * @param keyword    关键字
	 * @return
	 */
	public PagerList<Student_group> pagerListStudent_group(Integer pagenumber, Integer pagesize, String keyword) {

		return pagerListStudent_group(pagenumber, pagesize, keyword, new HashMap<String, String>());
	}

	/***
	 * 
	 * @param pagenumber 页码
	 * @param pagesize   页面显示数量
	 * @param keyword    关键字
	 * @param sqlin      用in子句包括的id值
	 * @return
	 */
	public PagerList<Student_group> pagerListStudent_group(Integer pagenumber, Integer pagesize, String keyword,
			Map<String, String> sqlin) {
		return pagerListStudent_group(pagenumber, pagesize, keyword, sqlin, new HashMap<String, Object>());
	}

	/***
	 * 
	 * @param pagenumber 页码
	 * @param pagesize   页面显示数量
	 * @param keyword    关键字
	 * @param sqlin      用in子句包括的id值
	 * @param params     筛选条件
	 * @return
	 */
	public PagerList<Student_group> pagerListStudent_group(Integer pagenumber, Integer pagesize, String keyword,
			Map<String, String> sqlin, Map<String, Object> params) {
		List<KeyAndValue> ordlist = new ArrayList<KeyAndValue>();
		ordlist.add(new KeyAndValue(Student_group.ID, "desc"));
		return pagerListStudent_group(pagenumber, pagesize, keyword, sqlin, params, ordlist);
	}

	/***
	 * 
	 * @param pagenumber 页码
	 * @param pagesize   页面显示数量
	 * @param keyword    关键字
	 * @param sqlin      用in子句包括的id值
	 * @return
	 */
	public PagerList<Student_group> pagerListStudent_group(Integer pagenumber, Integer pagesize, String keyword,
			Map<String, String> sqlin, Map<String, Object> params, List<KeyAndValue> ordlist) {

		Page<Student_group> page = new Page<>(pagenumber, pagesize);
		List<Student_group> list = null;

		QueryWrapper<Student_group> queryWrapper = new QueryWrapper<>();
		// 读取url中是否包含筛选条件

		if (params.size() > 0) {
			queryWrapper.allEq(params);
		}
		if (StringUtils.isBlank(keyword)) {

			// --------1.准确匹配模式---------

		} else {
			// --------2.模糊匹配模式---------
			// 添加关键字模糊查找条件
			if (!StringUtils.isBlank(keyword)) {
				String kwss = keyword;
				queryWrapper.and(wr -> wr.like(Student_group.CODE, kwss).or().like(Student_group.NAME, kwss));
			}
			// 添加id使用in语句筛选
			// --------2.模糊匹配模式---------
		}
		for (KeyAndValue od : ordlist) {
			if (od.getValue().equals("desc")) {
				queryWrapper.orderByDesc((String) od.getKey());
			} else {
				queryWrapper.orderByAsc((String) od.getKey());
			}
		}
		list = svcstudent_group.page(page, queryWrapper).getRecords();
		// 清理数据,标注关键字，范围：所有字符型
		for (int i = 0; i < list.size(); i++) {
			// 如果头像为空，加载默认头像
			// if (StringUtils.isBlank(list.get(i).getWechat_headimgurl())
			// || list.get(i).getWechat_headimgurl().equals("0")) {
			// list.get(i).setWechat_headimgurl(Common.userheadimgurl);
			// }
			// 标注关键字，范围：所有字符型
			if (!StringUtils.isBlank(keyword)) {
				// 避免空值出现错误
				try {

					list.get(i).setCode((list.get(i).getCode().replace(keyword, Common.getKeywordSpan(keyword))));
					list.get(i).setName((list.get(i).getName().replace(keyword, Common.getKeywordSpan(keyword))));
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		}

		Pager<Student_group> pager = new Pager<>(page);
		PagerList<Student_group> pagerList = new PagerList<>(pager, list);

		return pagerList;
	}

	/***
	 * 保持新的实体，返回是否成功
	 * 
	 * @param it 实体
	 * @return 是否成功
	 */
	public Boolean saveStudent_group(Student_group it) {

		logger.debug(this.getClass().getName() + ".saveStudent_group()");
		return svcstudent_group.save(it);
	}

	/***
	 * 按id删除，返回是否成功
	 * 
	 * @param id
	 * @return 是否成功
	 */
	public Boolean removeStudent_groupById(Serializable id) {

		logger.debug(this.getClass().getName() + ".removeStudent_groupById()");
		return svcstudent_group.removeById(id);
	}

	/***
	 * 按id修改实体，返回布尔值，是否成功
	 * 
	 * @param it 实体
	 * @return 是否成功
	 */
	public Boolean updateStudent_groupById(Boolean is_actived, String code, String name, Long update_gmt, Integer id) {

		logger.debug(this.getClass().getName() + ".updateStudent_groupById()");
		UpdateWrapper<Student_group> uwr = new UpdateWrapper<>();
		uwr.set(Student_group.IS_ACTIVED, is_actived);
		uwr.set(Student_group.CODE, code);
		uwr.set(Student_group.NAME, name);
		uwr.set(Student_group.UPDATE_GMT, update_gmt);

		uwr.eq(Student_group.ID, id);
		return svcstudent_group.update(uwr);
	}

	/***
	 * 按id修改实体，返回是否成功
	 * 
	 * @param it 实体
	 * @return 是否成功
	 */
	public Boolean updateStudent_groupById(Student_group it) {

		logger.debug(this.getClass().getName() + ".updateStudent_groupById()");
		return svcstudent_group.updateById(it);
	}

	/***
	 * 按id修改实体的IS_ACTIVED字段，返回是否成功
	 * 
	 * @param it 实体
	 * @return 是否成功
	 */
	public Boolean updateStudent_groupById(String operate, Integer id) {

		logger.debug(this.getClass().getName() + ".updateStudent_groupById()IS_ACTIVED");
		UpdateWrapper<Student_group> uwr = new UpdateWrapper<>();
		if (operate.equals("hideitem")) {
			uwr.set(Student_group.IS_ACTIVED, false);
		} else {
			uwr.set(Student_group.IS_ACTIVED, true);
		}
		uwr.eq(Student_group.ID, id);
		return svcstudent_group.update(uwr);
	}

	/***
	 * 统计当前表的数量
	 * 
	 * @return
	 */
	public Integer countStudent_group() {
		return svcstudent_group.count();
	}

	/***
	 * 统计当前表的数量
	 * 
	 * @return
	 */
	public Integer countStudent_group(QueryWrapper<Student_group> queryWrapper) {
		return svcstudent_group.count(queryWrapper);
	}

	/***
	 * 按自定义查询统计,返回map
	 * 
	 * @return
	 */
	public Map<String, Integer> statStudent_groupGroupbyId() {
		List<Map<String, Object>> list = svcstudent_group
				.listMaps(new QueryWrapper<Student_group>().select(Student_group.CODE, "count(*)")
						.eq(Student_group.IS_ACTIVED, 0).groupBy(Student_group.ID).orderByAsc(Student_group.ID));
		return Util.listmapToMap(list, Student_group.CODE, "count(*)");
	}

	/***
	 * 按自定义查询统计,返回map
	 * 
	 * @return
	 */
	public Map<String, Integer> statStudent_groupGroupbyIs_actived() {

		return svcstudent_group.statMapByFieldname(Student_group.IS_ACTIVED);
	}

	// TODO:--------------manageStudent_group-end----------------
	// TODO:--------------manageSubject-begin----------------
	/***
	 * 统计Subject中，指定字段的最大值列表
	 * 
	 * @param fieldname 需要统计的字段
	 * @return Subject表，指定字段中的最大值
	 */
	public Integer maxSubject(String fieldname) {

		int rtv = 0;
		try {
			rtv = svcsubject.max(fieldname);
		} catch (Exception e) {
		}
		return rtv;
	}

	/***
	 * 查询全部，返回一个map，用于数量较少时的映射
	 * 
	 * @return
	 */
	public Map<Integer, String> mapSubject() {
		List<Subject> list = svcsubject.list();
		Map<Integer, String> map = new HashMap<Integer, String>();
		for (int i = 0; i < list.size(); i++) {
			map.put(list.get(i).getId(), list.get(i).getIntro());
		}
		return map;
	}

	public Map<Integer, String> mapSubject(Map<String, Object> params) {
		List<Subject> list = listSubjectByMap(params);
		Map<Integer, String> map = new HashMap<Integer, String>();
		for (int i = 0; i < list.size(); i++) {
			map.put(list.get(i).getId(), list.get(i).getIntro());
		}
		return map;
	}

	/***
	 * 查询，返回Subject列表
	 * 
	 * @return Subject列表
	 */
	public List<Subject> listSubject() {

		Map<String, Object> params = new HashMap<String, Object>();
		return (List<Subject>) svcsubject.listByMap(params);
	}

	/***
	 * 查询，返回Subject列表
	 * 
	 * @param params 查询条件
	 * @return Subject列表
	 */
	public List<Subject> listSubjectByMap(Map<String, Object> params) {

		logger.debug(this.getClass().getName() + ".listSubjectByMap()");
		return (List<Subject>) svcsubject.listByMap(params);
	}

	/***
	 * 查询，返回Subject列表
	 * 
	 * @param params  查询条件（可以多个）
	 * @param ordlist 排序条件（可以多个）
	 * @return Subject列表
	 */
	public List<Subject> listSubjectByMap(Map<String, Object> params, List<KeyAndValue> ordlist) {

		logger.debug(this.getClass().getName() + ".listSubjectByMap()");
		// Map<String, Object> params = new HashMap<String, Object>();
		// params.put(Subject.ID, 0);
		// List<KeyAndValue> ordlist = new ArrayList<KeyAndValue>();
		// ordlist.add(new KeyAndValue(Subject.ID, "desc"));
		QueryWrapper<Subject> queryWrapper = new QueryWrapper<>();
		if (params.size() > 0) {
			queryWrapper.allEq(params);
		}
		for (KeyAndValue od : ordlist) {
			if (od.getValue().equals("desc")) {
				queryWrapper.orderByDesc((String) od.getKey());
			} else {
				queryWrapper.orderByAsc((String) od.getKey());
			}
		}
		return svcsubject.list(queryWrapper);
	}

	/***
	 * 按id查询，返回Subject
	 * 
	 * @param id
	 * @return Subject
	 */
	public Subject getSubjectById(Serializable id) {

		logger.debug(this.getClass().getName() + ".getSubjectById()");
		return svcsubject.getById(id);
	}

	/***
	 * 通过唯一值(数字)查找记录，返回Subject
	 * 
	 * @param infoid
	 * @return Subject
	 */
	public Subject getSubjectBySortid(Serializable sortid) {

		logger.debug(this.getClass().getName() + ".getSubjectBySortid()");
		return svcsubject.getOne(new QueryWrapper<Subject>().eq(Subject.SORTID, sortid).last("limit 1"));
	}

	/***
	 * 通过Map(多个条件)，查询返回Subject
	 * 
	 * @param params 多个条件
	 * @return Subject
	 */
	public Subject getSubjectByMap(Map<String, Object> params) {

		logger.debug(this.getClass().getName() + ".getSubjectByMap()");
		// Map<String, Object> params = new HashMap<String, Object>();
		// params.put(Subject.ID, 0);
		return svcsubject.getOne(new QueryWrapper<Subject>().allEq(params).last("limit 1"));
	}

	/***
	 * 查询，返回Subject列表
	 * 
	 * @param columnname 排序字段
	 * @return Subject列表
	 */
	public List<Subject> listSubjectOrderByAsc(String columnname) {

		logger.debug(this.getClass().getName() + ".listSubjectOrderByAsc()");
		return svcsubject.list(new QueryWrapper<Subject>().orderByAsc(columnname));
	}

	/***
	 * 查询，返回Subject列表
	 * 
	 * @param columnname 排序字段
	 * @return Subject列表
	 */
	public List<Subject> listSubjectOrderByDesc(String columnname) {

		logger.debug(this.getClass().getName() + ".listSubjectOrderByDesc()");
		return svcsubject.list(new QueryWrapper<Subject>().orderByDesc(columnname));
	}

	/***
	 * 查询，返回Subject列表
	 * 
	 * @param columnname 排序字段
	 * @return Subject列表
	 */
	public List<Subject> listSubjectByMapAsc(Map<String, Object> params, String columnname) {

		logger.debug(this.getClass().getName() + ".listSubjectByMapAsc()");
		return svcsubject.list(new QueryWrapper<Subject>().allEq(params).orderByAsc(columnname));
	}

	/***
	 * 查询，返回Subject列表
	 * 
	 * @param columnname 排序字段
	 * @return Subject列表
	 */
	public List<Subject> listSubjectByMapDesc(Map<String, Object> params, String columnname) {

		logger.debug(this.getClass().getName() + ".listSubjectByMapDesc()");
		return svcsubject.list(new QueryWrapper<Subject>().allEq(params).orderByDesc(columnname));
	}

	/***
	 * 
	 * @param pagenumber 页码
	 * @param pagesize   页面显示数量
	 * @return
	 */
	public PagerList<Subject> pagerListSubject(Integer pagenumber, Integer pagesize) {

		return pagerListSubject(pagenumber, pagesize, "", new HashMap<String, String>());
	}

	/***
	 * 
	 * @param pagenumber 页码
	 * @param pagesize   页面显示数量
	 * @param keyword    关键字
	 * @return
	 */
	public PagerList<Subject> pagerListSubject(Integer pagenumber, Integer pagesize, String keyword) {

		return pagerListSubject(pagenumber, pagesize, keyword, new HashMap<String, String>());
	}

	/***
	 * 
	 * @param pagenumber 页码
	 * @param pagesize   页面显示数量
	 * @param keyword    关键字
	 * @param sqlin      用in子句包括的id值
	 * @return
	 */
	public PagerList<Subject> pagerListSubject(Integer pagenumber, Integer pagesize, String keyword,
			Map<String, String> sqlin) {
		return pagerListSubject(pagenumber, pagesize, keyword, sqlin, new HashMap<String, Object>());
	}

	/***
	 * 
	 * @param pagenumber 页码
	 * @param pagesize   页面显示数量
	 * @param keyword    关键字
	 * @param sqlin      用in子句包括的id值
	 * @param params     筛选条件
	 * @return
	 */
	public PagerList<Subject> pagerListSubject(Integer pagenumber, Integer pagesize, String keyword,
			Map<String, String> sqlin, Map<String, Object> params) {
		List<KeyAndValue> ordlist = new ArrayList<KeyAndValue>();
		ordlist.add(new KeyAndValue(Subject.SORTID, "desc"));
		return pagerListSubject(pagenumber, pagesize, keyword, sqlin, params, ordlist);
	}

	/***
	 * 
	 * @param pagenumber 页码
	 * @param pagesize   页面显示数量
	 * @param keyword    关键字
	 * @param sqlin      用in子句包括的id值
	 * @return
	 */
	public PagerList<Subject> pagerListSubject(Integer pagenumber, Integer pagesize, String keyword,
			Map<String, String> sqlin, Map<String, Object> params, List<KeyAndValue> ordlist) {

		Page<Subject> page = new Page<>(pagenumber, pagesize);
		List<Subject> list = null;

		QueryWrapper<Subject> queryWrapper = new QueryWrapper<>();
		// 读取url中是否包含筛选条件

		if (params.size() > 0) {
			queryWrapper.allEq(params);
		}
		if (StringUtils.isBlank(keyword)) {

			// --------1.准确匹配模式---------

		} else {
			// --------2.模糊匹配模式---------
			// 添加关键字模糊查找条件
			if (!StringUtils.isBlank(keyword)) {
				String kwss = keyword;
				queryWrapper.and(wr -> wr.like(Subject.INTRO, kwss).or().like(Subject.NAME, kwss).or()
						.like(Subject.ILLUSTRATION, kwss));
			}
			// 添加id使用in语句筛选
			// --------2.模糊匹配模式---------
		}
		for (KeyAndValue od : ordlist) {
			if (od.getValue().equals("desc")) {
				queryWrapper.orderByDesc((String) od.getKey());
			} else {
				queryWrapper.orderByAsc((String) od.getKey());
			}
		}
		list = svcsubject.page(page, queryWrapper).getRecords();
		// 清理数据,标注关键字，范围：所有字符型
		for (int i = 0; i < list.size(); i++) {
			// 如果头像为空，加载默认头像
			// if (StringUtils.isBlank(list.get(i).getWechat_headimgurl())
			// || list.get(i).getWechat_headimgurl().equals("0")) {
			// list.get(i).setWechat_headimgurl(Common.userheadimgurl);
			// }
			// 标注关键字，范围：所有字符型
			if (!StringUtils.isBlank(keyword)) {
				// 避免空值出现错误
				try {

					list.get(i).setIntro((list.get(i).getIntro().replace(keyword, Common.getKeywordSpan(keyword))));
					list.get(i).setName((list.get(i).getName().replace(keyword, Common.getKeywordSpan(keyword))));
					list.get(i).setIllustration(
							(list.get(i).getIllustration().replace(keyword, Common.getKeywordSpan(keyword))));
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		}

		Pager<Subject> pager = new Pager<>(page);
		PagerList<Subject> pagerList = new PagerList<>(pager, list);

		return pagerList;
	}

	/***
	 * 保持新的实体，返回是否成功
	 * 
	 * @param it 实体
	 * @return 是否成功
	 */
	public Boolean saveSubject(Subject it) {

		logger.debug(this.getClass().getName() + ".saveSubject()");
		return svcsubject.save(it);
	}

	/***
	 * 按id删除，返回是否成功
	 * 
	 * @param id
	 * @return 是否成功
	 */
	public Boolean removeSubjectById(Serializable id) {

		logger.debug(this.getClass().getName() + ".removeSubjectById()");
		return svcsubject.removeById(id);
	}

	/***
	 * 按id修改实体，返回布尔值，是否成功
	 * 
	 * @param it 实体
	 * @return 是否成功
	 */
	public Boolean updateSubjectById(Boolean is_actived, Integer sortid, String intro, String name, String illustration,
			Long update_gmt, Integer id) {

		logger.debug(this.getClass().getName() + ".updateSubjectById()");
		UpdateWrapper<Subject> uwr = new UpdateWrapper<>();
		uwr.set(Subject.IS_ACTIVED, is_actived);
		uwr.set(Subject.SORTID, sortid);
		uwr.set(Subject.INTRO, intro);
		uwr.set(Subject.NAME, name);
		uwr.set(Subject.ILLUSTRATION, illustration);
		uwr.set(Subject.UPDATE_GMT, update_gmt);

		uwr.eq(Subject.ID, id);
		return svcsubject.update(uwr);
	}

	/***
	 * 按id修改实体，返回是否成功
	 * 
	 * @param it 实体
	 * @return 是否成功
	 */
	public Boolean updateSubjectById(Subject it) {

		logger.debug(this.getClass().getName() + ".updateSubjectById()");
		return svcsubject.updateById(it);
	}

	/***
	 * 按id修改实体的IS_ACTIVED字段，返回是否成功
	 * 
	 * @param it 实体
	 * @return 是否成功
	 */
	public Boolean updateSubjectById(String operate, Integer id) {

		logger.debug(this.getClass().getName() + ".updateSubjectById()IS_ACTIVED");
		UpdateWrapper<Subject> uwr = new UpdateWrapper<>();
		if (operate.equals("hideitem")) {
			uwr.set(Subject.IS_ACTIVED, false);
		} else {
			uwr.set(Subject.IS_ACTIVED, true);
		}
		uwr.eq(Subject.ID, id);
		return svcsubject.update(uwr);
	}

	public Boolean moveSubject(String method, String upOrDown, Integer id, String sortColumn) {

		Subject it = svcsubject.getById(id);
		// 读取当前已有信息
		// SELECT * FROM `column` where column_parentid =0 and sortid<4 order by
		// sortid desc limit 1
		QueryWrapper<Subject> queryWrapper = new QueryWrapper<>();
		// 同一个父栏目下
		// queryWrapper.eq(Subject.COLUMN_PARENTID , it.getColumn_parentid());
		if (method.equals(upOrDown)) {
			queryWrapper.lt(sortColumn, it.getSortid());
			queryWrapper.orderByDesc(sortColumn);
		} else {
			queryWrapper.gt(sortColumn, it.getSortid());
			queryWrapper.orderByAsc(sortColumn);
		}
		queryWrapper.last("limit 1");

		Subject target = svcsubject.getOne(queryWrapper);

		if (target == null) {
			// 没有
			return false;
		} else {

			UpdateWrapper<Subject> uwr1 = new UpdateWrapper<>();
			uwr1.set(Subject.SORTID, target.getSortid());
			uwr1.eq(Subject.ID, it.getId());

			UpdateWrapper<Subject> uwr2 = new UpdateWrapper<>();
			uwr2.set(Subject.SORTID, it.getSortid());
			uwr2.eq(Subject.ID, target.getId());

			try {
				svcsubject.update(uwr1);
				svcsubject.update(uwr2);
			} catch (Exception e) {
				e.printStackTrace();
				return false;
			}
			return true;
		}
	}

	/***
	 * 统计当前表的数量
	 * 
	 * @return
	 */
	public Integer countSubject() {
		return svcsubject.count();
	}

	/***
	 * 统计当前表的数量
	 * 
	 * @return
	 */
	public Integer countSubject(QueryWrapper<Subject> queryWrapper) {
		return svcsubject.count(queryWrapper);
	}

	/***
	 * 按自定义查询统计,返回map
	 * 
	 * @return
	 */
	public Map<String, Integer> statSubjectGroupbyId() {
		List<Map<String, Object>> list = svcsubject.listMaps(new QueryWrapper<Subject>()
				.select(Subject.INTRO, "count(*)").eq(Subject.SORTID, 0).groupBy(Subject.ID).orderByAsc(Subject.ID));
		return Util.listmapToMap(list, Subject.INTRO, "count(*)");
	}

	/***
	 * 按自定义查询统计,返回map
	 * 
	 * @return
	 */
	public Map<String, Integer> statSubjectGroupbySortid() {

		return svcsubject.statMapByFieldname(Subject.SORTID);
	}

	// TODO:--------------manageSubject-end----------------
	// TODO:--------------manageSyslog-begin----------------
	/***
	 * 统计Syslog中，指定字段的最大值列表
	 * 
	 * @param fieldname 需要统计的字段
	 * @return Syslog表，指定字段中的最大值
	 */
	public Integer maxSyslog(String fieldname) {

		int rtv = 0;
		try {
			rtv = svcsyslog.max(fieldname);
		} catch (Exception e) {
		}
		return rtv;
	}

	/***
	 * 查询全部，返回一个map，用于数量较少时的映射
	 * 
	 * @return
	 */
	public Map<Integer, String> mapSyslog() {
		List<Syslog> list = svcsyslog.list();
		Map<Integer, String> map = new HashMap<Integer, String>();
		for (int i = 0; i < list.size(); i++) {
			map.put(list.get(i).getId(), list.get(i).getUser_info());
		}
		return map;
	}

	public Map<Integer, String> mapSyslog(Map<String, Object> params) {
		List<Syslog> list = listSyslogByMap(params);
		Map<Integer, String> map = new HashMap<Integer, String>();
		for (int i = 0; i < list.size(); i++) {
			map.put(list.get(i).getId(), list.get(i).getUser_info());
		}
		return map;
	}

	/***
	 * 查询，返回Syslog列表
	 * 
	 * @return Syslog列表
	 */
	public List<Syslog> listSyslog() {

		Map<String, Object> params = new HashMap<String, Object>();
		return (List<Syslog>) svcsyslog.listByMap(params);
	}

	/***
	 * 查询，返回Syslog列表
	 * 
	 * @param params 查询条件
	 * @return Syslog列表
	 */
	public List<Syslog> listSyslogByMap(Map<String, Object> params) {

		logger.debug(this.getClass().getName() + ".listSyslogByMap()");
		return (List<Syslog>) svcsyslog.listByMap(params);
	}

	/***
	 * 查询，返回Syslog列表
	 * 
	 * @param params  查询条件（可以多个）
	 * @param ordlist 排序条件（可以多个）
	 * @return Syslog列表
	 */
	public List<Syslog> listSyslogByMap(Map<String, Object> params, List<KeyAndValue> ordlist) {

		logger.debug(this.getClass().getName() + ".listSyslogByMap()");
		// Map<String, Object> params = new HashMap<String, Object>();
		// params.put(Syslog.ID, 0);
		// List<KeyAndValue> ordlist = new ArrayList<KeyAndValue>();
		// ordlist.add(new KeyAndValue(Syslog.ID, "desc"));
		QueryWrapper<Syslog> queryWrapper = new QueryWrapper<>();
		if (params.size() > 0) {
			queryWrapper.allEq(params);
		}
		for (KeyAndValue od : ordlist) {
			if (od.getValue().equals("desc")) {
				queryWrapper.orderByDesc((String) od.getKey());
			} else {
				queryWrapper.orderByAsc((String) od.getKey());
			}
		}
		return svcsyslog.list(queryWrapper);
	}

	/***
	 * 按id查询，返回Syslog
	 * 
	 * @param id
	 * @return Syslog
	 */
	public Syslog getSyslogById(Serializable id) {

		logger.debug(this.getClass().getName() + ".getSyslogById()");
		return svcsyslog.getById(id);
	}

	/***
	 * 通过唯一值(数字)查找记录，返回Syslog
	 * 
	 * @param infoid
	 * @return Syslog
	 */
	public Syslog getSyslogByUser_id(Serializable user_id) {

		logger.debug(this.getClass().getName() + ".getSyslogByUser_id()");
		return svcsyslog.getOne(new QueryWrapper<Syslog>().eq(Syslog.USER_ID, user_id).last("limit 1"));
	}

	/***
	 * 通过Map(多个条件)，查询返回Syslog
	 * 
	 * @param params 多个条件
	 * @return Syslog
	 */
	public Syslog getSyslogByMap(Map<String, Object> params) {

		logger.debug(this.getClass().getName() + ".getSyslogByMap()");
		// Map<String, Object> params = new HashMap<String, Object>();
		// params.put(Syslog.ID, 0);
		return svcsyslog.getOne(new QueryWrapper<Syslog>().allEq(params).last("limit 1"));
	}

	/***
	 * 查询，返回Syslog列表
	 * 
	 * @param columnname 排序字段
	 * @return Syslog列表
	 */
	public List<Syslog> listSyslogOrderByAsc(String columnname) {

		logger.debug(this.getClass().getName() + ".listSyslogOrderByAsc()");
		return svcsyslog.list(new QueryWrapper<Syslog>().orderByAsc(columnname));
	}

	/***
	 * 查询，返回Syslog列表
	 * 
	 * @param columnname 排序字段
	 * @return Syslog列表
	 */
	public List<Syslog> listSyslogOrderByDesc(String columnname) {

		logger.debug(this.getClass().getName() + ".listSyslogOrderByDesc()");
		return svcsyslog.list(new QueryWrapper<Syslog>().orderByDesc(columnname));
	}

	/***
	 * 查询，返回Syslog列表
	 * 
	 * @param columnname 排序字段
	 * @return Syslog列表
	 */
	public List<Syslog> listSyslogByMapAsc(Map<String, Object> params, String columnname) {

		logger.debug(this.getClass().getName() + ".listSyslogByMapAsc()");
		return svcsyslog.list(new QueryWrapper<Syslog>().allEq(params).orderByAsc(columnname));
	}

	/***
	 * 查询，返回Syslog列表
	 * 
	 * @param columnname 排序字段
	 * @return Syslog列表
	 */
	public List<Syslog> listSyslogByMapDesc(Map<String, Object> params, String columnname) {

		logger.debug(this.getClass().getName() + ".listSyslogByMapDesc()");
		return svcsyslog.list(new QueryWrapper<Syslog>().allEq(params).orderByDesc(columnname));
	}

	/***
	 * 
	 * @param pagenumber 页码
	 * @param pagesize   页面显示数量
	 * @return
	 */
	public PagerList<Syslog> pagerListSyslog(Integer pagenumber, Integer pagesize) {

		return pagerListSyslog(pagenumber, pagesize, "", new HashMap<String, String>());
	}

	/***
	 * 
	 * @param pagenumber 页码
	 * @param pagesize   页面显示数量
	 * @param keyword    关键字
	 * @return
	 */
	public PagerList<Syslog> pagerListSyslog(Integer pagenumber, Integer pagesize, String keyword) {

		return pagerListSyslog(pagenumber, pagesize, keyword, new HashMap<String, String>());
	}

	/***
	 * 
	 * @param pagenumber 页码
	 * @param pagesize   页面显示数量
	 * @param keyword    关键字
	 * @param sqlin      用in子句包括的id值
	 * @return
	 */
	public PagerList<Syslog> pagerListSyslog(Integer pagenumber, Integer pagesize, String keyword,
			Map<String, String> sqlin) {
		return pagerListSyslog(pagenumber, pagesize, keyword, sqlin, new HashMap<String, Object>());
	}

	/***
	 * 
	 * @param pagenumber 页码
	 * @param pagesize   页面显示数量
	 * @param keyword    关键字
	 * @param sqlin      用in子句包括的id值
	 * @param params     筛选条件
	 * @return
	 */
	public PagerList<Syslog> pagerListSyslog(Integer pagenumber, Integer pagesize, String keyword,
			Map<String, String> sqlin, Map<String, Object> params) {
		List<KeyAndValue> ordlist = new ArrayList<KeyAndValue>();
		ordlist.add(new KeyAndValue(Syslog.ID, "desc"));
		return pagerListSyslog(pagenumber, pagesize, keyword, sqlin, params, ordlist);
	}

	/***
	 * 
	 * @param pagenumber 页码
	 * @param pagesize   页面显示数量
	 * @param keyword    关键字
	 * @param sqlin      用in子句包括的id值
	 * @return
	 */
	public PagerList<Syslog> pagerListSyslog(Integer pagenumber, Integer pagesize, String keyword,
			Map<String, String> sqlin, Map<String, Object> params, List<KeyAndValue> ordlist) {

		Page<Syslog> page = new Page<>(pagenumber, pagesize);
		List<Syslog> list = null;

		QueryWrapper<Syslog> queryWrapper = new QueryWrapper<>();
		// 读取url中是否包含筛选条件
		String user_id = sqlin.get(Syslog.USER_ID + "_id");

		if (params.size() > 0) {
			queryWrapper.allEq(params);
		}
		if (StringUtils.isBlank(keyword) && StringUtils.isBlank(user_id)) {

			// --------1.准确匹配模式---------

		} else {
			// --------2.模糊匹配模式---------
			// 添加关键字模糊查找条件
			if (!StringUtils.isBlank(keyword)) {
				String kwss = keyword;
				queryWrapper.and(wr -> wr.like(Syslog.USER_INFO, kwss).or().like(Syslog.USER_IP, kwss).or()
						.like(Syslog.REQUEST_CONTENT, kwss).or().like(Syslog.URL, kwss));
			}
			// 添加id使用in语句筛选
			if (!StringUtils.isBlank(user_id)) {
				queryWrapper.inSql(Syslog.USER_ID, user_id);
			}
			// --------2.模糊匹配模式---------
		}
		for (KeyAndValue od : ordlist) {
			if (od.getValue().equals("desc")) {
				queryWrapper.orderByDesc((String) od.getKey());
			} else {
				queryWrapper.orderByAsc((String) od.getKey());
			}
		}
		list = svcsyslog.page(page, queryWrapper).getRecords();
		// 清理数据,标注关键字，范围：所有字符型
		for (int i = 0; i < list.size(); i++) {
			// 如果头像为空，加载默认头像
			// if (StringUtils.isBlank(list.get(i).getWechat_headimgurl())
			// || list.get(i).getWechat_headimgurl().equals("0")) {
			// list.get(i).setWechat_headimgurl(Common.userheadimgurl);
			// }
			// 标注关键字，范围：所有字符型
			if (!StringUtils.isBlank(keyword)) {
				// 避免空值出现错误
				try {

					list.get(i).setUser_info(
							(list.get(i).getUser_info().replace(keyword, Common.getKeywordSpan(keyword))));
					list.get(i).setUser_ip((list.get(i).getUser_ip().replace(keyword, Common.getKeywordSpan(keyword))));
					list.get(i).setRequest_content(
							(list.get(i).getRequest_content().replace(keyword, Common.getKeywordSpan(keyword))));
					list.get(i).setUrl((list.get(i).getUrl().replace(keyword, Common.getKeywordSpan(keyword))));
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		}

		Pager<Syslog> pager = new Pager<>(page);
		PagerList<Syslog> pagerList = new PagerList<>(pager, list);

		return pagerList;
	}

	/***
	 * 保持新的实体，返回是否成功
	 * 
	 * @param it 实体
	 * @return 是否成功
	 */
	public Boolean saveSyslog(Syslog it) {

		logger.debug(this.getClass().getName() + ".saveSyslog()");
		return svcsyslog.save(it);
	}

	/***
	 * 按id删除，返回是否成功
	 * 
	 * @param id
	 * @return 是否成功
	 */
	public Boolean removeSyslogById(Serializable id) {

		logger.debug(this.getClass().getName() + ".removeSyslogById()");
		return svcsyslog.removeById(id);
	}

	/***
	 * 按id修改实体，返回布尔值，是否成功
	 * 
	 * @param it 实体
	 * @return 是否成功
	 */
	public Boolean updateSyslogById(Integer user_id, String user_info, String user_ip, Integer spend_time,
			String request_content, String url, Boolean is_attack, Integer id) {

		logger.debug(this.getClass().getName() + ".updateSyslogById()");
		UpdateWrapper<Syslog> uwr = new UpdateWrapper<>();
		uwr.set(Syslog.USER_ID, user_id);
		uwr.set(Syslog.USER_INFO, user_info);
		uwr.set(Syslog.USER_IP, user_ip);
		uwr.set(Syslog.SPEND_TIME, spend_time);
		uwr.set(Syslog.REQUEST_CONTENT, request_content);
		uwr.set(Syslog.URL, url);
		uwr.set(Syslog.IS_ATTACK, is_attack);

		uwr.eq(Syslog.ID, id);
		return svcsyslog.update(uwr);
	}

	/***
	 * 按id修改实体，返回是否成功
	 * 
	 * @param it 实体
	 * @return 是否成功
	 */
	public Boolean updateSyslogById(Syslog it) {

		logger.debug(this.getClass().getName() + ".updateSyslogById()");
		return svcsyslog.updateById(it);
	}

	/***
	 * 统计当前表的数量
	 * 
	 * @return
	 */
	public Integer countSyslog() {
		return svcsyslog.count();
	}

	/***
	 * 统计当前表的数量
	 * 
	 * @return
	 */
	public Integer countSyslog(QueryWrapper<Syslog> queryWrapper) {
		return svcsyslog.count(queryWrapper);
	}

	/***
	 * 按自定义查询统计,返回map
	 * 
	 * @return
	 */
	public Map<String, Integer> statSyslogGroupbyId() {
		List<Map<String, Object>> list = svcsyslog.listMaps(new QueryWrapper<Syslog>()
				.select(Syslog.USER_INFO, "count(*)").eq(Syslog.USER_ID, 0).groupBy(Syslog.ID).orderByAsc(Syslog.ID));
		return Util.listmapToMap(list, Syslog.USER_INFO, "count(*)");
	}

	/***
	 * 按自定义查询统计,返回map
	 * 
	 * @return
	 */
	public Map<String, Integer> statSyslogGroupbyUser_id() {

		return svcsyslog.statMapByFieldname(Syslog.USER_ID);
	}

	// TODO:--------------manageSyslog-end----------------
	// TODO:--------------manageUser-begin----------------
	/***
	 * 统计User中，指定字段的最大值列表
	 * 
	 * @param fieldname 需要统计的字段
	 * @return User表，指定字段中的最大值
	 */
	public Integer maxUser(String fieldname) {

		int rtv = 0;
		try {
			rtv = svcuser.max(fieldname);
		} catch (Exception e) {
		}
		return rtv;
	}

	/***
	 * 查询全部，返回一个map，用于数量较少时的映射
	 * 
	 * @return
	 */
	public Map<Integer, String> mapUser() {
		List<User> list = svcuser.list();
		Map<Integer, String> map = new HashMap<Integer, String>();
		for (int i = 0; i < list.size(); i++) {
			map.put(list.get(i).getId(), list.get(i).getName());
		}
		return map;
	}

	public Map<Integer, String> mapUser(Map<String, Object> params) {
		List<User> list = listUserByMap(params);
		Map<Integer, String> map = new HashMap<Integer, String>();
		for (int i = 0; i < list.size(); i++) {
			map.put(list.get(i).getId(), list.get(i).getName());
		}
		return map;
	}

	/***
	 * 查询，返回User列表
	 * 
	 * @return User列表
	 */
	public List<User> listUser() {

		Map<String, Object> params = new HashMap<String, Object>();
		return (List<User>) svcuser.listByMap(params);
	}

	/***
	 * 查询，返回User列表
	 * 
	 * @param params 查询条件
	 * @return User列表
	 */
	public List<User> listUserByMap(Map<String, Object> params) {
		logger.debug(this.getClass().getName() + ".listUserByMap()");
		return (List<User>) svcuser.listByMap(params);
	}

	/***
	 * 查询，返回User列表
	 * @param params  查询条件（可以多个）
	 * @param ordlist 排序条件（可以多个）
	 * @return User列表
	 */
	public List<User> listUserByMap(Map<String, Object> params, List<KeyAndValue> ordlist) {

		logger.debug(this.getClass().getName() + ".listUserByMap()");
		// Map<String, Object> params = new HashMap<String, Object>();
		// params.put(User.ID, 0);
		// List<KeyAndValue> ordlist = new ArrayList<KeyAndValue>();
		// ordlist.add(new KeyAndValue(User.ID, "desc"));
		QueryWrapper<User> queryWrapper = new QueryWrapper<>();
		if (params.size() > 0) {
			queryWrapper.allEq(params);
		}
		for (KeyAndValue od : ordlist) {
			if (od.getValue().equals("desc")) {
				queryWrapper.orderByDesc((String) od.getKey());
			} else {
				queryWrapper.orderByAsc((String) od.getKey());
			}
		}
		return svcuser.list(queryWrapper);
	}

	/***
	 * 按id查询，返回User
	 * 
	 * @param id
	 * @return User
	 */
	public User getUserById(Serializable id) {

		logger.debug(this.getClass().getName() + ".getUserById()");
		return svcuser.getById(id);
	}

	/***
	 * 通过唯一值(数字)查找记录，返回User
	 * 
	 * @param infoid
	 * @return User
	 */
	public User getUserByLogin_method(Serializable login_method) {

		logger.debug(this.getClass().getName() + ".getUserByLogin_method()");
		return svcuser.getOne(new QueryWrapper<User>().eq(User.LOGIN_METHOD, login_method).last("limit 1"));
	}

	/***
	 * 通过Map(多个条件)，查询返回User
	 * 
	 * @param params 多个条件
	 * @return User
	 */
	public User getUserByMap(Map<String, Object> params) {

		logger.debug(this.getClass().getName() + ".getUserByMap()");
		// Map<String, Object> params = new HashMap<String, Object>();
		// params.put(User.ID, 0);
		return svcuser.getOne(new QueryWrapper<User>().allEq(params).last("limit 1"));
	}

	/***
	 * 查询，返回User列表
	 * 
	 * @param columnname 排序字段
	 * @return User列表
	 */
	public List<User> listUserOrderByAsc(String columnname) {

		logger.debug(this.getClass().getName() + ".listUserOrderByAsc()");
		return svcuser.list(new QueryWrapper<User>().orderByAsc(columnname));
	}

	/***
	 * 查询，返回User列表
	 * 
	 * @param columnname 排序字段
	 * @return User列表
	 */
	public List<User> listUserOrderByDesc(String columnname) {

		logger.debug(this.getClass().getName() + ".listUserOrderByDesc()");
		return svcuser.list(new QueryWrapper<User>().orderByDesc(columnname));
	}

	/***
	 * 查询，返回User列表
	 * 
	 * @param columnname 排序字段
	 * @return User列表
	 */
	public List<User> listUserByMapAsc(Map<String, Object> params, String columnname) {

		logger.debug(this.getClass().getName() + ".listUserByMapAsc()");
		return svcuser.list(new QueryWrapper<User>().allEq(params).orderByAsc(columnname));
	}

	/***
	 * 查询，返回User列表
	 * 
	 * @param columnname 排序字段
	 * @return User列表
	 */
	public List<User> listUserByMapDesc(Map<String, Object> params, String columnname) {

		logger.debug(this.getClass().getName() + ".listUserByMapDesc()");
		return svcuser.list(new QueryWrapper<User>().allEq(params).orderByDesc(columnname));
	}

	/***
	 * 
	 * @param pagenumber 页码
	 * @param pagesize   页面显示数量
	 * @return
	 */
	public PagerList<User> pagerListUser(Integer pagenumber, Integer pagesize) {

		return pagerListUser(pagenumber, pagesize, "", new HashMap<String, String>());
	}

	/***
	 * 
	 * @param pagenumber 页码
	 * @param pagesize   页面显示数量
	 * @param keyword    关键字
	 * @return
	 */
	public PagerList<User> pagerListUser(Integer pagenumber, Integer pagesize, String keyword) {

		return pagerListUser(pagenumber, pagesize, keyword, new HashMap<String, String>());
	}

	/***
	 * 
	 * @param pagenumber 页码
	 * @param pagesize   页面显示数量
	 * @param keyword    关键字
	 * @param sqlin      用in子句包括的id值
	 * @return
	 */
	public PagerList<User> pagerListUser(Integer pagenumber, Integer pagesize, String keyword,
			Map<String, String> sqlin) {
		return pagerListUser(pagenumber, pagesize, keyword, sqlin, new HashMap<String, Object>());
	}

	/***
	 * 
	 * @param pagenumber 页码
	 * @param pagesize   页面显示数量
	 * @param keyword    关键字
	 * @param sqlin      用in子句包括的id值
	 * @param params     筛选条件
	 * @return
	 */
	public PagerList<User> pagerListUser(Integer pagenumber, Integer pagesize, String keyword,
			Map<String, String> sqlin, Map<String, Object> params) {
		List<KeyAndValue> ordlist = new ArrayList<KeyAndValue>();
		ordlist.add(new KeyAndValue(User.ID, "desc"));
		return pagerListUser(pagenumber, pagesize, keyword, sqlin, params, ordlist);
	}

	/***
	 * 
	 * @param pagenumber 页码
	 * @param pagesize   页面显示数量
	 * @param keyword    关键字
	 * @param sqlin      用in子句包括的id值
	 * @return
	 */
	public PagerList<User> pagerListUser(Integer pagenumber, Integer pagesize, String keyword,
			Map<String, String> sqlin, Map<String, Object> params, List<KeyAndValue> ordlist) {

		Page<User> page = new Page<>(pagenumber, pagesize);
		List<User> list = null;

		QueryWrapper<User> queryWrapper = new QueryWrapper<>();
		// 读取url中是否包含筛选条件

		if (params.size() > 0) {
			queryWrapper.allEq(params);
		}
		if (StringUtils.isBlank(keyword)) {

			// --------1.准确匹配模式---------

		} else {
			// --------2.模糊匹配模式---------
			// 添加关键字模糊查找条件
			if (!StringUtils.isBlank(keyword)) {
				String kwss = keyword;
				queryWrapper.and(wr -> wr.like(User.NAME, kwss).or().like(User.LOGIN_NAME, kwss).or()
						.like(User.LOGIN_PASSWORD, kwss).or().like(User.EMAIL, kwss).or().like(User.TELEPHONE, kwss)
						.or().like(User.QQ, kwss).or().like(User.WECHAT_OPENID, kwss).or()
						.like(User.WECHAT_NICKNAME, kwss).or().like(User.WECHAT_HEADIMGURL, kwss));
			}
			// 添加id使用in语句筛选
			// --------2.模糊匹配模式---------
		}
		for (KeyAndValue od : ordlist) {
			if (od.getValue().equals("desc")) {
				queryWrapper.orderByDesc((String) od.getKey());
			} else {
				queryWrapper.orderByAsc((String) od.getKey());
			}
		}
		list = svcuser.page(page, queryWrapper).getRecords();
		// 清理数据,标注关键字，范围：所有字符型
		for (int i = 0; i < list.size(); i++) {
			// 如果头像为空，加载默认头像
			// if (StringUtils.isBlank(list.get(i).getWechat_headimgurl())
			// || list.get(i).getWechat_headimgurl().equals("0")) {
			// list.get(i).setWechat_headimgurl(Common.userheadimgurl);
			// }
			// 标注关键字，范围：所有字符型
			if (!StringUtils.isBlank(keyword)) {
				// 避免空值出现错误
				try {

					list.get(i).setName((list.get(i).getName().replace(keyword, Common.getKeywordSpan(keyword))));
					list.get(i).setLogin_name(
							(list.get(i).getLogin_name().replace(keyword, Common.getKeywordSpan(keyword))));
					list.get(i).setLogin_name_digest(
							(list.get(i).getLogin_name_digest().replace(keyword, Common.getKeywordSpan(keyword))));
					list.get(i).setLogin_password(
							(list.get(i).getLogin_password().replace(keyword, Common.getKeywordSpan(keyword))));
					list.get(i).setLogin_password_digest(
							(list.get(i).getLogin_password_digest().replace(keyword, Common.getKeywordSpan(keyword))));
					list.get(i).setEmail((list.get(i).getEmail().replace(keyword, Common.getKeywordSpan(keyword))));
					list.get(i).setTelephone(
							(list.get(i).getTelephone().replace(keyword, Common.getKeywordSpan(keyword))));
					list.get(i).setQq((list.get(i).getQq().replace(keyword, Common.getKeywordSpan(keyword))));
					list.get(i).setWechat_openid(
							(list.get(i).getWechat_openid().replace(keyword, Common.getKeywordSpan(keyword))));
					list.get(i).setWechat_nickname(
							(list.get(i).getWechat_nickname().replace(keyword, Common.getKeywordSpan(keyword))));
					list.get(i).setWechat_headimgurl(
							(list.get(i).getWechat_headimgurl().replace(keyword, Common.getKeywordSpan(keyword))));
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		}

		Pager<User> pager = new Pager<>(page);
		PagerList<User> pagerList = new PagerList<>(pager, list);

		return pagerList;
	}

	/***
	 * 保持新的实体，返回是否成功
	 * 
	 * @param it 实体
	 * @return 是否成功
	 */
	public Boolean saveUser(User it) {

		logger.debug(this.getClass().getName() + ".saveUser()");
		return svcuser.save(it);
	}

	/***
	 * 按id删除，返回是否成功
	 * 
	 * @param id
	 * @return 是否成功
	 */
	public Boolean removeUserById(Serializable id) {

		logger.debug(this.getClass().getName() + ".removeUserById()");
		return svcuser.removeById(id);
	}

	/***
	 * 按id修改实体，返回布尔值，是否成功
	 * 
	 * @param it 实体
	 * @return 是否成功
	 */
	public Boolean updateUserById(String name, String login_name, String login_name_digest, String login_password,
			String login_password_digest, String email, Boolean is_actived, String telephone, String qq,
			String wechat_openid, String wechat_nickname, String wechat_headimgurl, Integer login_method,
			Integer update_userid, Long update_gmt, Integer id) {

		logger.debug(this.getClass().getName() + ".updateUserById()");
		UpdateWrapper<User> uwr = new UpdateWrapper<>();
		uwr.set(User.NAME, name);
		uwr.set(User.LOGIN_NAME, login_name);
		uwr.set(User.LOGIN_NAME_DIGEST, login_name_digest);
		uwr.set(User.LOGIN_PASSWORD, login_password);
		uwr.set(User.LOGIN_PASSWORD_DIGEST, login_password_digest);
		uwr.set(User.EMAIL, email);
		uwr.set(User.IS_ACTIVED, is_actived);
		uwr.set(User.TELEPHONE, telephone);
		uwr.set(User.QQ, qq);
		uwr.set(User.WECHAT_OPENID, wechat_openid);
		uwr.set(User.WECHAT_NICKNAME, wechat_nickname);
		uwr.set(User.WECHAT_HEADIMGURL, wechat_headimgurl);
		uwr.set(User.LOGIN_METHOD, login_method);
		uwr.set(User.UPDATE_USERID, update_userid);
		uwr.set(User.UPDATE_GMT, update_gmt);

		uwr.eq(User.ID, id);
		return svcuser.update(uwr);
	}

	/***
	 * 按id修改实体，返回是否成功
	 * 
	 * @param it 实体
	 * @return 是否成功
	 */
	public Boolean updateUserById(User it) {

		logger.debug(this.getClass().getName() + ".updateUserById()");
		return svcuser.updateById(it);
	}

	/***
	 * 按id修改实体的IS_ACTIVED字段，返回是否成功
	 * 
	 * @param it 实体
	 * @return 是否成功
	 */
	public Boolean updateUserById(String operate, Integer id) {

		logger.debug(this.getClass().getName() + ".updateUserById()IS_ACTIVED");
		UpdateWrapper<User> uwr = new UpdateWrapper<>();
		if (operate.equals("hideitem")) {
			uwr.set(User.IS_ACTIVED, false);
		} else {
			uwr.set(User.IS_ACTIVED, true);
		}
		uwr.eq(User.ID, id);
		return svcuser.update(uwr);
	}

	/***
	 * 统计当前表的数量
	 * 
	 * @return
	 */
	public Integer countUser() {
		return svcuser.count();
	}

	/***
	 * 统计当前表的数量
	 * 
	 * @return
	 */
	public Integer countUser(QueryWrapper<User> queryWrapper) {
		return svcuser.count(queryWrapper);
	}

	/***
	 * 按自定义查询统计,返回map
	 * 
	 * @return
	 */
	public Map<String, Integer> statUserGroupbyId() {
		List<Map<String, Object>> list = svcuser.listMaps(new QueryWrapper<User>().select(User.NAME, "count(*)")
				.eq(User.LOGIN_METHOD, 0).groupBy(User.ID).orderByAsc(User.ID));
		return Util.listmapToMap(list, User.NAME, "count(*)");
	}

	/***
	 * 按自定义查询统计,返回map
	 * 
	 * @return
	 */
	public Map<String, Integer> statUserGroupbyLogin_method() {

		return svcuser.statMapByFieldname(User.LOGIN_METHOD);
	}

	// TODO:--------------manageUser-end----------------
	// TODO:--------------manageUser_login_log-begin----------------
	/***
	 * 统计User_login_log中，指定字段的最大值列表
	 * 
	 * @param fieldname 需要统计的字段
	 * @return User_login_log表，指定字段中的最大值
	 */
	public Integer maxUser_login_log(String fieldname) {

		int rtv = 0;
		try {
			rtv = svcuser_login_log.max(fieldname);
		} catch (Exception e) {
		}
		return rtv;
	}

	/***
	 * 查询全部，返回一个map，用于数量较少时的映射
	 * 
	 * @return
	 */
	public Map<Integer, String> mapUser_login_log() {
		List<User_login_log> list = svcuser_login_log.list();
		Map<Integer, String> map = new HashMap<Integer, String>();
		for (int i = 0; i < list.size(); i++) {
			map.put(list.get(i).getId(), list.get(i).getUser_ip());
		}
		return map;
	}

	public Map<Integer, String> mapUser_login_log(Map<String, Object> params) {
		List<User_login_log> list = listUser_login_logByMap(params);
		Map<Integer, String> map = new HashMap<Integer, String>();
		for (int i = 0; i < list.size(); i++) {
			map.put(list.get(i).getId(), list.get(i).getUser_ip());
		}
		return map;
	}

	/***
	 * 查询，返回User_login_log列表
	 * 
	 * @return User_login_log列表
	 */
	public List<User_login_log> listUser_login_log() {

		Map<String, Object> params = new HashMap<String, Object>();
		return (List<User_login_log>) svcuser_login_log.listByMap(params);
	}

	/***
	 * 查询，返回User_login_log列表
	 * 
	 * @param params 查询条件
	 * @return User_login_log列表
	 */
	public List<User_login_log> listUser_login_logByMap(Map<String, Object> params) {

		logger.debug(this.getClass().getName() + ".listUser_login_logByMap()");
		return (List<User_login_log>) svcuser_login_log.listByMap(params);
	}

	/***
	 * 查询，返回User_login_log列表
	 * 
	 * @param params  查询条件（可以多个）
	 * @param ordlist 排序条件（可以多个）
	 * @return User_login_log列表
	 */
	public List<User_login_log> listUser_login_logByMap(Map<String, Object> params, List<KeyAndValue> ordlist) {

		logger.debug(this.getClass().getName() + ".listUser_login_logByMap()");
		// Map<String, Object> params = new HashMap<String, Object>();
		// params.put(User_login_log.ID, 0);
		// List<KeyAndValue> ordlist = new ArrayList<KeyAndValue>();
		// ordlist.add(new KeyAndValue(User_login_log.ID, "desc"));
		QueryWrapper<User_login_log> queryWrapper = new QueryWrapper<>();
		if (params.size() > 0) {
			queryWrapper.allEq(params);
		}
		for (KeyAndValue od : ordlist) {
			if (od.getValue().equals("desc")) {
				queryWrapper.orderByDesc((String) od.getKey());
			} else {
				queryWrapper.orderByAsc((String) od.getKey());
			}
		}
		return svcuser_login_log.list(queryWrapper);
	}

	/***
	 * 按id查询，返回User_login_log
	 * 
	 * @param id
	 * @return User_login_log
	 */
	public User_login_log getUser_login_logById(Serializable id) {

		logger.debug(this.getClass().getName() + ".getUser_login_logById()");
		return svcuser_login_log.getById(id);
	}

	/***
	 * 通过唯一值(数字)查找记录，返回User_login_log
	 * 
	 * @param infoid
	 * @return User_login_log
	 */
	public User_login_log getUser_login_logByUser_id(Serializable user_id) {

		logger.debug(this.getClass().getName() + ".getUser_login_logByUser_id()");
		return svcuser_login_log
				.getOne(new QueryWrapper<User_login_log>().eq(User_login_log.USER_ID, user_id).last("limit 1"));
	}

	/***
	 * 通过Map(多个条件)，查询返回User_login_log
	 * 
	 * @param params 多个条件
	 * @return User_login_log
	 */
	public User_login_log getUser_login_logByMap(Map<String, Object> params) {

		logger.debug(this.getClass().getName() + ".getUser_login_logByMap()");
		// Map<String, Object> params = new HashMap<String, Object>();
		// params.put(User_login_log.ID, 0);
		return svcuser_login_log.getOne(new QueryWrapper<User_login_log>().allEq(params).last("limit 1"));
	}

	/***
	 * 查询，返回User_login_log列表
	 * 
	 * @param columnname 排序字段
	 * @return User_login_log列表
	 */
	public List<User_login_log> listUser_login_logOrderByAsc(String columnname) {

		logger.debug(this.getClass().getName() + ".listUser_login_logOrderByAsc()");
		return svcuser_login_log.list(new QueryWrapper<User_login_log>().orderByAsc(columnname));
	}

	/***
	 * 查询，返回User_login_log列表
	 * 
	 * @param columnname 排序字段
	 * @return User_login_log列表
	 */
	public List<User_login_log> listUser_login_logOrderByDesc(String columnname) {

		logger.debug(this.getClass().getName() + ".listUser_login_logOrderByDesc()");
		return svcuser_login_log.list(new QueryWrapper<User_login_log>().orderByDesc(columnname));
	}

	/***
	 * 查询，返回User_login_log列表
	 * 
	 * @param columnname 排序字段
	 * @return User_login_log列表
	 */
	public List<User_login_log> listUser_login_logByMapAsc(Map<String, Object> params, String columnname) {

		logger.debug(this.getClass().getName() + ".listUser_login_logByMapAsc()");
		return svcuser_login_log.list(new QueryWrapper<User_login_log>().allEq(params).orderByAsc(columnname));
	}

	/***
	 * 查询，返回User_login_log列表
	 * 
	 * @param columnname 排序字段
	 * @return User_login_log列表
	 */
	public List<User_login_log> listUser_login_logByMapDesc(Map<String, Object> params, String columnname) {

		logger.debug(this.getClass().getName() + ".listUser_login_logByMapDesc()");
		return svcuser_login_log.list(new QueryWrapper<User_login_log>().allEq(params).orderByDesc(columnname));
	}

	/***
	 * 
	 * @param pagenumber 页码
	 * @param pagesize   页面显示数量
	 * @return
	 */
	public PagerList<User_login_log> pagerListUser_login_log(Integer pagenumber, Integer pagesize) {

		return pagerListUser_login_log(pagenumber, pagesize, "", new HashMap<String, String>());
	}

	/***
	 * 
	 * @param pagenumber 页码
	 * @param pagesize   页面显示数量
	 * @param keyword    关键字
	 * @return
	 */
	public PagerList<User_login_log> pagerListUser_login_log(Integer pagenumber, Integer pagesize, String keyword) {

		return pagerListUser_login_log(pagenumber, pagesize, keyword, new HashMap<String, String>());
	}

	/***
	 * 
	 * @param pagenumber 页码
	 * @param pagesize   页面显示数量
	 * @param keyword    关键字
	 * @param sqlin      用in子句包括的id值
	 * @return
	 */
	public PagerList<User_login_log> pagerListUser_login_log(Integer pagenumber, Integer pagesize, String keyword,
			Map<String, String> sqlin) {
		return pagerListUser_login_log(pagenumber, pagesize, keyword, sqlin, new HashMap<String, Object>());
	}

	/***
	 * 
	 * @param pagenumber 页码
	 * @param pagesize   页面显示数量
	 * @param keyword    关键字
	 * @param sqlin      用in子句包括的id值
	 * @param params     筛选条件
	 * @return
	 */
	public PagerList<User_login_log> pagerListUser_login_log(Integer pagenumber, Integer pagesize, String keyword,
			Map<String, String> sqlin, Map<String, Object> params) {
		List<KeyAndValue> ordlist = new ArrayList<KeyAndValue>();
		ordlist.add(new KeyAndValue(User_login_log.ID, "desc"));
		return pagerListUser_login_log(pagenumber, pagesize, keyword, sqlin, params, ordlist);
	}

	/***
	 * 
	 * @param pagenumber 页码
	 * @param pagesize   页面显示数量
	 * @param keyword    关键字
	 * @param sqlin      用in子句包括的id值
	 * @return
	 */
	public PagerList<User_login_log> pagerListUser_login_log(Integer pagenumber, Integer pagesize, String keyword,
			Map<String, String> sqlin, Map<String, Object> params, List<KeyAndValue> ordlist) {

		Page<User_login_log> page = new Page<>(pagenumber, pagesize);
		List<User_login_log> list = null;

		QueryWrapper<User_login_log> queryWrapper = new QueryWrapper<>();
		// 读取url中是否包含筛选条件
		String user_id = sqlin.get(User_login_log.USER_ID + "_id");

		if (params.size() > 0) {
			queryWrapper.allEq(params);
		}
		if (StringUtils.isBlank(keyword) && StringUtils.isBlank(user_id)) {

			// --------1.准确匹配模式---------

		} else {
			// --------2.模糊匹配模式---------
			// 添加关键字模糊查找条件
			if (!StringUtils.isBlank(keyword)) {
				String kwss = keyword;
				queryWrapper.and(wr -> wr.like(User_login_log.USER_IP, kwss).or()
						.like(User_login_log.OPERATING_SYSTEM, kwss).or().like(User_login_log.BROWSER, kwss));
			}
			// 添加id使用in语句筛选
			if (!StringUtils.isBlank(user_id)) {
				queryWrapper.inSql(User_login_log.USER_ID, user_id);
			}
			// --------2.模糊匹配模式---------
		}
		for (KeyAndValue od : ordlist) {
			if (od.getValue().equals("desc")) {
				queryWrapper.orderByDesc((String) od.getKey());
			} else {
				queryWrapper.orderByAsc((String) od.getKey());
			}
		}
		list = svcuser_login_log.page(page, queryWrapper).getRecords();
		// 清理数据,标注关键字，范围：所有字符型
		for (int i = 0; i < list.size(); i++) {
			// 如果头像为空，加载默认头像
			// if (StringUtils.isBlank(list.get(i).getWechat_headimgurl())
			// || list.get(i).getWechat_headimgurl().equals("0")) {
			// list.get(i).setWechat_headimgurl(Common.userheadimgurl);
			// }
			// 标注关键字，范围：所有字符型
			if (!StringUtils.isBlank(keyword)) {
				// 避免空值出现错误
				try {

					list.get(i).setUser_ip((list.get(i).getUser_ip().replace(keyword, Common.getKeywordSpan(keyword))));
					list.get(i).setOperating_system(
							(list.get(i).getOperating_system().replace(keyword, Common.getKeywordSpan(keyword))));
					list.get(i).setBrowser((list.get(i).getBrowser().replace(keyword, Common.getKeywordSpan(keyword))));
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		}

		Pager<User_login_log> pager = new Pager<>(page);
		PagerList<User_login_log> pagerList = new PagerList<>(pager, list);

		return pagerList;
	}

	/***
	 * 保持新的实体，返回是否成功
	 * 
	 * @param it 实体
	 * @return 是否成功
	 */
	public Boolean saveUser_login_log(User_login_log it) {

		logger.debug(this.getClass().getName() + ".saveUser_login_log()");
		return svcuser_login_log.save(it);
	}

	/***
	 * 按id删除，返回是否成功
	 * 
	 * @param id
	 * @return 是否成功
	 */
	public Boolean removeUser_login_logById(Serializable id) {

		logger.debug(this.getClass().getName() + ".removeUser_login_logById()");
		return svcuser_login_log.removeById(id);
	}

	/***
	 * 按id修改实体，返回布尔值，是否成功
	 * 
	 * @param it 实体
	 * @return 是否成功
	 */
	public Boolean updateUser_login_logById(Long login_gmt, String user_ip, Integer user_id, String operating_system,
			String browser, Integer id) {

		logger.debug(this.getClass().getName() + ".updateUser_login_logById()");
		UpdateWrapper<User_login_log> uwr = new UpdateWrapper<>();
		uwr.set(User_login_log.LOGIN_GMT, login_gmt);
		uwr.set(User_login_log.USER_IP, user_ip);
		uwr.set(User_login_log.USER_ID, user_id);
		uwr.set(User_login_log.OPERATING_SYSTEM, operating_system);
		uwr.set(User_login_log.BROWSER, browser);

		uwr.eq(User_login_log.ID, id);
		return svcuser_login_log.update(uwr);
	}

	/***
	 * 按id修改实体，返回是否成功
	 * 
	 * @param it 实体
	 * @return 是否成功
	 */
	public Boolean updateUser_login_logById(User_login_log it) {

		logger.debug(this.getClass().getName() + ".updateUser_login_logById()");
		return svcuser_login_log.updateById(it);
	}

	/***
	 * 统计当前表的数量
	 * 
	 * @return
	 */
	public Integer countUser_login_log() {
		return svcuser_login_log.count();
	}

	/***
	 * 统计当前表的数量
	 * 
	 * @return
	 */
	public Integer countUser_login_log(QueryWrapper<User_login_log> queryWrapper) {
		return svcuser_login_log.count(queryWrapper);
	}

	/***
	 * 按自定义查询统计,返回map
	 * 
	 * @return
	 */
	public Map<String, Integer> statUser_login_logGroupbyId() {
		List<Map<String, Object>> list = svcuser_login_log
				.listMaps(new QueryWrapper<User_login_log>().select(User_login_log.USER_IP, "count(*)")
						.eq(User_login_log.USER_ID, 0).groupBy(User_login_log.ID).orderByAsc(User_login_log.ID));
		return Util.listmapToMap(list, User_login_log.USER_IP, "count(*)");
	}

	/***
	 * 按自定义查询统计,返回map
	 * 
	 * @return
	 */
	public Map<String, Integer> statUser_login_logGroupbyUser_id() {

		return svcuser_login_log.statMapByFieldname(User_login_log.USER_ID);
	}

	// TODO:--------------manageUser_login_log-end----------------
	// TODO:--------------manageVcurriculum-begin----------------
	/***
	 * 统计Vcurriculum中，指定字段的最大值列表
	 * 
	 * @param fieldname 需要统计的字段
	 * @return Vcurriculum表，指定字段中的最大值
	 */
	public Integer maxVcurriculum(String fieldname) {

		int rtv = 0;
		try {
			rtv = svcvcurriculum.max(fieldname);
		} catch (Exception e) {
		}
		return rtv;
	}

	/***
	 * 查询全部，返回一个map，用于数量较少时的映射
	 * 
	 * @return
	 */
	public Map<Integer, String> mapVcurriculum() {
		List<Vcurriculum> list = svcvcurriculum.list();
		Map<Integer, String> map = new HashMap<Integer, String>();
		for (int i = 0; i < list.size(); i++) {
			map.put(list.get(i).getId(), list.get(i).getSemester());
		}
		return map;
	}

	public Map<Integer, String> mapVcurriculum(Map<String, Object> params) {
		List<Vcurriculum> list = listVcurriculumByMap(params);
		Map<Integer, String> map = new HashMap<Integer, String>();
		for (int i = 0; i < list.size(); i++) {
			map.put(list.get(i).getId(), list.get(i).getSemester());
		}
		return map;
	}

	/***
	 * 查询，返回Vcurriculum列表
	 * 
	 * @return Vcurriculum列表
	 */
	public List<Vcurriculum> listVcurriculum() {

		Map<String, Object> params = new HashMap<String, Object>();
		return (List<Vcurriculum>) svcvcurriculum.listByMap(params);
	}

	/***
	 * 查询，返回Vcurriculum列表
	 * 
	 * @param params 查询条件
	 * @return Vcurriculum列表
	 */
	public List<Vcurriculum> listVcurriculumByMap(Map<String, Object> params) {

		logger.debug(this.getClass().getName() + ".listVcurriculumByMap()");
		return (List<Vcurriculum>) svcvcurriculum.listByMap(params);
	}

	/***
	 * 查询，返回Vcurriculum列表
	 * 
	 * @param params  查询条件（可以多个）
	 * @param ordlist 排序条件（可以多个）
	 * @return Vcurriculum列表
	 */
	public List<Vcurriculum> listVcurriculumByMap(Map<String, Object> params, List<KeyAndValue> ordlist) {

		logger.debug(this.getClass().getName() + ".listVcurriculumByMap()");
		// Map<String, Object> params = new HashMap<String, Object>();
		// params.put(Vcurriculum.ID, 0);
		// List<KeyAndValue> ordlist = new ArrayList<KeyAndValue>();
		// ordlist.add(new KeyAndValue(Vcurriculum.ID, "desc"));
		QueryWrapper<Vcurriculum> queryWrapper = new QueryWrapper<>();
		if (params.size() > 0) {
			queryWrapper.allEq(params);
		}
		for (KeyAndValue od : ordlist) {
			if (od.getValue().equals("desc")) {
				queryWrapper.orderByDesc((String) od.getKey());
			} else {
				queryWrapper.orderByAsc((String) od.getKey());
			}
		}
		return svcvcurriculum.list(queryWrapper);
	}

	/***
	 * 按id查询，返回Vcurriculum
	 * 
	 * @param id
	 * @return Vcurriculum
	 */
	public Vcurriculum getVcurriculumById(Serializable id) {

		logger.debug(this.getClass().getName() + ".getVcurriculumById()");
		return svcvcurriculum.getById(id);
	}

	/***
	 * 通过唯一值(数字)查找记录，返回Vcurriculum
	 * 
	 * @param infoid
	 * @return Vcurriculum
	 */
	public Vcurriculum getVcurriculumBySubject_id(Serializable subject_id) {

		logger.debug(this.getClass().getName() + ".getVcurriculumBySubject_id()");
		return svcvcurriculum
				.getOne(new QueryWrapper<Vcurriculum>().eq(Vcurriculum.SUBJECT_ID, subject_id).last("limit 1"));
	}

	/***
	 * 通过Map(多个条件)，查询返回Vcurriculum
	 * 
	 * @param params 多个条件
	 * @return Vcurriculum
	 */
	public Vcurriculum getVcurriculumByMap(Map<String, Object> params) {

		logger.debug(this.getClass().getName() + ".getVcurriculumByMap()");
		// Map<String, Object> params = new HashMap<String, Object>();
		// params.put(Vcurriculum.ID, 0);
		return svcvcurriculum.getOne(new QueryWrapper<Vcurriculum>().allEq(params).last("limit 1"));
	}

	/***
	 * 查询，返回Vcurriculum列表
	 * 
	 * @param columnname 排序字段
	 * @return Vcurriculum列表
	 */
	public List<Vcurriculum> listVcurriculumOrderByAsc(String columnname) {

		logger.debug(this.getClass().getName() + ".listVcurriculumOrderByAsc()");
		return svcvcurriculum.list(new QueryWrapper<Vcurriculum>().orderByAsc(columnname));
	}

	/***
	 * 查询，返回Vcurriculum列表
	 * 
	 * @param columnname 排序字段
	 * @return Vcurriculum列表
	 */
	public List<Vcurriculum> listVcurriculumOrderByDesc(String columnname) {

		logger.debug(this.getClass().getName() + ".listVcurriculumOrderByDesc()");
		return svcvcurriculum.list(new QueryWrapper<Vcurriculum>().orderByDesc(columnname));
	}

	/***
	 * 查询，返回Vcurriculum列表
	 * 
	 * @param columnname 排序字段
	 * @return Vcurriculum列表
	 */
	public List<Vcurriculum> listVcurriculumByMapAsc(Map<String, Object> params, String columnname) {

		logger.debug(this.getClass().getName() + ".listVcurriculumByMapAsc()");
		return svcvcurriculum.list(new QueryWrapper<Vcurriculum>().allEq(params).orderByAsc(columnname));
	}

	/***
	 * 查询，返回Vcurriculum列表
	 * 
	 * @param columnname 排序字段
	 * @return Vcurriculum列表
	 */
	public List<Vcurriculum> listVcurriculumByMapDesc(Map<String, Object> params, String columnname) {

		logger.debug(this.getClass().getName() + ".listVcurriculumByMapDesc()");
		return svcvcurriculum.list(new QueryWrapper<Vcurriculum>().allEq(params).orderByDesc(columnname));
	}

	/***
	 * 
	 * @param pagenumber 页码
	 * @param pagesize   页面显示数量
	 * @return
	 */
	public PagerList<Vcurriculum> pagerListVcurriculum(Integer pagenumber, Integer pagesize) {

		return pagerListVcurriculum(pagenumber, pagesize, "", new HashMap<String, String>());
	}

	/***
	 * 
	 * @param pagenumber 页码
	 * @param pagesize   页面显示数量
	 * @param keyword    关键字
	 * @return
	 */
	public PagerList<Vcurriculum> pagerListVcurriculum(Integer pagenumber, Integer pagesize, String keyword) {

		return pagerListVcurriculum(pagenumber, pagesize, keyword, new HashMap<String, String>());
	}

	/***
	 * 
	 * @param pagenumber 页码
	 * @param pagesize   页面显示数量
	 * @param keyword    关键字
	 * @param sqlin      用in子句包括的id值
	 * @return
	 */
	public PagerList<Vcurriculum> pagerListVcurriculum(Integer pagenumber, Integer pagesize, String keyword,
			Map<String, String> sqlin) {
		return pagerListVcurriculum(pagenumber, pagesize, keyword, sqlin, new HashMap<String, Object>());
	}

	/***
	 * 
	 * @param pagenumber 页码
	 * @param pagesize   页面显示数量
	 * @param keyword    关键字
	 * @param sqlin      用in子句包括的id值
	 * @param params     筛选条件
	 * @return
	 */
	public PagerList<Vcurriculum> pagerListVcurriculum(Integer pagenumber, Integer pagesize, String keyword,
			Map<String, String> sqlin, Map<String, Object> params) {
		List<KeyAndValue> ordlist = new ArrayList<KeyAndValue>();
		ordlist.add(new KeyAndValue(Vcurriculum.ID, "desc"));
		return pagerListVcurriculum(pagenumber, pagesize, keyword, sqlin, params, ordlist);
	}

	/***
	 * 
	 * @param pagenumber 页码
	 * @param pagesize   页面显示数量
	 * @param keyword    关键字
	 * @param sqlin      用in子句包括的id值
	 * @return
	 */
	public PagerList<Vcurriculum> pagerListVcurriculum(Integer pagenumber, Integer pagesize, String keyword,
			Map<String, String> sqlin, Map<String, Object> params, List<KeyAndValue> ordlist) {

		Page<Vcurriculum> page = new Page<>(pagenumber, pagesize);
		List<Vcurriculum> list = null;

		QueryWrapper<Vcurriculum> queryWrapper = new QueryWrapper<>();
		// 读取url中是否包含筛选条件
		String subject_id = sqlin.get(Vcurriculum.SUBJECT_ID + "_id");
		String student_group_id = sqlin.get(Vcurriculum.STUDENT_GROUP_ID + "_id");
		String user_id = sqlin.get(Vcurriculum.USER_ID + "_id");

		if (params.size() > 0) {
			queryWrapper.allEq(params);
		}
		if (StringUtils.isBlank(keyword) && StringUtils.isBlank(subject_id) && StringUtils.isBlank(student_group_id)
				&& StringUtils.isBlank(user_id)) {

			// --------1.准确匹配模式---------

		} else {
			// --------2.模糊匹配模式---------
			// 添加关键字模糊查找条件
			if (!StringUtils.isBlank(keyword)) {
				String kwss = keyword;
				queryWrapper.and(wr -> wr.like(Vcurriculum.SEMESTER, kwss).or().like(Vcurriculum.SUBJECT_NAME, kwss)
						.or().like(Vcurriculum.STUDENT_GROUP_NAME, kwss).or().like(Vcurriculum.USER_NAME, kwss));
			}
			// 添加id使用in语句筛选
			if (!StringUtils.isBlank(subject_id)) {
				queryWrapper.inSql(Vcurriculum.SUBJECT_ID, subject_id);
			}
			if (!StringUtils.isBlank(student_group_id)) {
				queryWrapper.inSql(Vcurriculum.STUDENT_GROUP_ID, student_group_id);
			}
			if (!StringUtils.isBlank(user_id)) {
				queryWrapper.inSql(Vcurriculum.USER_ID, user_id);
			}
			// --------2.模糊匹配模式---------
		}
		for (KeyAndValue od : ordlist) {
			if (od.getValue().equals("desc")) {
				queryWrapper.orderByDesc((String) od.getKey());
			} else {
				queryWrapper.orderByAsc((String) od.getKey());
			}
		}
		list = svcvcurriculum.page(page, queryWrapper).getRecords();
		// 清理数据,标注关键字，范围：所有字符型
		for (int i = 0; i < list.size(); i++) {
			// 如果头像为空，加载默认头像
			// if (StringUtils.isBlank(list.get(i).getWechat_headimgurl())
			// || list.get(i).getWechat_headimgurl().equals("0")) {
			// list.get(i).setWechat_headimgurl(Common.userheadimgurl);
			// }
			// 标注关键字，范围：所有字符型
			if (!StringUtils.isBlank(keyword)) {
				// 避免空值出现错误
				try {

					list.get(i)
							.setSemester((list.get(i).getSemester().replace(keyword, Common.getKeywordSpan(keyword))));
					list.get(i).setSubject_name(
							(list.get(i).getSubject_name().replace(keyword, Common.getKeywordSpan(keyword))));
					list.get(i).setStudent_group_name(
							(list.get(i).getStudent_group_name().replace(keyword, Common.getKeywordSpan(keyword))));
					list.get(i).setUser_name(
							(list.get(i).getUser_name().replace(keyword, Common.getKeywordSpan(keyword))));
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		}

		Pager<Vcurriculum> pager = new Pager<>(page);
		PagerList<Vcurriculum> pagerList = new PagerList<>(pager, list);

		return pagerList;
	}

	/***
	 * 保持新的实体，返回是否成功
	 * 
	 * @param it 实体
	 * @return 是否成功
	 */
	public Boolean saveVcurriculum(Vcurriculum it) {

		logger.debug(this.getClass().getName() + ".saveVcurriculum()");
		return svcvcurriculum.save(it);
	}

	/***
	 * 按id删除，返回是否成功
	 * 
	 * @param id
	 * @return 是否成功
	 */
	public Boolean removeVcurriculumById(Serializable id) {

		logger.debug(this.getClass().getName() + ".removeVcurriculumById()");
		return svcvcurriculum.removeById(id);
	}

	/***
	 * 按id修改实体，返回布尔值，是否成功
	 * 
	 * @param it 实体
	 * @return 是否成功
	 */
	public Boolean updateVcurriculumById(Integer subject_id, Integer student_group_id, Integer user_id, String semester,
			Boolean is_actived, String subject_name, String student_group_name, String user_name, Integer id) {

		logger.debug(this.getClass().getName() + ".updateVcurriculumById()");
		UpdateWrapper<Vcurriculum> uwr = new UpdateWrapper<>();
		uwr.set(Vcurriculum.SUBJECT_ID, subject_id);
		uwr.set(Vcurriculum.STUDENT_GROUP_ID, student_group_id);
		uwr.set(Vcurriculum.USER_ID, user_id);
		uwr.set(Vcurriculum.SEMESTER, semester);
		uwr.set(Vcurriculum.IS_ACTIVED, is_actived);
		uwr.set(Vcurriculum.SUBJECT_NAME, subject_name);
		uwr.set(Vcurriculum.STUDENT_GROUP_NAME, student_group_name);
		uwr.set(Vcurriculum.USER_NAME, user_name);

		uwr.eq(Vcurriculum.ID, id);
		// 视图需要定制修改方法！
		// return svcvcurriculum.update(uwr);
		return false;
	}

	/***
	 * 按id修改实体，返回是否成功
	 * 
	 * @param it 实体
	 * @return 是否成功
	 */
	public Boolean updateVcurriculumById(Vcurriculum it) {

		logger.debug(this.getClass().getName() + ".updateVcurriculumById()");
		return svcvcurriculum.updateById(it);
	}

	/***
	 * 按id修改实体的IS_ACTIVED字段，返回是否成功
	 * 
	 * @param it 实体
	 * @return 是否成功
	 */
	public Boolean updateVcurriculumById(String operate, Integer id) {

		logger.debug(this.getClass().getName() + ".updateVcurriculumById()IS_ACTIVED");
		UpdateWrapper<Vcurriculum> uwr = new UpdateWrapper<>();
		if (operate.equals("hideitem")) {
			uwr.set(Vcurriculum.IS_ACTIVED, false);
		} else {
			uwr.set(Vcurriculum.IS_ACTIVED, true);
		}
		uwr.eq(Vcurriculum.ID, id);
		return svcvcurriculum.update(uwr);
	}

	/***
	 * 统计当前表的数量
	 * 
	 * @return
	 */
	public Integer countVcurriculum() {
		return svcvcurriculum.count();
	}

	/***
	 * 统计当前表的数量
	 * 
	 * @return
	 */
	public Integer countVcurriculum(QueryWrapper<Vcurriculum> queryWrapper) {
		return svcvcurriculum.count(queryWrapper);
	}

	/***
	 * 按自定义查询统计,返回map
	 * 
	 * @return
	 */
	public Map<String, Integer> statVcurriculumGroupbyId() {
		List<Map<String, Object>> list = svcvcurriculum
				.listMaps(new QueryWrapper<Vcurriculum>().select(Vcurriculum.SEMESTER, "count(*)")
						.eq(Vcurriculum.SUBJECT_ID, 0).groupBy(Vcurriculum.ID).orderByAsc(Vcurriculum.ID));
		return Util.listmapToMap(list, Vcurriculum.SEMESTER, "count(*)");
	}

	/***
	 * 按自定义查询统计,返回map
	 * 
	 * @return
	 */
	public Map<String, Integer> statVcurriculumGroupbySubject_id() {

		return svcvcurriculum.statMapByFieldname(Vcurriculum.SUBJECT_ID);
	}

	// TODO:--------------manageVcurriculum-end----------------
	// TODO:--------------manageVevaluation-begin----------------
	/***
	 * 统计Vevaluation中，指定字段的最大值列表
	 * 
	 * @param fieldname 需要统计的字段
	 * @return Vevaluation表，指定字段中的最大值
	 */
	public Integer maxVevaluation(String fieldname) {

		int rtv = 0;
		try {
			rtv = svcvevaluation.max(fieldname);
		} catch (Exception e) {
		}
		return rtv;
	}

	/***
	 * 查询全部，返回一个map，用于数量较少时的映射
	 * 
	 * @return
	 */
	public Map<Integer, String> mapVevaluation() {
		List<Vevaluation> list = svcvevaluation.list();
		Map<Integer, String> map = new HashMap<Integer, String>();
		for (int i = 0; i < list.size(); i++) {
			map.put(list.get(i).getId(), list.get(i).getContent());
		}
		return map;
	}

	public Map<Integer, String> mapVevaluation(Map<String, Object> params) {
		List<Vevaluation> list = listVevaluationByMap(params);
		Map<Integer, String> map = new HashMap<Integer, String>();
		for (int i = 0; i < list.size(); i++) {
			map.put(list.get(i).getId(), list.get(i).getContent());
		}
		return map;
	}

	/***
	 * 查询，返回Vevaluation列表
	 * 
	 * @return Vevaluation列表
	 */
	public List<Vevaluation> listVevaluation() {

		Map<String, Object> params = new HashMap<String, Object>();
		return (List<Vevaluation>) svcvevaluation.listByMap(params);
	}

	/***
	 * 查询，返回Vevaluation列表
	 * 
	 * @param params 查询条件
	 * @return Vevaluation列表
	 */
	public List<Vevaluation> listVevaluationByMap(Map<String, Object> params) {

		logger.debug(this.getClass().getName() + ".listVevaluationByMap()");
		return (List<Vevaluation>) svcvevaluation.listByMap(params);
	}

	/***
	 * 查询，返回Vevaluation列表
	 * 
	 * @param params  查询条件（可以多个）
	 * @param ordlist 排序条件（可以多个）
	 * @return Vevaluation列表
	 */
	public List<Vevaluation> listVevaluationByMap(Map<String, Object> params, List<KeyAndValue> ordlist) {

		logger.debug(this.getClass().getName() + ".listVevaluationByMap()");
		// Map<String, Object> params = new HashMap<String, Object>();
		// params.put(Vevaluation.ID, 0);
		// List<KeyAndValue> ordlist = new ArrayList<KeyAndValue>();
		// ordlist.add(new KeyAndValue(Vevaluation.ID, "desc"));
		QueryWrapper<Vevaluation> queryWrapper = new QueryWrapper<>();
		if (params.size() > 0) {
			queryWrapper.allEq(params);
		}
		for (KeyAndValue od : ordlist) {
			if (od.getValue().equals("desc")) {
				queryWrapper.orderByDesc((String) od.getKey());
			} else {
				queryWrapper.orderByAsc((String) od.getKey());
			}
		}
		return svcvevaluation.list(queryWrapper);
	}

	/***
	 * 按id查询，返回Vevaluation
	 * 
	 * @param id
	 * @return Vevaluation
	 */
	public Vevaluation getVevaluationById(Serializable id) {

		logger.debug(this.getClass().getName() + ".getVevaluationById()");
		return svcvevaluation.getById(id);
	}

	/***
	 * 通过唯一值(数字)查找记录，返回Vevaluation
	 * 
	 * @param infoid
	 * @return Vevaluation
	 */
	public Vevaluation getVevaluationBySortid(Serializable sortid) {

		logger.debug(this.getClass().getName() + ".getVevaluationBySortid()");
		return svcvevaluation.getOne(new QueryWrapper<Vevaluation>().eq(Vevaluation.SORTID, sortid).last("limit 1"));
	}

	/***
	 * 通过Map(多个条件)，查询返回Vevaluation
	 * 
	 * @param params 多个条件
	 * @return Vevaluation
	 */
	public Vevaluation getVevaluationByMap(Map<String, Object> params) {

		logger.debug(this.getClass().getName() + ".getVevaluationByMap()");
		// Map<String, Object> params = new HashMap<String, Object>();
		// params.put(Vevaluation.ID, 0);
		return svcvevaluation.getOne(new QueryWrapper<Vevaluation>().allEq(params).last("limit 1"));
	}

	/***
	 * 查询，返回Vevaluation列表
	 * 
	 * @param columnname 排序字段
	 * @return Vevaluation列表
	 */
	public List<Vevaluation> listVevaluationOrderByAsc(String columnname) {

		logger.debug(this.getClass().getName() + ".listVevaluationOrderByAsc()");
		return svcvevaluation.list(new QueryWrapper<Vevaluation>().orderByAsc(columnname));
	}

	/***
	 * 查询，返回Vevaluation列表
	 * 
	 * @param columnname 排序字段
	 * @return Vevaluation列表
	 */
	public List<Vevaluation> listVevaluationOrderByDesc(String columnname) {

		logger.debug(this.getClass().getName() + ".listVevaluationOrderByDesc()");
		return svcvevaluation.list(new QueryWrapper<Vevaluation>().orderByDesc(columnname));
	}

	/***
	 * 查询，返回Vevaluation列表
	 * 
	 * @param columnname 排序字段
	 * @return Vevaluation列表
	 */
	public List<Vevaluation> listVevaluationByMapAsc(Map<String, Object> params, String columnname) {

		logger.debug(this.getClass().getName() + ".listVevaluationByMapAsc()");
		return svcvevaluation.list(new QueryWrapper<Vevaluation>().allEq(params).orderByAsc(columnname));
	}

	/***
	 * 查询，返回Vevaluation列表
	 * 
	 * @param columnname 排序字段
	 * @return Vevaluation列表
	 */
	public List<Vevaluation> listVevaluationByMapDesc(Map<String, Object> params, String columnname) {

		logger.debug(this.getClass().getName() + ".listVevaluationByMapDesc()");
		return svcvevaluation.list(new QueryWrapper<Vevaluation>().allEq(params).orderByDesc(columnname));
	}

	/***
	 * 
	 * @param pagenumber 页码
	 * @param pagesize   页面显示数量
	 * @return
	 */
	public PagerList<Vevaluation> pagerListVevaluation(Integer pagenumber, Integer pagesize) {

		return pagerListVevaluation(pagenumber, pagesize, "", new HashMap<String, String>());
	}

	/***
	 * 
	 * @param pagenumber 页码
	 * @param pagesize   页面显示数量
	 * @param keyword    关键字
	 * @return
	 */
	public PagerList<Vevaluation> pagerListVevaluation(Integer pagenumber, Integer pagesize, String keyword) {

		return pagerListVevaluation(pagenumber, pagesize, keyword, new HashMap<String, String>());
	}

	/***
	 * 
	 * @param pagenumber 页码
	 * @param pagesize   页面显示数量
	 * @param keyword    关键字
	 * @param sqlin      用in子句包括的id值
	 * @return
	 */
	public PagerList<Vevaluation> pagerListVevaluation(Integer pagenumber, Integer pagesize, String keyword,
			Map<String, String> sqlin) {
		return pagerListVevaluation(pagenumber, pagesize, keyword, sqlin, new HashMap<String, Object>());
	}

	/***
	 * 
	 * @param pagenumber 页码
	 * @param pagesize   页面显示数量
	 * @param keyword    关键字
	 * @param sqlin      用in子句包括的id值
	 * @param params     筛选条件
	 * @return
	 */
	public PagerList<Vevaluation> pagerListVevaluation(Integer pagenumber, Integer pagesize, String keyword,
			Map<String, String> sqlin, Map<String, Object> params) {
		List<KeyAndValue> ordlist = new ArrayList<KeyAndValue>();
		ordlist.add(new KeyAndValue(Vevaluation.ID, "desc"));
		return pagerListVevaluation(pagenumber, pagesize, keyword, sqlin, params, ordlist);
	}

	/***
	 * 
	 * @param pagenumber 页码
	 * @param pagesize   页面显示数量
	 * @param keyword    关键字
	 * @param sqlin      用in子句包括的id值
	 * @return
	 */
	public PagerList<Vevaluation> pagerListVevaluation(Integer pagenumber, Integer pagesize, String keyword,
			Map<String, String> sqlin, Map<String, Object> params, List<KeyAndValue> ordlist) {

		Page<Vevaluation> page = new Page<>(pagenumber, pagesize);
		List<Vevaluation> list = null;

		QueryWrapper<Vevaluation> queryWrapper = new QueryWrapper<>();
		// 读取url中是否包含筛选条件
		String curriculum_id = sqlin.get(Vevaluation.CURRICULUM_ID + "_id");
		String subject_id = sqlin.get(Vevaluation.SUBJECT_ID + "_id");
		String student_group_id = sqlin.get(Vevaluation.STUDENT_GROUP_ID + "_id");

		if (params.size() > 0) {
			queryWrapper.allEq(params);
		}
		if (StringUtils.isBlank(keyword) && StringUtils.isBlank(curriculum_id) && StringUtils.isBlank(subject_id)
				&& StringUtils.isBlank(student_group_id)) {

			// --------1.准确匹配模式---------

		} else {
			// --------2.模糊匹配模式---------
			// 添加关键字模糊查找条件
			if (!StringUtils.isBlank(keyword)) {
				String kwss = keyword;
				queryWrapper.and(wr -> wr.like(Vevaluation.CONTENT, kwss).or().like(Vevaluation.TITLE, kwss).or()
						.like(Vevaluation.SUBJECT_NAME, kwss).or().like(Vevaluation.STUDENT_GROUP_NAME, kwss).or()
						.like(Vevaluation.STUDENT_GROUP_CODE, kwss));
			}
			// 添加id使用in语句筛选
			if (!StringUtils.isBlank(curriculum_id)) {
				queryWrapper.inSql(Vevaluation.CURRICULUM_ID, curriculum_id);
			}
			if (!StringUtils.isBlank(subject_id)) {
				queryWrapper.inSql(Vevaluation.SUBJECT_ID, subject_id);
			}
			if (!StringUtils.isBlank(student_group_id)) {
				queryWrapper.inSql(Vevaluation.STUDENT_GROUP_ID, student_group_id);
			}
			// --------2.模糊匹配模式---------
		}
		for (KeyAndValue od : ordlist) {
			if (od.getValue().equals("desc")) {
				queryWrapper.orderByDesc((String) od.getKey());
			} else {
				queryWrapper.orderByAsc((String) od.getKey());
			}
		}
		list = svcvevaluation.page(page, queryWrapper).getRecords();
		// 清理数据,标注关键字，范围：所有字符型
		for (int i = 0; i < list.size(); i++) {
			// 如果头像为空，加载默认头像
			// if (StringUtils.isBlank(list.get(i).getWechat_headimgurl())
			// || list.get(i).getWechat_headimgurl().equals("0")) {
			// list.get(i).setWechat_headimgurl(Common.userheadimgurl);
			// }
			// 标注关键字，范围：所有字符型
			if (!StringUtils.isBlank(keyword)) {
				// 避免空值出现错误
				try {

					list.get(i).setContent((list.get(i).getContent().replace(keyword, Common.getKeywordSpan(keyword))));
					list.get(i).setTitle((list.get(i).getTitle().replace(keyword, Common.getKeywordSpan(keyword))));
					list.get(i).setSubject_name(
							(list.get(i).getSubject_name().replace(keyword, Common.getKeywordSpan(keyword))));
					list.get(i).setStudent_group_name(
							(list.get(i).getStudent_group_name().replace(keyword, Common.getKeywordSpan(keyword))));
					list.get(i).setStudent_group_code(
							(list.get(i).getStudent_group_code().replace(keyword, Common.getKeywordSpan(keyword))));
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		}

		Pager<Vevaluation> pager = new Pager<>(page);
		PagerList<Vevaluation> pagerList = new PagerList<>(pager, list);

		return pagerList;
	}

	/***
	 * 保持新的实体，返回是否成功
	 * 
	 * @param it 实体
	 * @return 是否成功
	 */
	public Boolean saveVevaluation(Vevaluation it) {

		logger.debug(this.getClass().getName() + ".saveVevaluation()");
		return svcvevaluation.save(it);
	}

	/***
	 * 按id删除，返回是否成功
	 * 
	 * @param id
	 * @return 是否成功
	 */
	public Boolean removeVevaluationById(Serializable id) {

		logger.debug(this.getClass().getName() + ".removeVevaluationById()");
		return svcvevaluation.removeById(id);
	}

	/***
	 * 按id修改实体，返回布尔值，是否成功
	 * 
	 * @param it 实体
	 * @return 是否成功
	 */
	public Boolean updateVevaluationById(Boolean is_actived, Long begin_gmt, Long end_gmt, String content, String title,
			Integer sortid, Integer curriculum_id, Long update_gmt, Integer subject_id, String subject_name,
			Integer student_group_id, String student_group_name, String student_group_code, Integer id) {

		logger.debug(this.getClass().getName() + ".updateVevaluationById()");
		UpdateWrapper<Vevaluation> uwr = new UpdateWrapper<>();
		uwr.set(Vevaluation.IS_ACTIVED, is_actived);
		uwr.set(Vevaluation.BEGIN_GMT, begin_gmt);
		uwr.set(Vevaluation.END_GMT, end_gmt);
		uwr.set(Vevaluation.CONTENT, content);
		uwr.set(Vevaluation.TITLE, title);
		uwr.set(Vevaluation.SORTID, sortid);
		uwr.set(Vevaluation.CURRICULUM_ID, curriculum_id);
		uwr.set(Vevaluation.UPDATE_GMT, update_gmt);
		uwr.set(Vevaluation.SUBJECT_ID, subject_id);
		uwr.set(Vevaluation.SUBJECT_NAME, subject_name);
		uwr.set(Vevaluation.STUDENT_GROUP_ID, student_group_id);
		uwr.set(Vevaluation.STUDENT_GROUP_NAME, student_group_name);
		uwr.set(Vevaluation.STUDENT_GROUP_CODE, student_group_code);

		uwr.eq(Vevaluation.ID, id);
		// 视图需要定制修改方法！
		// return svcvevaluation.update(uwr);
		return false;
	}

	/***
	 * 按id修改实体，返回是否成功
	 * 
	 * @param it 实体
	 * @return 是否成功
	 */
	public Boolean updateVevaluationById(Vevaluation it) {

		logger.debug(this.getClass().getName() + ".updateVevaluationById()");
		return svcvevaluation.updateById(it);
	}

	/***
	 * 按id修改实体的IS_ACTIVED字段，返回是否成功
	 * 
	 * @param it 实体
	 * @return 是否成功
	 */
	public Boolean updateVevaluationById(String operate, Integer id) {

		logger.debug(this.getClass().getName() + ".updateVevaluationById()IS_ACTIVED");
		UpdateWrapper<Vevaluation> uwr = new UpdateWrapper<>();
		if (operate.equals("hideitem")) {
			uwr.set(Vevaluation.IS_ACTIVED, false);
		} else {
			uwr.set(Vevaluation.IS_ACTIVED, true);
		}
		uwr.eq(Vevaluation.ID, id);
		return svcvevaluation.update(uwr);
	}

	public Boolean moveVevaluation(String method, String upOrDown, Integer id, String sortColumn) {

		Vevaluation it = svcvevaluation.getById(id);
		// 读取当前已有信息
		// SELECT * FROM `column` where column_parentid =0 and sortid<4 order by
		// sortid desc limit 1
		QueryWrapper<Vevaluation> queryWrapper = new QueryWrapper<>();
		// 同一个父栏目下
		// queryWrapper.eq(Vevaluation.COLUMN_PARENTID , it.getColumn_parentid());
		if (method.equals(upOrDown)) {
			queryWrapper.lt(sortColumn, it.getSortid());
			queryWrapper.orderByDesc(sortColumn);
		} else {
			queryWrapper.gt(sortColumn, it.getSortid());
			queryWrapper.orderByAsc(sortColumn);
		}
		queryWrapper.last("limit 1");

		Vevaluation target = svcvevaluation.getOne(queryWrapper);

		if (target == null) {
			// 没有
			return false;
		} else {

			UpdateWrapper<Vevaluation> uwr1 = new UpdateWrapper<>();
			uwr1.set(Vevaluation.SORTID, target.getSortid());
			uwr1.eq(Vevaluation.ID, it.getId());

			UpdateWrapper<Vevaluation> uwr2 = new UpdateWrapper<>();
			uwr2.set(Vevaluation.SORTID, it.getSortid());
			uwr2.eq(Vevaluation.ID, target.getId());

			try {
				svcvevaluation.update(uwr1);
				svcvevaluation.update(uwr2);
			} catch (Exception e) {
				e.printStackTrace();
				return false;
			}
			return true;
		}
	}

	/***
	 * 统计当前表的数量
	 * 
	 * @return
	 */
	public Integer countVevaluation() {
		return svcvevaluation.count();
	}

	/***
	 * 统计当前表的数量
	 * 
	 * @return
	 */
	public Integer countVevaluation(QueryWrapper<Vevaluation> queryWrapper) {
		return svcvevaluation.count(queryWrapper);
	}

	/***
	 * 按自定义查询统计,返回map
	 * 
	 * @return
	 */
	public Map<String, Integer> statVevaluationGroupbyId() {
		List<Map<String, Object>> list = svcvevaluation
				.listMaps(new QueryWrapper<Vevaluation>().select(Vevaluation.CONTENT, "count(*)")
						.eq(Vevaluation.SORTID, 0).groupBy(Vevaluation.ID).orderByAsc(Vevaluation.ID));
		return Util.listmapToMap(list, Vevaluation.CONTENT, "count(*)");
	}

	/***
	 * 按自定义查询统计,返回map
	 * 
	 * @return
	 */
	public Map<String, Integer> statVevaluationGroupbySortid() {

		return svcvevaluation.statMapByFieldname(Vevaluation.SORTID);
	}

	// TODO:--------------manageVevaluation-end----------------
	// TODO:--------------manageVevaluation_point-begin----------------
	/***
	 * 统计Vevaluation_point中，指定字段的最大值列表
	 * 
	 * @param fieldname 需要统计的字段
	 * @return Vevaluation_point表，指定字段中的最大值
	 */
	public Integer maxVevaluation_point(String fieldname) {

		int rtv = 0;
		try {
			rtv = svcvevaluation_point.max(fieldname);
		} catch (Exception e) {
		}
		return rtv;
	}

	/***
	 * 查询全部，返回一个map，用于数量较少时的映射
	 * 
	 * @return
	 */
	public Map<Integer, String> mapVevaluation_point() {
		List<Vevaluation_point> list = svcvevaluation_point.list();
		Map<Integer, String> map = new HashMap<Integer, String>();
		for (int i = 0; i < list.size(); i++) {
			map.put(list.get(i).getId(), list.get(i).getContent());
		}
		return map;
	}

	public Map<Integer, String> mapVevaluation_point(Map<String, Object> params) {
		List<Vevaluation_point> list = listVevaluation_pointByMap(params);
		Map<Integer, String> map = new HashMap<Integer, String>();
		for (int i = 0; i < list.size(); i++) {
			map.put(list.get(i).getId(), list.get(i).getContent());
		}
		return map;
	}

	/***
	 * 查询，返回Vevaluation_point列表
	 * 
	 * @return Vevaluation_point列表
	 */
	public List<Vevaluation_point> listVevaluation_point() {

		Map<String, Object> params = new HashMap<String, Object>();
		return (List<Vevaluation_point>) svcvevaluation_point.listByMap(params);
	}

	/***
	 * 查询，返回Vevaluation_point列表
	 * 
	 * @param params 查询条件
	 * @return Vevaluation_point列表
	 */
	public List<Vevaluation_point> listVevaluation_pointByMap(Map<String, Object> params) {

		logger.debug(this.getClass().getName() + ".listVevaluation_pointByMap()");
		return (List<Vevaluation_point>) svcvevaluation_point.listByMap(params);
	}

	/***
	 * 查询，返回Vevaluation_point列表
	 * 
	 * @param params  查询条件（可以多个）
	 * @param ordlist 排序条件（可以多个）
	 * @return Vevaluation_point列表
	 */
	public List<Vevaluation_point> listVevaluation_pointByMap(Map<String, Object> params, List<KeyAndValue> ordlist) {

		logger.debug(this.getClass().getName() + ".listVevaluation_pointByMap()");
		// Map<String, Object> params = new HashMap<String, Object>();
		// params.put(Vevaluation_point.ID, 0);
		// List<KeyAndValue> ordlist = new ArrayList<KeyAndValue>();
		// ordlist.add(new KeyAndValue(Vevaluation_point.ID, "desc"));
		QueryWrapper<Vevaluation_point> queryWrapper = new QueryWrapper<>();
		if (params.size() > 0) {
			queryWrapper.allEq(params);
		}
		for (KeyAndValue od : ordlist) {
			if (od.getValue().equals("desc")) {
				queryWrapper.orderByDesc((String) od.getKey());
			} else {
				queryWrapper.orderByAsc((String) od.getKey());
			}
		}
		return svcvevaluation_point.list(queryWrapper);
	}

	/***
	 * 按id查询，返回Vevaluation_point
	 * 
	 * @param id
	 * @return Vevaluation_point
	 */
	public Vevaluation_point getVevaluation_pointById(Serializable id) {

		logger.debug(this.getClass().getName() + ".getVevaluation_pointById()");
		return svcvevaluation_point.getById(id);
	}

	/***
	 * 通过唯一值(数字)查找记录，返回Vevaluation_point
	 * 
	 * @param infoid
	 * @return Vevaluation_point
	 */
	public Vevaluation_point getVevaluation_pointBySubject_id(Serializable subject_id) {

		logger.debug(this.getClass().getName() + ".getVevaluation_pointBySubject_id()");
		return svcvevaluation_point.getOne(
				new QueryWrapper<Vevaluation_point>().eq(Vevaluation_point.SUBJECT_ID, subject_id).last("limit 1"));
	}

	/***
	 * 通过Map(多个条件)，查询返回Vevaluation_point
	 * 
	 * @param params 多个条件
	 * @return Vevaluation_point
	 */
	public Vevaluation_point getVevaluation_pointByMap(Map<String, Object> params) {

		logger.debug(this.getClass().getName() + ".getVevaluation_pointByMap()");
		// Map<String, Object> params = new HashMap<String, Object>();
		// params.put(Vevaluation_point.ID, 0);
		return svcvevaluation_point.getOne(new QueryWrapper<Vevaluation_point>().allEq(params).last("limit 1"));
	}

	/***
	 * 查询，返回Vevaluation_point列表
	 * 
	 * @param columnname 排序字段
	 * @return Vevaluation_point列表
	 */
	public List<Vevaluation_point> listVevaluation_pointOrderByAsc(String columnname) {

		logger.debug(this.getClass().getName() + ".listVevaluation_pointOrderByAsc()");
		return svcvevaluation_point.list(new QueryWrapper<Vevaluation_point>().orderByAsc(columnname));
	}

	/***
	 * 查询，返回Vevaluation_point列表
	 * 
	 * @param columnname 排序字段
	 * @return Vevaluation_point列表
	 */
	public List<Vevaluation_point> listVevaluation_pointOrderByDesc(String columnname) {

		logger.debug(this.getClass().getName() + ".listVevaluation_pointOrderByDesc()");
		return svcvevaluation_point.list(new QueryWrapper<Vevaluation_point>().orderByDesc(columnname));
	}

	/***
	 * 查询，返回Vevaluation_point列表
	 * 
	 * @param columnname 排序字段
	 * @return Vevaluation_point列表
	 */
	public List<Vevaluation_point> listVevaluation_pointByMapAsc(Map<String, Object> params, String columnname) {

		logger.debug(this.getClass().getName() + ".listVevaluation_pointByMapAsc()");
		return svcvevaluation_point.list(new QueryWrapper<Vevaluation_point>().allEq(params).orderByAsc(columnname));
	}

	/***
	 * 查询，返回Vevaluation_point列表
	 * 
	 * @param columnname 排序字段
	 * @return Vevaluation_point列表
	 */
	public List<Vevaluation_point> listVevaluation_pointByMapDesc(Map<String, Object> params, String columnname) {

		logger.debug(this.getClass().getName() + ".listVevaluation_pointByMapDesc()");
		return svcvevaluation_point.list(new QueryWrapper<Vevaluation_point>().allEq(params).orderByDesc(columnname));
	}

	/***
	 * 
	 * @param pagenumber 页码
	 * @param pagesize   页面显示数量
	 * @return
	 */
	public PagerList<Vevaluation_point> pagerListVevaluation_point(Integer pagenumber, Integer pagesize) {

		return pagerListVevaluation_point(pagenumber, pagesize, "", new HashMap<String, String>());
	}

	/***
	 * 
	 * @param pagenumber 页码
	 * @param pagesize   页面显示数量
	 * @param keyword    关键字
	 * @return
	 */
	public PagerList<Vevaluation_point> pagerListVevaluation_point(Integer pagenumber, Integer pagesize,
			String keyword) {

		return pagerListVevaluation_point(pagenumber, pagesize, keyword, new HashMap<String, String>());
	}

	/***
	 * 
	 * @param pagenumber 页码
	 * @param pagesize   页面显示数量
	 * @param keyword    关键字
	 * @param sqlin      用in子句包括的id值
	 * @return
	 */
	public PagerList<Vevaluation_point> pagerListVevaluation_point(Integer pagenumber, Integer pagesize, String keyword,
			Map<String, String> sqlin) {
		return pagerListVevaluation_point(pagenumber, pagesize, keyword, sqlin, new HashMap<String, Object>());
	}

	/***
	 * 
	 * @param pagenumber 页码
	 * @param pagesize   页面显示数量
	 * @param keyword    关键字
	 * @param sqlin      用in子句包括的id值
	 * @param params     筛选条件
	 * @return
	 */
	public PagerList<Vevaluation_point> pagerListVevaluation_point(Integer pagenumber, Integer pagesize, String keyword,
			Map<String, String> sqlin, Map<String, Object> params) {
		List<KeyAndValue> ordlist = new ArrayList<KeyAndValue>();
		ordlist.add(new KeyAndValue(Vevaluation_point.ID, "desc"));
		return pagerListVevaluation_point(pagenumber, pagesize, keyword, sqlin, params, ordlist);
	}

	/***
	 * 
	 * @param pagenumber 页码
	 * @param pagesize   页面显示数量
	 * @param keyword    关键字
	 * @param sqlin      用in子句包括的id值
	 * @return
	 */
	public PagerList<Vevaluation_point> pagerListVevaluation_point(Integer pagenumber, Integer pagesize, String keyword,
			Map<String, String> sqlin, Map<String, Object> params, List<KeyAndValue> ordlist) {

		Page<Vevaluation_point> page = new Page<>(pagenumber, pagesize);
		List<Vevaluation_point> list = null;

		QueryWrapper<Vevaluation_point> queryWrapper = new QueryWrapper<>();
		// 读取url中是否包含筛选条件
		String subject_id = sqlin.get(Vevaluation_point.SUBJECT_ID + "_id");

		if (params.size() > 0) {
			queryWrapper.allEq(params);
		}
		if (StringUtils.isBlank(keyword) && StringUtils.isBlank(subject_id)) {

			// --------1.准确匹配模式---------

		} else {
			// --------2.模糊匹配模式---------
			// 添加关键字模糊查找条件
			if (!StringUtils.isBlank(keyword)) {
				String kwss = keyword;
				queryWrapper.and(
						wr -> wr.like(Vevaluation_point.CONTENT, kwss).or().like(Vevaluation_point.SUBJECT_NAME, kwss)
								.or().like(Vevaluation_point.EVALUATION_TYPE_NAME, kwss));
			}
			// 添加id使用in语句筛选
			if (!StringUtils.isBlank(subject_id)) {
				queryWrapper.inSql(Vevaluation_point.SUBJECT_ID, subject_id);
			}
			// --------2.模糊匹配模式---------
		}
		for (KeyAndValue od : ordlist) {
			if (od.getValue().equals("desc")) {
				queryWrapper.orderByDesc((String) od.getKey());
			} else {
				queryWrapper.orderByAsc((String) od.getKey());
			}
		}
		list = svcvevaluation_point.page(page, queryWrapper).getRecords();
		// 清理数据,标注关键字，范围：所有字符型
		for (int i = 0; i < list.size(); i++) {
			// 如果头像为空，加载默认头像
			// if (StringUtils.isBlank(list.get(i).getWechat_headimgurl())
			// || list.get(i).getWechat_headimgurl().equals("0")) {
			// list.get(i).setWechat_headimgurl(Common.userheadimgurl);
			// }
			// 标注关键字，范围：所有字符型
			if (!StringUtils.isBlank(keyword)) {
				// 避免空值出现错误
				try {

					list.get(i).setContent((list.get(i).getContent().replace(keyword, Common.getKeywordSpan(keyword))));
					list.get(i).setSubject_name(
							(list.get(i).getSubject_name().replace(keyword, Common.getKeywordSpan(keyword))));
					list.get(i).setEvaluation_type_name(
							(list.get(i).getEvaluation_type_name().replace(keyword, Common.getKeywordSpan(keyword))));
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		}

		Pager<Vevaluation_point> pager = new Pager<>(page);
		PagerList<Vevaluation_point> pagerList = new PagerList<>(pager, list);

		return pagerList;
	}

	/***
	 * 保持新的实体，返回是否成功
	 * 
	 * @param it 实体
	 * @return 是否成功
	 */
	public Boolean saveVevaluation_point(Vevaluation_point it) {

		logger.debug(this.getClass().getName() + ".saveVevaluation_point()");
		return svcvevaluation_point.save(it);
	}

	/***
	 * 按id删除，返回是否成功
	 * 
	 * @param id
	 * @return 是否成功
	 */
	public Boolean removeVevaluation_pointById(Serializable id) {

		logger.debug(this.getClass().getName() + ".removeVevaluation_pointById()");
		return svcvevaluation_point.removeById(id);
	}

	/***
	 * 按id修改实体，返回布尔值，是否成功
	 * 
	 * @param it 实体
	 * @return 是否成功
	 */
	public Boolean updateVevaluation_pointById(Integer subject_id, Boolean is_actived, Integer type, Integer difficulty,
			String content, Long update_gmt, String subject_name, String evaluation_type_name,
			Boolean subject_is_actived, Integer id) {

		logger.debug(this.getClass().getName() + ".updateVevaluation_pointById()");
		UpdateWrapper<Vevaluation_point> uwr = new UpdateWrapper<>();
		uwr.set(Vevaluation_point.SUBJECT_ID, subject_id);
		uwr.set(Vevaluation_point.IS_ACTIVED, is_actived);
		uwr.set(Vevaluation_point.TYPE, type);
		uwr.set(Vevaluation_point.DIFFICULTY, difficulty);
		uwr.set(Vevaluation_point.CONTENT, content);
		uwr.set(Vevaluation_point.UPDATE_GMT, update_gmt);
		uwr.set(Vevaluation_point.SUBJECT_NAME, subject_name);
		uwr.set(Vevaluation_point.EVALUATION_TYPE_NAME, evaluation_type_name);
		uwr.set(Vevaluation_point.SUBJECT_IS_ACTIVED, subject_is_actived);

		uwr.eq(Vevaluation_point.ID, id);
		// 视图需要定制修改方法！
		// return svcvevaluation_point.update(uwr);
		return false;
	}

	/***
	 * 按id修改实体，返回是否成功
	 * 
	 * @param it 实体
	 * @return 是否成功
	 */
	public Boolean updateVevaluation_pointById(Vevaluation_point it) {

		logger.debug(this.getClass().getName() + ".updateVevaluation_pointById()");
		return svcvevaluation_point.updateById(it);
	}

	/***
	 * 按id修改实体的IS_ACTIVED字段，返回是否成功
	 * 
	 * @param it 实体
	 * @return 是否成功
	 */
	public Boolean updateVevaluation_pointById(String operate, Integer id) {

		logger.debug(this.getClass().getName() + ".updateVevaluation_pointById()IS_ACTIVED");
		UpdateWrapper<Vevaluation_point> uwr = new UpdateWrapper<>();
		if (operate.equals("hideitem")) {
			uwr.set(Vevaluation_point.IS_ACTIVED, false);
		} else {
			uwr.set(Vevaluation_point.IS_ACTIVED, true);
		}
		uwr.eq(Vevaluation_point.ID, id);
		return svcvevaluation_point.update(uwr);
	}

	/***
	 * 统计当前表的数量
	 * 
	 * @return
	 */
	public Integer countVevaluation_point() {
		return svcvevaluation_point.count();
	}

	/***
	 * 统计当前表的数量
	 * 
	 * @return
	 */
	public Integer countVevaluation_point(QueryWrapper<Vevaluation_point> queryWrapper) {
		return svcvevaluation_point.count(queryWrapper);
	}

	/***
	 * 按自定义查询统计,返回map
	 * 
	 * @return
	 */
	public Map<String, Integer> statVevaluation_pointGroupbyId() {
		List<Map<String, Object>> list = svcvevaluation_point.listMaps(new QueryWrapper<Vevaluation_point>()
				.select(Vevaluation_point.CONTENT, "count(*)").eq(Vevaluation_point.SUBJECT_ID, 0)
				.groupBy(Vevaluation_point.ID).orderByAsc(Vevaluation_point.ID));
		return Util.listmapToMap(list, Vevaluation_point.CONTENT, "count(*)");
	}

	/***
	 * 按自定义查询统计,返回map
	 * 
	 * @return
	 */
	public Map<String, Integer> statVevaluation_pointGroupbySubject_id() {

		return svcvevaluation_point.statMapByFieldname(Vevaluation_point.SUBJECT_ID);
	}

	// TODO:--------------manageVevaluation_point-end----------------
	// TODO:--------------manageVexperiment_record-begin----------------
	/***
	 * 统计Vexperiment_record中，指定字段的最大值列表
	 * 
	 * @param fieldname 需要统计的字段
	 * @return Vexperiment_record表，指定字段中的最大值
	 */
	public Integer maxVexperiment_record(String fieldname) {

		int rtv = 0;
		try {
			rtv = svcvexperiment_record.max(fieldname);
		} catch (Exception e) {
		}
		return rtv;
	}

	/***
	 * 查询全部，返回一个map，用于数量较少时的映射
	 * 
	 * @return
	 */
	public Map<Integer, String> mapVexperiment_record() {
		List<Vexperiment_record> list = svcvexperiment_record.list();
		Map<Integer, String> map = new HashMap<Integer, String>();
		for (int i = 0; i < list.size(); i++) {
			map.put(list.get(i).getId(), list.get(i).getTruename());
		}
		return map;
	}

	public Map<Integer, String> mapVexperiment_record(Map<String, Object> params) {
		List<Vexperiment_record> list = listVexperiment_recordByMap(params);
		Map<Integer, String> map = new HashMap<Integer, String>();
		for (int i = 0; i < list.size(); i++) {
			map.put(list.get(i).getId(), list.get(i).getTruename());
		}
		return map;
	}

	/***
	 * 查询，返回Vexperiment_record列表
	 * 
	 * @return Vexperiment_record列表
	 */
	public List<Vexperiment_record> listVexperiment_record() {

		Map<String, Object> params = new HashMap<String, Object>();
		return (List<Vexperiment_record>) svcvexperiment_record.listByMap(params);
	}

	/***
	 * 查询，返回Vexperiment_record列表
	 * 
	 * @param params 查询条件
	 * @return Vexperiment_record列表
	 */
	public List<Vexperiment_record> listVexperiment_recordByMap(Map<String, Object> params) {

		logger.debug(this.getClass().getName() + ".listVexperiment_recordByMap()");
		return (List<Vexperiment_record>) svcvexperiment_record.listByMap(params);
	}

	/***
	 * 查询，返回Vexperiment_record列表
	 * 
	 * @param params  查询条件（可以多个）
	 * @param ordlist 排序条件（可以多个）
	 * @return Vexperiment_record列表
	 */
	public List<Vexperiment_record> listVexperiment_recordByMap(Map<String, Object> params, List<KeyAndValue> ordlist) {

		logger.debug(this.getClass().getName() + ".listVexperiment_recordByMap()");
		// Map<String, Object> params = new HashMap<String, Object>();
		// params.put(Vexperiment_record.ID, 0);
		// List<KeyAndValue> ordlist = new ArrayList<KeyAndValue>();
		// ordlist.add(new KeyAndValue(Vexperiment_record.ID, "desc"));
		QueryWrapper<Vexperiment_record> queryWrapper = new QueryWrapper<>();
		if (params.size() > 0) {
			queryWrapper.allEq(params);
		}
		for (KeyAndValue od : ordlist) {
			if (od.getValue().equals("desc")) {
				queryWrapper.orderByDesc((String) od.getKey());
			} else {
				queryWrapper.orderByAsc((String) od.getKey());
			}
		}
		return svcvexperiment_record.list(queryWrapper);
	}

	/***
	 * 按id查询，返回Vexperiment_record
	 * 
	 * @param id
	 * @return Vexperiment_record
	 */
	public Vexperiment_record getVexperiment_recordById(Serializable id) {

		logger.debug(this.getClass().getName() + ".getVexperiment_recordById()");
		return svcvexperiment_record.getById(id);
	}

	/***
	 * 通过唯一值(数字)查找记录，返回Vexperiment_record
	 * 
	 * @param infoid
	 * @return Vexperiment_record
	 */
	public Vexperiment_record getVexperiment_recordByStudent_id(Serializable student_id) {

		logger.debug(this.getClass().getName() + ".getVexperiment_recordByStudent_id()");
		return svcvexperiment_record.getOne(
				new QueryWrapper<Vexperiment_record>().eq(Vexperiment_record.STUDENT_ID, student_id).last("limit 1"));
	}

	/***
	 * 通过Map(多个条件)，查询返回Vexperiment_record
	 * 
	 * @param params 多个条件
	 * @return Vexperiment_record
	 */
	public Vexperiment_record getVexperiment_recordByMap(Map<String, Object> params) {

		logger.debug(this.getClass().getName() + ".getVexperiment_recordByMap()");
		// Map<String, Object> params = new HashMap<String, Object>();
		// params.put(Vexperiment_record.ID, 0);
		return svcvexperiment_record.getOne(new QueryWrapper<Vexperiment_record>().allEq(params).last("limit 1"));
	}

	/***
	 * 查询，返回Vexperiment_record列表
	 * 
	 * @param columnname 排序字段
	 * @return Vexperiment_record列表
	 */
	public List<Vexperiment_record> listVexperiment_recordOrderByAsc(String columnname) {

		logger.debug(this.getClass().getName() + ".listVexperiment_recordOrderByAsc()");
		return svcvexperiment_record.list(new QueryWrapper<Vexperiment_record>().orderByAsc(columnname));
	}

	/***
	 * 查询，返回Vexperiment_record列表
	 * 
	 * @param columnname 排序字段
	 * @return Vexperiment_record列表
	 */
	public List<Vexperiment_record> listVexperiment_recordOrderByDesc(String columnname) {

		logger.debug(this.getClass().getName() + ".listVexperiment_recordOrderByDesc()");
		return svcvexperiment_record.list(new QueryWrapper<Vexperiment_record>().orderByDesc(columnname));
	}

	/***
	 * 查询，返回Vexperiment_record列表
	 * 
	 * @param columnname 排序字段
	 * @return Vexperiment_record列表
	 */
	public List<Vexperiment_record> listVexperiment_recordByMapAsc(Map<String, Object> params, String columnname) {

		logger.debug(this.getClass().getName() + ".listVexperiment_recordByMapAsc()");
		return svcvexperiment_record.list(new QueryWrapper<Vexperiment_record>().allEq(params).orderByAsc(columnname));
	}

	/***
	 * 查询，返回Vexperiment_record列表
	 * 
	 * @param columnname 排序字段
	 * @return Vexperiment_record列表
	 */
	public List<Vexperiment_record> listVexperiment_recordByMapDesc(Map<String, Object> params, String columnname) {

		logger.debug(this.getClass().getName() + ".listVexperiment_recordByMapDesc()");
		return svcvexperiment_record.list(new QueryWrapper<Vexperiment_record>().allEq(params).orderByDesc(columnname));
	}

	/***
	 * 
	 * @param pagenumber 页码
	 * @param pagesize   页面显示数量
	 * @return
	 */
	public PagerList<Vexperiment_record> pagerListVexperiment_record(Integer pagenumber, Integer pagesize) {

		return pagerListVexperiment_record(pagenumber, pagesize, "", new HashMap<String, String>());
	}

	/***
	 * 
	 * @param pagenumber 页码
	 * @param pagesize   页面显示数量
	 * @param keyword    关键字
	 * @return
	 */
	public PagerList<Vexperiment_record> pagerListVexperiment_record(Integer pagenumber, Integer pagesize,
			String keyword) {

		return pagerListVexperiment_record(pagenumber, pagesize, keyword, new HashMap<String, String>());
	}

	/***
	 * 
	 * @param pagenumber 页码
	 * @param pagesize   页面显示数量
	 * @param keyword    关键字
	 * @param sqlin      用in子句包括的id值
	 * @return
	 */
	public PagerList<Vexperiment_record> pagerListVexperiment_record(Integer pagenumber, Integer pagesize,
			String keyword, Map<String, String> sqlin) {
		return pagerListVexperiment_record(pagenumber, pagesize, keyword, sqlin, new HashMap<String, Object>());
	}

	/***
	 * 
	 * @param pagenumber 页码
	 * @param pagesize   页面显示数量
	 * @param keyword    关键字
	 * @param sqlin      用in子句包括的id值
	 * @param params     筛选条件
	 * @return
	 */
	public PagerList<Vexperiment_record> pagerListVexperiment_record(Integer pagenumber, Integer pagesize,
			String keyword, Map<String, String> sqlin, Map<String, Object> params) {
		List<KeyAndValue> ordlist = new ArrayList<KeyAndValue>();
		ordlist.add(new KeyAndValue(Vexperiment_record.ID, "desc"));
		return pagerListVexperiment_record(pagenumber, pagesize, keyword, sqlin, params, ordlist);
	}

	/***
	 * 
	 * @param pagenumber 页码
	 * @param pagesize   页面显示数量
	 * @param keyword    关键字
	 * @param sqlin      用in子句包括的id值
	 * @return
	 */
	public PagerList<Vexperiment_record> pagerListVexperiment_record(Integer pagenumber, Integer pagesize,
			String keyword, Map<String, String> sqlin, Map<String, Object> params, List<KeyAndValue> ordlist) {

		Page<Vexperiment_record> page = new Page<>(pagenumber, pagesize);
		List<Vexperiment_record> list = null;

		QueryWrapper<Vexperiment_record> queryWrapper = new QueryWrapper<>();
		// 读取url中是否包含筛选条件
		String student_id = sqlin.get(Vexperiment_record.STUDENT_ID + "_id");
		String experiment_id = sqlin.get(Vexperiment_record.EXPERIMENT_ID + "_id");
		String curriculum_id = sqlin.get(Vexperiment_record.CURRICULUM_ID + "_id");
		String subject_id = sqlin.get(Vexperiment_record.SUBJECT_ID + "_id");
		String user_id = sqlin.get(Vexperiment_record.USER_ID + "_id");
		String student_group_id = sqlin.get(Vexperiment_record.STUDENT_GROUP_ID + "_id");

		if (params.size() > 0) {
			queryWrapper.allEq(params);
		}
		if (StringUtils.isBlank(keyword) && StringUtils.isBlank(student_id) && StringUtils.isBlank(experiment_id)
				&& StringUtils.isBlank(curriculum_id) && StringUtils.isBlank(subject_id) && StringUtils.isBlank(user_id)
				&& StringUtils.isBlank(student_group_id)) {

			// --------1.准确匹配模式---------

		} else {
			// --------2.模糊匹配模式---------
			// 添加关键字模糊查找条件
			if (!StringUtils.isBlank(keyword)) {
				String kwss = keyword;
				queryWrapper.and(wr -> wr.like(Vexperiment_record.TRUENAME, kwss).or()
						.like(Vexperiment_record.SNO, kwss).or().like(Vexperiment_record.SNO_EXP, kwss).or()
						.like(Vexperiment_record.CLASSCODE, kwss).or().like(Vexperiment_record.STUDENT_GROUP_CODE, kwss)
						.or().like(Vexperiment_record.STUDENT_GROUP_NAME, kwss).or()
						.like(Vexperiment_record.COMMENT, kwss).or().like(Vexperiment_record.MAINFLOW, kwss).or()
						.like(Vexperiment_record.REPORT, kwss).or().like(Vexperiment_record.RESULT, kwss).or()
						.like(Vexperiment_record.SCORESCRIPT, kwss).or().like(Vexperiment_record.WECHAT_OPENID, kwss)
						.or().like(Vexperiment_record.EXPERIMENT_TITLE, kwss).or()
						.like(Vexperiment_record.EXPERIMENT_CONTENT, kwss).or()
						.like(Vexperiment_record.EXPERIMENT_PURPOSES_REQUIREMENT, kwss).or()
						.like(Vexperiment_record.SUBJECT_NAME, kwss));
			}
			// 添加id使用in语句筛选
			if (!StringUtils.isBlank(student_id)) {
				queryWrapper.inSql(Vexperiment_record.STUDENT_ID, student_id);
			}
			if (!StringUtils.isBlank(experiment_id)) {
				queryWrapper.inSql(Vexperiment_record.EXPERIMENT_ID, experiment_id);
			}
			if (!StringUtils.isBlank(curriculum_id)) {
				queryWrapper.inSql(Vexperiment_record.CURRICULUM_ID, curriculum_id);
			}
			if (!StringUtils.isBlank(subject_id)) {
				queryWrapper.inSql(Vexperiment_record.SUBJECT_ID, subject_id);
			}
			if (!StringUtils.isBlank(user_id)) {
				queryWrapper.inSql(Vexperiment_record.USER_ID, user_id);
			}
			if (!StringUtils.isBlank(student_group_id)) {
				queryWrapper.inSql(Vexperiment_record.STUDENT_GROUP_ID, student_group_id);
			}
			// --------2.模糊匹配模式---------
		}
		for (KeyAndValue od : ordlist) {
			if (od.getValue().equals("desc")) {
				queryWrapper.orderByDesc((String) od.getKey());
			} else {
				queryWrapper.orderByAsc((String) od.getKey());
			}
		}
		list = svcvexperiment_record.page(page, queryWrapper).getRecords();
		// 清理数据,标注关键字，范围：所有字符型
		for (int i = 0; i < list.size(); i++) {
			// 如果头像为空，加载默认头像
			// if (StringUtils.isBlank(list.get(i).getWechat_headimgurl())
			// || list.get(i).getWechat_headimgurl().equals("0")) {
			// list.get(i).setWechat_headimgurl(Common.userheadimgurl);
			// }
			// 标注关键字，范围：所有字符型
			if (!StringUtils.isBlank(keyword)) {
				// 避免空值出现错误
				try {

					list.get(i)
							.setTruename((list.get(i).getTruename().replace(keyword, Common.getKeywordSpan(keyword))));
					list.get(i).setSno((list.get(i).getSno().replace(keyword, Common.getKeywordSpan(keyword))));
					list.get(i).setSno_exp((list.get(i).getSno_exp().replace(keyword, Common.getKeywordSpan(keyword))));
					list.get(i).setClasscode(
							(list.get(i).getClasscode().replace(keyword, Common.getKeywordSpan(keyword))));
					list.get(i).setStudent_group_code(
							(list.get(i).getStudent_group_code().replace(keyword, Common.getKeywordSpan(keyword))));
					list.get(i).setStudent_group_name(
							(list.get(i).getStudent_group_name().replace(keyword, Common.getKeywordSpan(keyword))));
					list.get(i).setComment((list.get(i).getComment().replace(keyword, Common.getKeywordSpan(keyword))));
					list.get(i)
							.setMainflow((list.get(i).getMainflow().replace(keyword, Common.getKeywordSpan(keyword))));
					list.get(i).setReport((list.get(i).getReport().replace(keyword, Common.getKeywordSpan(keyword))));
					list.get(i).setResult((list.get(i).getResult().replace(keyword, Common.getKeywordSpan(keyword))));
					list.get(i).setScorescript(
							(list.get(i).getScorescript().replace(keyword, Common.getKeywordSpan(keyword))));
					list.get(i).setWechat_openid(
							(list.get(i).getWechat_openid().replace(keyword, Common.getKeywordSpan(keyword))));
					list.get(i).setExperiment_title(
							(list.get(i).getExperiment_title().replace(keyword, Common.getKeywordSpan(keyword))));
					list.get(i).setExperiment_content(
							(list.get(i).getExperiment_content().replace(keyword, Common.getKeywordSpan(keyword))));
					list.get(i).setExperiment_purposes_requirement((list.get(i).getExperiment_purposes_requirement()
							.replace(keyword, Common.getKeywordSpan(keyword))));
					list.get(i).setSubject_name(
							(list.get(i).getSubject_name().replace(keyword, Common.getKeywordSpan(keyword))));
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		}

		Pager<Vexperiment_record> pager = new Pager<>(page);
		PagerList<Vexperiment_record> pagerList = new PagerList<>(pager, list);

		return pagerList;
	}

	/***
	 * 保持新的实体，返回是否成功
	 * 
	 * @param it 实体
	 * @return 是否成功
	 */
	public Boolean saveVexperiment_record(Vexperiment_record it) {

		logger.debug(this.getClass().getName() + ".saveVexperiment_record()");
		return svcvexperiment_record.save(it);
	}

	/***
	 * 按id删除，返回是否成功
	 * 
	 * @param id
	 * @return 是否成功
	 */
	public Boolean removeVexperiment_recordById(Serializable id) {

		logger.debug(this.getClass().getName() + ".removeVexperiment_recordById()");
		return svcvexperiment_record.removeById(id);
	}

	/***
	 * 按id修改实体，返回布尔值，是否成功
	 * 
	 * @param it 实体
	 * @return 是否成功
	 */
	public Boolean updateVexperiment_recordById(Integer student_id, Integer experiment_id, Integer curriculum_id,
			String truename, String sno, String sno_exp, String classcode, Integer score,
			Boolean student_group_is_actived, Boolean student_is_actived, Boolean curriculum_is_actived,
			Boolean experiment_curriculum_is_actived, Boolean subject_is_actived, String student_group_code,
			String student_group_name, String comment, String mainflow, String report, String result, Long submit,
			String scorescript, Long update_gmt, String wechat_openid, String experiment_title,
			String experiment_content, String experiment_purposes_requirement, String subject_name, Integer subject_id,
			Integer user_id, Long closing_gmt, Long opening_gmt, Integer curriculum_student_groupid,
			Integer student_group_id, Integer reviewstate, Integer experiment_curriculumid, Integer id) {

		logger.debug(this.getClass().getName() + ".updateVexperiment_recordById()");
		UpdateWrapper<Vexperiment_record> uwr = new UpdateWrapper<>();
		uwr.set(Vexperiment_record.STUDENT_ID, student_id);
		uwr.set(Vexperiment_record.EXPERIMENT_ID, experiment_id);
		uwr.set(Vexperiment_record.CURRICULUM_ID, curriculum_id);
		uwr.set(Vexperiment_record.TRUENAME, truename);
		uwr.set(Vexperiment_record.SNO, sno);
		uwr.set(Vexperiment_record.SNO_EXP, sno_exp);
		uwr.set(Vexperiment_record.CLASSCODE, classcode);
		uwr.set(Vexperiment_record.SCORE, score);
		uwr.set(Vexperiment_record.STUDENT_GROUP_IS_ACTIVED, student_group_is_actived);
		uwr.set(Vexperiment_record.STUDENT_IS_ACTIVED, student_is_actived);
		uwr.set(Vexperiment_record.CURRICULUM_IS_ACTIVED, curriculum_is_actived);
		uwr.set(Vexperiment_record.EXPERIMENT_CURRICULUM_IS_ACTIVED, experiment_curriculum_is_actived);
		uwr.set(Vexperiment_record.SUBJECT_IS_ACTIVED, subject_is_actived);
		uwr.set(Vexperiment_record.STUDENT_GROUP_CODE, student_group_code);
		uwr.set(Vexperiment_record.STUDENT_GROUP_NAME, student_group_name);
		uwr.set(Vexperiment_record.COMMENT, comment);
		uwr.set(Vexperiment_record.MAINFLOW, mainflow);
		uwr.set(Vexperiment_record.REPORT, report);
		uwr.set(Vexperiment_record.RESULT, result);
		uwr.set(Vexperiment_record.SUBMIT, submit);
		uwr.set(Vexperiment_record.SCORESCRIPT, scorescript);
		uwr.set(Vexperiment_record.UPDATE_GMT, update_gmt);
		uwr.set(Vexperiment_record.WECHAT_OPENID, wechat_openid);
		uwr.set(Vexperiment_record.EXPERIMENT_TITLE, experiment_title);
		uwr.set(Vexperiment_record.EXPERIMENT_CONTENT, experiment_content);
		uwr.set(Vexperiment_record.EXPERIMENT_PURPOSES_REQUIREMENT, experiment_purposes_requirement);
		uwr.set(Vexperiment_record.SUBJECT_NAME, subject_name);
		uwr.set(Vexperiment_record.SUBJECT_ID, subject_id);
		uwr.set(Vexperiment_record.USER_ID, user_id);
		uwr.set(Vexperiment_record.CLOSING_GMT, closing_gmt);
		uwr.set(Vexperiment_record.OPENING_GMT, opening_gmt);
		uwr.set(Vexperiment_record.CURRICULUM_STUDENT_GROUPID, curriculum_student_groupid);
		uwr.set(Vexperiment_record.STUDENT_GROUP_ID, student_group_id);
		uwr.set(Vexperiment_record.REVIEWSTATE, reviewstate);
		uwr.set(Vexperiment_record.EXPERIMENT_CURRICULUMID, experiment_curriculumid);

		uwr.eq(Vexperiment_record.ID, id);
		// 视图需要定制修改方法！
		// return svcvexperiment_record.update(uwr);
		return false;
	}

	/***
	 * 按id修改实体，返回是否成功
	 * 
	 * @param it 实体
	 * @return 是否成功
	 */
	public Boolean updateVexperiment_recordById(Vexperiment_record it) {

		logger.debug(this.getClass().getName() + ".updateVexperiment_recordById()");
		return svcvexperiment_record.updateById(it);
	}

	/***
	 * 统计当前表的数量
	 * 
	 * @return
	 */
	public Integer countVexperiment_record() {
		return svcvexperiment_record.count();
	}

	/***
	 * 统计当前表的数量
	 * 
	 * @return
	 */
	public Integer countVexperiment_record(QueryWrapper<Vexperiment_record> queryWrapper) {
		return svcvexperiment_record.count(queryWrapper);
	}

	/***
	 * 按自定义查询统计,返回map
	 * 
	 * @return
	 */
	public Map<String, Integer> statVexperiment_recordGroupbyId() {
		List<Map<String, Object>> list = svcvexperiment_record.listMaps(new QueryWrapper<Vexperiment_record>()
				.select(Vexperiment_record.TRUENAME, "count(*)").eq(Vexperiment_record.STUDENT_ID, 0)
				.groupBy(Vexperiment_record.ID).orderByAsc(Vexperiment_record.ID));
		return Util.listmapToMap(list, Vexperiment_record.TRUENAME, "count(*)");
	}

	/***
	 * 按自定义查询统计,返回map
	 * 
	 * @return
	 */
	public Map<String, Integer> statVexperiment_recordGroupbyStudent_id() {

		return svcvexperiment_record.statMapByFieldname(Vexperiment_record.STUDENT_ID);
	}

	// TODO:--------------manageVexperiment_record-end----------------
	// TODO:--------------manageVexperiment_record_mini-begin----------------
	/***
	 * 统计Vexperiment_record_mini中，指定字段的最大值列表
	 * 
	 * @param fieldname 需要统计的字段
	 * @return Vexperiment_record_mini表，指定字段中的最大值
	 */
	public Integer maxVexperiment_record_mini(String fieldname) {

		int rtv = 0;
		try {
			rtv = svcvexperiment_record_mini.max(fieldname);
		} catch (Exception e) {
		}
		return rtv;
	}

	/***
	 * 查询全部，返回一个map，用于数量较少时的映射
	 * 
	 * @return
	 */
	public Map<Integer, String> mapVexperiment_record_mini() {
		List<Vexperiment_record_mini> list = svcvexperiment_record_mini.list();
		Map<Integer, String> map = new HashMap<Integer, String>();
		for (int i = 0; i < list.size(); i++) {
			map.put(list.get(i).getId(), list.get(i).getTruename());
		}
		return map;
	}

	public Map<Integer, String> mapVexperiment_record_mini(Map<String, Object> params) {
		List<Vexperiment_record_mini> list = listVexperiment_record_miniByMap(params);
		Map<Integer, String> map = new HashMap<Integer, String>();
		for (int i = 0; i < list.size(); i++) {
			map.put(list.get(i).getId(), list.get(i).getTruename());
		}
		return map;
	}

	/***
	 * 查询，返回Vexperiment_record_mini列表
	 * 
	 * @return Vexperiment_record_mini列表
	 */
	public List<Vexperiment_record_mini> listVexperiment_record_mini() {

		Map<String, Object> params = new HashMap<String, Object>();
		return (List<Vexperiment_record_mini>) svcvexperiment_record_mini.listByMap(params);
	}

	/***
	 * 查询，返回Vexperiment_record_mini列表
	 * 
	 * @param params 查询条件
	 * @return Vexperiment_record_mini列表
	 */
	public List<Vexperiment_record_mini> listVexperiment_record_miniByMap(Map<String, Object> params) {

		logger.debug(this.getClass().getName() + ".listVexperiment_record_miniByMap()");
		return (List<Vexperiment_record_mini>) svcvexperiment_record_mini.listByMap(params);
	}

	/***
	 * 查询，返回Vexperiment_record_mini列表
	 * 
	 * @param params  查询条件（可以多个）
	 * @param ordlist 排序条件（可以多个）
	 * @return Vexperiment_record_mini列表
	 */
	public List<Vexperiment_record_mini> listVexperiment_record_miniByMap(Map<String, Object> params,
			List<KeyAndValue> ordlist) {

		logger.debug(this.getClass().getName() + ".listVexperiment_record_miniByMap()");
		// Map<String, Object> params = new HashMap<String, Object>();
		// params.put(Vexperiment_record_mini.ID, 0);
		// List<KeyAndValue> ordlist = new ArrayList<KeyAndValue>();
		// ordlist.add(new KeyAndValue(Vexperiment_record_mini.ID, "desc"));
		QueryWrapper<Vexperiment_record_mini> queryWrapper = new QueryWrapper<>();
		if (params.size() > 0) {
			queryWrapper.allEq(params);
		}
		for (KeyAndValue od : ordlist) {
			if (od.getValue().equals("desc")) {
				queryWrapper.orderByDesc((String) od.getKey());
			} else {
				queryWrapper.orderByAsc((String) od.getKey());
			}
		}
		return svcvexperiment_record_mini.list(queryWrapper);
	}

	/***
	 * 按id查询，返回Vexperiment_record_mini
	 * 
	 * @param id
	 * @return Vexperiment_record_mini
	 */
	public Vexperiment_record_mini getVexperiment_record_miniById(Serializable id) {

		logger.debug(this.getClass().getName() + ".getVexperiment_record_miniById()");
		return svcvexperiment_record_mini.getById(id);
	}

	/***
	 * 通过唯一值(数字)查找记录，返回Vexperiment_record_mini
	 * 
	 * @param infoid
	 * @return Vexperiment_record_mini
	 */
	public Vexperiment_record_mini getVexperiment_record_miniByStudent_id(Serializable student_id) {

		logger.debug(this.getClass().getName() + ".getVexperiment_record_miniByStudent_id()");
		return svcvexperiment_record_mini.getOne(new QueryWrapper<Vexperiment_record_mini>()
				.eq(Vexperiment_record_mini.STUDENT_ID, student_id).last("limit 1"));
	}

	/***
	 * 通过Map(多个条件)，查询返回Vexperiment_record_mini
	 * 
	 * @param params 多个条件
	 * @return Vexperiment_record_mini
	 */
	public Vexperiment_record_mini getVexperiment_record_miniByMap(Map<String, Object> params) {

		logger.debug(this.getClass().getName() + ".getVexperiment_record_miniByMap()");
		// Map<String, Object> params = new HashMap<String, Object>();
		// params.put(Vexperiment_record_mini.ID, 0);
		return svcvexperiment_record_mini
				.getOne(new QueryWrapper<Vexperiment_record_mini>().allEq(params).last("limit 1"));
	}

	/***
	 * 查询，返回Vexperiment_record_mini列表
	 * 
	 * @param columnname 排序字段
	 * @return Vexperiment_record_mini列表
	 */
	public List<Vexperiment_record_mini> listVexperiment_record_miniOrderByAsc(String columnname) {

		logger.debug(this.getClass().getName() + ".listVexperiment_record_miniOrderByAsc()");
		return svcvexperiment_record_mini.list(new QueryWrapper<Vexperiment_record_mini>().orderByAsc(columnname));
	}

	/***
	 * 查询，返回Vexperiment_record_mini列表
	 * 
	 * @param columnname 排序字段
	 * @return Vexperiment_record_mini列表
	 */
	public List<Vexperiment_record_mini> listVexperiment_record_miniOrderByDesc(String columnname) {

		logger.debug(this.getClass().getName() + ".listVexperiment_record_miniOrderByDesc()");
		return svcvexperiment_record_mini.list(new QueryWrapper<Vexperiment_record_mini>().orderByDesc(columnname));
	}

	/***
	 * 查询，返回Vexperiment_record_mini列表
	 * 
	 * @param columnname 排序字段
	 * @return Vexperiment_record_mini列表
	 */
	public List<Vexperiment_record_mini> listVexperiment_record_miniByMapAsc(Map<String, Object> params,
			String columnname) {

		logger.debug(this.getClass().getName() + ".listVexperiment_record_miniByMapAsc()");
		return svcvexperiment_record_mini
				.list(new QueryWrapper<Vexperiment_record_mini>().allEq(params).orderByAsc(columnname));
	}

	/***
	 * 查询，返回Vexperiment_record_mini列表
	 * 
	 * @param columnname 排序字段
	 * @return Vexperiment_record_mini列表
	 */
	public List<Vexperiment_record_mini> listVexperiment_record_miniByMapDesc(Map<String, Object> params,
			String columnname) {

		logger.debug(this.getClass().getName() + ".listVexperiment_record_miniByMapDesc()");
		return svcvexperiment_record_mini
				.list(new QueryWrapper<Vexperiment_record_mini>().allEq(params).orderByDesc(columnname));
	}

	/***
	 * 
	 * @param pagenumber 页码
	 * @param pagesize   页面显示数量
	 * @return
	 */
	public PagerList<Vexperiment_record_mini> pagerListVexperiment_record_mini(Integer pagenumber, Integer pagesize) {

		return pagerListVexperiment_record_mini(pagenumber, pagesize, "", new HashMap<String, String>());
	}

	/***
	 * 
	 * @param pagenumber 页码
	 * @param pagesize   页面显示数量
	 * @param keyword    关键字
	 * @return
	 */
	public PagerList<Vexperiment_record_mini> pagerListVexperiment_record_mini(Integer pagenumber, Integer pagesize,
			String keyword) {

		return pagerListVexperiment_record_mini(pagenumber, pagesize, keyword, new HashMap<String, String>());
	}

	/***
	 * 
	 * @param pagenumber 页码
	 * @param pagesize   页面显示数量
	 * @param keyword    关键字
	 * @param sqlin      用in子句包括的id值
	 * @return
	 */
	public PagerList<Vexperiment_record_mini> pagerListVexperiment_record_mini(Integer pagenumber, Integer pagesize,
			String keyword, Map<String, String> sqlin) {
		return pagerListVexperiment_record_mini(pagenumber, pagesize, keyword, sqlin, new HashMap<String, Object>());
	}

	/***
	 * 
	 * @param pagenumber 页码
	 * @param pagesize   页面显示数量
	 * @param keyword    关键字
	 * @param sqlin      用in子句包括的id值
	 * @param params     筛选条件
	 * @return
	 */
	public PagerList<Vexperiment_record_mini> pagerListVexperiment_record_mini(Integer pagenumber, Integer pagesize,
			String keyword, Map<String, String> sqlin, Map<String, Object> params) {
		List<KeyAndValue> ordlist = new ArrayList<KeyAndValue>();
		ordlist.add(new KeyAndValue(Vexperiment_record_mini.ID, "desc"));
		return pagerListVexperiment_record_mini(pagenumber, pagesize, keyword, sqlin, params, ordlist);
	}

	/***
	 * 
	 * @param pagenumber 页码
	 * @param pagesize   页面显示数量
	 * @param keyword    关键字
	 * @param sqlin      用in子句包括的id值
	 * @return
	 */
	public PagerList<Vexperiment_record_mini> pagerListVexperiment_record_mini(Integer pagenumber, Integer pagesize,
			String keyword, Map<String, String> sqlin, Map<String, Object> params, List<KeyAndValue> ordlist) {

		Page<Vexperiment_record_mini> page = new Page<>(pagenumber, pagesize);
		List<Vexperiment_record_mini> list = null;

		QueryWrapper<Vexperiment_record_mini> queryWrapper = new QueryWrapper<>();
		// 读取url中是否包含筛选条件
		String student_id = sqlin.get(Vexperiment_record_mini.STUDENT_ID + "_id");
		String experiment_id = sqlin.get(Vexperiment_record_mini.EXPERIMENT_ID + "_id");
		String curriculum_id = sqlin.get(Vexperiment_record_mini.CURRICULUM_ID + "_id");
		String subject_id = sqlin.get(Vexperiment_record_mini.SUBJECT_ID + "_id");
		String user_id = sqlin.get(Vexperiment_record_mini.USER_ID + "_id");
		String student_group_id = sqlin.get(Vexperiment_record_mini.STUDENT_GROUP_ID + "_id");

		if (params.size() > 0) {
			queryWrapper.allEq(params);
		}
		if (StringUtils.isBlank(keyword) && StringUtils.isBlank(student_id) && StringUtils.isBlank(experiment_id)
				&& StringUtils.isBlank(curriculum_id) && StringUtils.isBlank(subject_id) && StringUtils.isBlank(user_id)
				&& StringUtils.isBlank(student_group_id)) {

			// --------1.准确匹配模式---------

		} else {
			// --------2.模糊匹配模式---------
			// 添加关键字模糊查找条件
			if (!StringUtils.isBlank(keyword)) {
				String kwss = keyword;
				queryWrapper.and(wr -> wr.like(Vexperiment_record_mini.TRUENAME, kwss).or()
						.like(Vexperiment_record_mini.SNO, kwss).or().like(Vexperiment_record_mini.SNO_EXP, kwss).or()
						.like(Vexperiment_record_mini.CLASSCODE, kwss).or()
						.like(Vexperiment_record_mini.STUDENT_GROUP_CODE, kwss).or()
						.like(Vexperiment_record_mini.STUDENT_GROUP_NAME, kwss).or()
						.like(Vexperiment_record_mini.SCORESCRIPT, kwss).or()
						.like(Vexperiment_record_mini.WECHAT_OPENID, kwss).or()
						.like(Vexperiment_record_mini.EXPERIMENT_TITLE, kwss).or()
						.like(Vexperiment_record_mini.SUBJECT_NAME, kwss));
			}
			// 添加id使用in语句筛选
			if (!StringUtils.isBlank(student_id)) {
				queryWrapper.inSql(Vexperiment_record_mini.STUDENT_ID, student_id);
			}
			if (!StringUtils.isBlank(experiment_id)) {
				queryWrapper.inSql(Vexperiment_record_mini.EXPERIMENT_ID, experiment_id);
			}
			if (!StringUtils.isBlank(curriculum_id)) {
				queryWrapper.inSql(Vexperiment_record_mini.CURRICULUM_ID, curriculum_id);
			}
			if (!StringUtils.isBlank(subject_id)) {
				queryWrapper.inSql(Vexperiment_record_mini.SUBJECT_ID, subject_id);
			}
			if (!StringUtils.isBlank(user_id)) {
				queryWrapper.inSql(Vexperiment_record_mini.USER_ID, user_id);
			}
			if (!StringUtils.isBlank(student_group_id)) {
				queryWrapper.inSql(Vexperiment_record_mini.STUDENT_GROUP_ID, student_group_id);
			}
			// --------2.模糊匹配模式---------
		}
		for (KeyAndValue od : ordlist) {
			if (od.getValue().equals("desc")) {
				queryWrapper.orderByDesc((String) od.getKey());
			} else {
				queryWrapper.orderByAsc((String) od.getKey());
			}
		}
		list = svcvexperiment_record_mini.page(page, queryWrapper).getRecords();
		// 清理数据,标注关键字，范围：所有字符型
		for (int i = 0; i < list.size(); i++) {
			// 如果头像为空，加载默认头像
			// if (StringUtils.isBlank(list.get(i).getWechat_headimgurl())
			// || list.get(i).getWechat_headimgurl().equals("0")) {
			// list.get(i).setWechat_headimgurl(Common.userheadimgurl);
			// }
			// 标注关键字，范围：所有字符型
			if (!StringUtils.isBlank(keyword)) {
				// 避免空值出现错误
				try {

					list.get(i)
							.setTruename((list.get(i).getTruename().replace(keyword, Common.getKeywordSpan(keyword))));
					list.get(i).setSno((list.get(i).getSno().replace(keyword, Common.getKeywordSpan(keyword))));
					list.get(i).setSno_exp((list.get(i).getSno_exp().replace(keyword, Common.getKeywordSpan(keyword))));
					list.get(i).setClasscode(
							(list.get(i).getClasscode().replace(keyword, Common.getKeywordSpan(keyword))));
					list.get(i).setStudent_group_code(
							(list.get(i).getStudent_group_code().replace(keyword, Common.getKeywordSpan(keyword))));
					list.get(i).setStudent_group_name(
							(list.get(i).getStudent_group_name().replace(keyword, Common.getKeywordSpan(keyword))));
					list.get(i).setScorescript(
							(list.get(i).getScorescript().replace(keyword, Common.getKeywordSpan(keyword))));
					list.get(i).setWechat_openid(
							(list.get(i).getWechat_openid().replace(keyword, Common.getKeywordSpan(keyword))));
					list.get(i).setExperiment_title(
							(list.get(i).getExperiment_title().replace(keyword, Common.getKeywordSpan(keyword))));
					list.get(i).setSubject_name(
							(list.get(i).getSubject_name().replace(keyword, Common.getKeywordSpan(keyword))));
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		}

		Pager<Vexperiment_record_mini> pager = new Pager<>(page);
		PagerList<Vexperiment_record_mini> pagerList = new PagerList<>(pager, list);

		return pagerList;
	}

	/***
	 * 保持新的实体，返回是否成功
	 * 
	 * @param it 实体
	 * @return 是否成功
	 */
	public Boolean saveVexperiment_record_mini(Vexperiment_record_mini it) {

		logger.debug(this.getClass().getName() + ".saveVexperiment_record_mini()");
		return svcvexperiment_record_mini.save(it);
	}

	/***
	 * 按id删除，返回是否成功
	 * 
	 * @param id
	 * @return 是否成功
	 */
	public Boolean removeVexperiment_record_miniById(Serializable id) {

		logger.debug(this.getClass().getName() + ".removeVexperiment_record_miniById()");
		return svcvexperiment_record_mini.removeById(id);
	}

	/***
	 * 按id修改实体，返回布尔值，是否成功
	 * 
	 * @param it 实体
	 * @return 是否成功
	 */
	public Boolean updateVexperiment_record_miniById(Integer student_id, Integer experiment_id, Integer curriculum_id,
			String truename, String sno, String sno_exp, String classcode, Integer score,
			Boolean student_group_is_actived, Boolean student_is_actived, Boolean curriculum_is_actived,
			Boolean experiment_curriculum_is_actived, Boolean subject_is_actived, String student_group_code,
			String student_group_name, Long submit, String scorescript, Long update_gmt, String wechat_openid,
			String experiment_title, Boolean experiment_is_actived, String subject_name, Integer subject_id,
			Integer user_id, Long closing_gmt, Long opening_gmt, Integer curriculum_student_groupid,
			Integer student_group_id, Integer reviewstate, Integer experiment_curriculumid, Integer id) {

		logger.debug(this.getClass().getName() + ".updateVexperiment_record_miniById()");
		UpdateWrapper<Vexperiment_record_mini> uwr = new UpdateWrapper<>();
		uwr.set(Vexperiment_record_mini.STUDENT_ID, student_id);
		uwr.set(Vexperiment_record_mini.EXPERIMENT_ID, experiment_id);
		uwr.set(Vexperiment_record_mini.CURRICULUM_ID, curriculum_id);
		uwr.set(Vexperiment_record_mini.TRUENAME, truename);
		uwr.set(Vexperiment_record_mini.SNO, sno);
		uwr.set(Vexperiment_record_mini.SNO_EXP, sno_exp);
		uwr.set(Vexperiment_record_mini.CLASSCODE, classcode);
		uwr.set(Vexperiment_record_mini.SCORE, score);
		uwr.set(Vexperiment_record_mini.STUDENT_GROUP_IS_ACTIVED, student_group_is_actived);
		uwr.set(Vexperiment_record_mini.STUDENT_IS_ACTIVED, student_is_actived);
		uwr.set(Vexperiment_record_mini.CURRICULUM_IS_ACTIVED, curriculum_is_actived);
		uwr.set(Vexperiment_record_mini.EXPERIMENT_CURRICULUM_IS_ACTIVED, experiment_curriculum_is_actived);
		uwr.set(Vexperiment_record_mini.SUBJECT_IS_ACTIVED, subject_is_actived);
		uwr.set(Vexperiment_record_mini.STUDENT_GROUP_CODE, student_group_code);
		uwr.set(Vexperiment_record_mini.STUDENT_GROUP_NAME, student_group_name);
		uwr.set(Vexperiment_record_mini.SUBMIT, submit);
		uwr.set(Vexperiment_record_mini.SCORESCRIPT, scorescript);
		uwr.set(Vexperiment_record_mini.UPDATE_GMT, update_gmt);
		uwr.set(Vexperiment_record_mini.WECHAT_OPENID, wechat_openid);
		uwr.set(Vexperiment_record_mini.EXPERIMENT_TITLE, experiment_title);
		uwr.set(Vexperiment_record_mini.EXPERIMENT_IS_ACTIVED, experiment_is_actived);
		uwr.set(Vexperiment_record_mini.SUBJECT_NAME, subject_name);
		uwr.set(Vexperiment_record_mini.SUBJECT_ID, subject_id);
		uwr.set(Vexperiment_record_mini.USER_ID, user_id);
		uwr.set(Vexperiment_record_mini.CLOSING_GMT, closing_gmt);
		uwr.set(Vexperiment_record_mini.OPENING_GMT, opening_gmt);
		uwr.set(Vexperiment_record_mini.CURRICULUM_STUDENT_GROUPID, curriculum_student_groupid);
		uwr.set(Vexperiment_record_mini.STUDENT_GROUP_ID, student_group_id);
		uwr.set(Vexperiment_record_mini.REVIEWSTATE, reviewstate);
		uwr.set(Vexperiment_record_mini.EXPERIMENT_CURRICULUMID, experiment_curriculumid);

		uwr.eq(Vexperiment_record_mini.ID, id);
		// 视图需要定制修改方法！
		// return svcvexperiment_record_mini.update(uwr);
		return false;
	}

	/***
	 * 按id修改实体，返回是否成功
	 * 
	 * @param it 实体
	 * @return 是否成功
	 */
	public Boolean updateVexperiment_record_miniById(Vexperiment_record_mini it) {

		logger.debug(this.getClass().getName() + ".updateVexperiment_record_miniById()");
		return svcvexperiment_record_mini.updateById(it);
	}

	/***
	 * 统计当前表的数量
	 * 
	 * @return
	 */
	public Integer countVexperiment_record_mini() {
		return svcvexperiment_record_mini.count();
	}

	/***
	 * 统计当前表的数量
	 * 
	 * @return
	 */
	public Integer countVexperiment_record_mini(QueryWrapper<Vexperiment_record_mini> queryWrapper) {
		return svcvexperiment_record_mini.count(queryWrapper);
	}

	/***
	 * 按自定义查询统计,返回map
	 * 
	 * @return
	 */
	public Map<String, Integer> statVexperiment_record_miniGroupbyId() {
		List<Map<String, Object>> list = svcvexperiment_record_mini.listMaps(new QueryWrapper<Vexperiment_record_mini>()
				.select(Vexperiment_record_mini.TRUENAME, "count(*)").eq(Vexperiment_record_mini.STUDENT_ID, 0)
				.groupBy(Vexperiment_record_mini.ID).orderByAsc(Vexperiment_record_mini.ID));
		return Util.listmapToMap(list, Vexperiment_record_mini.TRUENAME, "count(*)");
	}

	/***
	 * 按自定义查询统计,返回map
	 * 
	 * @return
	 */
	public Map<String, Integer> statVexperiment_record_miniGroupbyStudent_id() {

		return svcvexperiment_record_mini.statMapByFieldname(Vexperiment_record_mini.STUDENT_ID);
	}

	// TODO:--------------manageVexperiment_record_mini-end----------------
	// TODO:--------------manageVlink_experiment_curriculum-begin----------------
	/***
	 * 统计Vlink_experiment_curriculum中，指定字段的最大值列表
	 * 
	 * @param fieldname 需要统计的字段
	 * @return Vlink_experiment_curriculum表，指定字段中的最大值
	 */
	public Integer maxVlink_experiment_curriculum(String fieldname) {

		int rtv = 0;
		try {
			rtv = svcvlink_experiment_curriculum.max(fieldname);
		} catch (Exception e) {
		}
		return rtv;
	}

	/***
	 * 查询全部，返回一个map，用于数量较少时的映射
	 * 
	 * @return
	 */
	public Map<Integer, String> mapVlink_experiment_curriculum() {
		List<Vlink_experiment_curriculum> list = svcvlink_experiment_curriculum.list();
		Map<Integer, String> map = new HashMap<Integer, String>();
		for (int i = 0; i < list.size(); i++) {
			map.put(list.get(i).getId(), list.get(i).getExperiment_content());
		}
		return map;
	}

	public Map<Integer, String> mapVlink_experiment_curriculum(Map<String, Object> params) {
		List<Vlink_experiment_curriculum> list = listVlink_experiment_curriculumByMap(params);
		Map<Integer, String> map = new HashMap<Integer, String>();
		for (int i = 0; i < list.size(); i++) {
			map.put(list.get(i).getId(), list.get(i).getExperiment_content());
		}
		return map;
	}

	/***
	 * 查询，返回Vlink_experiment_curriculum列表
	 * 
	 * @return Vlink_experiment_curriculum列表
	 */
	public List<Vlink_experiment_curriculum> listVlink_experiment_curriculum() {

		Map<String, Object> params = new HashMap<String, Object>();
		return (List<Vlink_experiment_curriculum>) svcvlink_experiment_curriculum.listByMap(params);
	}

	/***
	 * 查询，返回Vlink_experiment_curriculum列表
	 * 
	 * @param params 查询条件
	 * @return Vlink_experiment_curriculum列表
	 */
	public List<Vlink_experiment_curriculum> listVlink_experiment_curriculumByMap(Map<String, Object> params) {

		logger.debug(this.getClass().getName() + ".listVlink_experiment_curriculumByMap()");
		return (List<Vlink_experiment_curriculum>) svcvlink_experiment_curriculum.listByMap(params);
	}

	/***
	 * 查询，返回Vlink_experiment_curriculum列表
	 * 
	 * @param params  查询条件（可以多个）
	 * @param ordlist 排序条件（可以多个）
	 * @return Vlink_experiment_curriculum列表
	 */
	public List<Vlink_experiment_curriculum> listVlink_experiment_curriculumByMap(Map<String, Object> params,
			List<KeyAndValue> ordlist) {

		logger.debug(this.getClass().getName() + ".listVlink_experiment_curriculumByMap()");
		// Map<String, Object> params = new HashMap<String, Object>();
		// params.put(Vlink_experiment_curriculum.ID, 0);
		// List<KeyAndValue> ordlist = new ArrayList<KeyAndValue>();
		// ordlist.add(new KeyAndValue(Vlink_experiment_curriculum.ID, "desc"));
		QueryWrapper<Vlink_experiment_curriculum> queryWrapper = new QueryWrapper<>();
		if (params.size() > 0) {
			queryWrapper.allEq(params);
		}
		for (KeyAndValue od : ordlist) {
			if (od.getValue().equals("desc")) {
				queryWrapper.orderByDesc((String) od.getKey());
			} else {
				queryWrapper.orderByAsc((String) od.getKey());
			}
		}
		return svcvlink_experiment_curriculum.list(queryWrapper);
	}

	/***
	 * 按id查询，返回Vlink_experiment_curriculum
	 * 
	 * @param id
	 * @return Vlink_experiment_curriculum
	 */
	public Vlink_experiment_curriculum getVlink_experiment_curriculumById(Serializable id) {

		logger.debug(this.getClass().getName() + ".getVlink_experiment_curriculumById()");
		return svcvlink_experiment_curriculum.getById(id);
	}

	/***
	 * 通过唯一值(数字)查找记录，返回Vlink_experiment_curriculum
	 * 
	 * @param infoid
	 * @return Vlink_experiment_curriculum
	 */
	public Vlink_experiment_curriculum getVlink_experiment_curriculumByExperiment_id(Serializable experiment_id) {

		logger.debug(this.getClass().getName() + ".getVlink_experiment_curriculumByExperiment_id()");
		return svcvlink_experiment_curriculum.getOne(new QueryWrapper<Vlink_experiment_curriculum>()
				.eq(Vlink_experiment_curriculum.EXPERIMENT_ID, experiment_id).last("limit 1"));
	}

	/***
	 * 通过Map(多个条件)，查询返回Vlink_experiment_curriculum
	 * 
	 * @param params 多个条件
	 * @return Vlink_experiment_curriculum
	 */
	public Vlink_experiment_curriculum getVlink_experiment_curriculumByMap(Map<String, Object> params) {

		logger.debug(this.getClass().getName() + ".getVlink_experiment_curriculumByMap()");
		// Map<String, Object> params = new HashMap<String, Object>();
		// params.put(Vlink_experiment_curriculum.ID, 0);
		return svcvlink_experiment_curriculum
				.getOne(new QueryWrapper<Vlink_experiment_curriculum>().allEq(params).last("limit 1"));
	}

	/***
	 * 查询，返回Vlink_experiment_curriculum列表
	 * 
	 * @param columnname 排序字段
	 * @return Vlink_experiment_curriculum列表
	 */
	public List<Vlink_experiment_curriculum> listVlink_experiment_curriculumOrderByAsc(String columnname) {

		logger.debug(this.getClass().getName() + ".listVlink_experiment_curriculumOrderByAsc()");
		return svcvlink_experiment_curriculum
				.list(new QueryWrapper<Vlink_experiment_curriculum>().orderByAsc(columnname));
	}

	/***
	 * 查询，返回Vlink_experiment_curriculum列表
	 * 
	 * @param columnname 排序字段
	 * @return Vlink_experiment_curriculum列表
	 */
	public List<Vlink_experiment_curriculum> listVlink_experiment_curriculumOrderByDesc(String columnname) {

		logger.debug(this.getClass().getName() + ".listVlink_experiment_curriculumOrderByDesc()");
		return svcvlink_experiment_curriculum
				.list(new QueryWrapper<Vlink_experiment_curriculum>().orderByDesc(columnname));
	}

	/***
	 * 查询，返回Vlink_experiment_curriculum列表
	 * 
	 * @param columnname 排序字段
	 * @return Vlink_experiment_curriculum列表
	 */
	public List<Vlink_experiment_curriculum> listVlink_experiment_curriculumByMapAsc(Map<String, Object> params,
			String columnname) {

		logger.debug(this.getClass().getName() + ".listVlink_experiment_curriculumByMapAsc()");
		return svcvlink_experiment_curriculum
				.list(new QueryWrapper<Vlink_experiment_curriculum>().allEq(params).orderByAsc(columnname));
	}

	/***
	 * 查询，返回Vlink_experiment_curriculum列表
	 * 
	 * @param columnname 排序字段
	 * @return Vlink_experiment_curriculum列表
	 */
	public List<Vlink_experiment_curriculum> listVlink_experiment_curriculumByMapDesc(Map<String, Object> params,
			String columnname) {

		logger.debug(this.getClass().getName() + ".listVlink_experiment_curriculumByMapDesc()");
		return svcvlink_experiment_curriculum
				.list(new QueryWrapper<Vlink_experiment_curriculum>().allEq(params).orderByDesc(columnname));
	}

	/***
	 * 
	 * @param pagenumber 页码
	 * @param pagesize   页面显示数量
	 * @return
	 */
	public PagerList<Vlink_experiment_curriculum> pagerListVlink_experiment_curriculum(Integer pagenumber,
			Integer pagesize) {

		return pagerListVlink_experiment_curriculum(pagenumber, pagesize, "", new HashMap<String, String>());
	}

	/***
	 * 
	 * @param pagenumber 页码
	 * @param pagesize   页面显示数量
	 * @param keyword    关键字
	 * @return
	 */
	public PagerList<Vlink_experiment_curriculum> pagerListVlink_experiment_curriculum(Integer pagenumber,
			Integer pagesize, String keyword) {

		return pagerListVlink_experiment_curriculum(pagenumber, pagesize, keyword, new HashMap<String, String>());
	}

	/***
	 * 
	 * @param pagenumber 页码
	 * @param pagesize   页面显示数量
	 * @param keyword    关键字
	 * @param sqlin      用in子句包括的id值
	 * @return
	 */
	public PagerList<Vlink_experiment_curriculum> pagerListVlink_experiment_curriculum(Integer pagenumber,
			Integer pagesize, String keyword, Map<String, String> sqlin) {
		return pagerListVlink_experiment_curriculum(pagenumber, pagesize, keyword, sqlin,
				new HashMap<String, Object>());
	}

	/***
	 * 
	 * @param pagenumber 页码
	 * @param pagesize   页面显示数量
	 * @param keyword    关键字
	 * @param sqlin      用in子句包括的id值
	 * @param params     筛选条件
	 * @return
	 */
	public PagerList<Vlink_experiment_curriculum> pagerListVlink_experiment_curriculum(Integer pagenumber,
			Integer pagesize, String keyword, Map<String, String> sqlin, Map<String, Object> params) {
		List<KeyAndValue> ordlist = new ArrayList<KeyAndValue>();
		ordlist.add(new KeyAndValue(Vlink_experiment_curriculum.ID, "desc"));
		return pagerListVlink_experiment_curriculum(pagenumber, pagesize, keyword, sqlin, params, ordlist);
	}

	/***
	 * 
	 * @param pagenumber 页码
	 * @param pagesize   页面显示数量
	 * @param keyword    关键字
	 * @param sqlin      用in子句包括的id值
	 * @return
	 */
	public PagerList<Vlink_experiment_curriculum> pagerListVlink_experiment_curriculum(Integer pagenumber,
			Integer pagesize, String keyword, Map<String, String> sqlin, Map<String, Object> params,
			List<KeyAndValue> ordlist) {

		Page<Vlink_experiment_curriculum> page = new Page<>(pagenumber, pagesize);
		List<Vlink_experiment_curriculum> list = null;

		QueryWrapper<Vlink_experiment_curriculum> queryWrapper = new QueryWrapper<>();
		// 读取url中是否包含筛选条件
		String experiment_id = sqlin.get(Vlink_experiment_curriculum.EXPERIMENT_ID + "_id");
		String curriculum_id = sqlin.get(Vlink_experiment_curriculum.CURRICULUM_ID + "_id");
		String subject_id = sqlin.get(Vlink_experiment_curriculum.SUBJECT_ID + "_id");
		String student_group_id = sqlin.get(Vlink_experiment_curriculum.STUDENT_GROUP_ID + "_id");
		String user_id = sqlin.get(Vlink_experiment_curriculum.USER_ID + "_id");

		if (params.size() > 0) {
			queryWrapper.allEq(params);
		}
		if (StringUtils.isBlank(keyword) && StringUtils.isBlank(experiment_id) && StringUtils.isBlank(curriculum_id)
				&& StringUtils.isBlank(subject_id) && StringUtils.isBlank(student_group_id)
				&& StringUtils.isBlank(user_id)) {

			// --------1.准确匹配模式---------

		} else {
			// --------2.模糊匹配模式---------
			// 添加关键字模糊查找条件
			if (!StringUtils.isBlank(keyword)) {
				String kwss = keyword;
				queryWrapper.and(wr -> wr.like(Vlink_experiment_curriculum.EXPERIMENT_CONTENT, kwss).or()
						.like(Vlink_experiment_curriculum.EXPERIMENT_INTRO, kwss).or()
						.like(Vlink_experiment_curriculum.EXPERIMENT_TITLE, kwss).or()
						.like(Vlink_experiment_curriculum.PURPOSES_REQUIREMENT, kwss).or()
						.like(Vlink_experiment_curriculum.SEMESTER, kwss).or()
						.like(Vlink_experiment_curriculum.STUDENT_GROUP_NAME, kwss).or()
						.like(Vlink_experiment_curriculum.SUBJECT_INTRO, kwss).or()
						.like(Vlink_experiment_curriculum.SUBJECT_NAME, kwss).or()
						.like(Vlink_experiment_curriculum.SUBJECT_ILLUSTRATION, kwss));
			}
			// 添加id使用in语句筛选
			if (!StringUtils.isBlank(experiment_id)) {
				queryWrapper.inSql(Vlink_experiment_curriculum.EXPERIMENT_ID, experiment_id);
			}
			if (!StringUtils.isBlank(curriculum_id)) {
				queryWrapper.inSql(Vlink_experiment_curriculum.CURRICULUM_ID, curriculum_id);
			}
			if (!StringUtils.isBlank(subject_id)) {
				queryWrapper.inSql(Vlink_experiment_curriculum.SUBJECT_ID, subject_id);
			}
			if (!StringUtils.isBlank(student_group_id)) {
				queryWrapper.inSql(Vlink_experiment_curriculum.STUDENT_GROUP_ID, student_group_id);
			}
			if (!StringUtils.isBlank(user_id)) {
				queryWrapper.inSql(Vlink_experiment_curriculum.USER_ID, user_id);
			}
			// --------2.模糊匹配模式---------
		}
		for (KeyAndValue od : ordlist) {
			if (od.getValue().equals("desc")) {
				queryWrapper.orderByDesc((String) od.getKey());
			} else {
				queryWrapper.orderByAsc((String) od.getKey());
			}
		}
		list = svcvlink_experiment_curriculum.page(page, queryWrapper).getRecords();
		// 清理数据,标注关键字，范围：所有字符型
		for (int i = 0; i < list.size(); i++) {
			// 如果头像为空，加载默认头像
			// if (StringUtils.isBlank(list.get(i).getWechat_headimgurl())
			// || list.get(i).getWechat_headimgurl().equals("0")) {
			// list.get(i).setWechat_headimgurl(Common.userheadimgurl);
			// }
			// 标注关键字，范围：所有字符型
			if (!StringUtils.isBlank(keyword)) {
				// 避免空值出现错误
				try {

					list.get(i).setExperiment_content(
							(list.get(i).getExperiment_content().replace(keyword, Common.getKeywordSpan(keyword))));
					list.get(i).setExperiment_intro(
							(list.get(i).getExperiment_intro().replace(keyword, Common.getKeywordSpan(keyword))));
					list.get(i).setExperiment_title(
							(list.get(i).getExperiment_title().replace(keyword, Common.getKeywordSpan(keyword))));
					list.get(i).setPurposes_requirement(
							(list.get(i).getPurposes_requirement().replace(keyword, Common.getKeywordSpan(keyword))));
					list.get(i)
							.setSemester((list.get(i).getSemester().replace(keyword, Common.getKeywordSpan(keyword))));
					list.get(i).setStudent_group_name(
							(list.get(i).getStudent_group_name().replace(keyword, Common.getKeywordSpan(keyword))));
					list.get(i).setSubject_intro(
							(list.get(i).getSubject_intro().replace(keyword, Common.getKeywordSpan(keyword))));
					list.get(i).setSubject_name(
							(list.get(i).getSubject_name().replace(keyword, Common.getKeywordSpan(keyword))));
					list.get(i).setSubject_illustration(
							(list.get(i).getSubject_illustration().replace(keyword, Common.getKeywordSpan(keyword))));
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		}

		Pager<Vlink_experiment_curriculum> pager = new Pager<>(page);
		PagerList<Vlink_experiment_curriculum> pagerList = new PagerList<>(pager, list);

		return pagerList;
	}

	/***
	 * 保持新的实体，返回是否成功
	 * 
	 * @param it 实体
	 * @return 是否成功
	 */
	public Boolean saveVlink_experiment_curriculum(Vlink_experiment_curriculum it) {

		logger.debug(this.getClass().getName() + ".saveVlink_experiment_curriculum()");
		return svcvlink_experiment_curriculum.save(it);
	}

	/***
	 * 按id删除，返回是否成功
	 * 
	 * @param id
	 * @return 是否成功
	 */
	public Boolean removeVlink_experiment_curriculumById(Serializable id) {

		logger.debug(this.getClass().getName() + ".removeVlink_experiment_curriculumById()");
		return svcvlink_experiment_curriculum.removeById(id);
	}

	/***
	 * 按id修改实体，返回布尔值，是否成功
	 * 
	 * @param it 实体
	 * @return 是否成功
	 */
	public Boolean updateVlink_experiment_curriculumById(Integer experiment_id, Integer curriculum_id,
			Integer subject_id, Long opening_gmt, Long closing_gmt, Integer sortid,
			Boolean experiment_curriculum_is_actived, String experiment_content, String experiment_intro,
			String experiment_title, Boolean experiment_is_actived, String purposes_requirement, Integer filesize,
			Integer student_group_id, Integer user_id, String semester, String student_group_name,
			Boolean subject_is_actived, String subject_intro, String subject_name, String subject_illustration,
			Boolean curriculum_is_actived, Integer subject_sortid, Integer id) {

		logger.debug(this.getClass().getName() + ".updateVlink_experiment_curriculumById()");
		UpdateWrapper<Vlink_experiment_curriculum> uwr = new UpdateWrapper<>();
		uwr.set(Vlink_experiment_curriculum.EXPERIMENT_ID, experiment_id);
		uwr.set(Vlink_experiment_curriculum.CURRICULUM_ID, curriculum_id);
		uwr.set(Vlink_experiment_curriculum.SUBJECT_ID, subject_id);
		uwr.set(Vlink_experiment_curriculum.OPENING_GMT, opening_gmt);
		uwr.set(Vlink_experiment_curriculum.CLOSING_GMT, closing_gmt);
		uwr.set(Vlink_experiment_curriculum.SORTID, sortid);
		uwr.set(Vlink_experiment_curriculum.EXPERIMENT_CURRICULUM_IS_ACTIVED, experiment_curriculum_is_actived);
		uwr.set(Vlink_experiment_curriculum.EXPERIMENT_CONTENT, experiment_content);
		uwr.set(Vlink_experiment_curriculum.EXPERIMENT_INTRO, experiment_intro);
		uwr.set(Vlink_experiment_curriculum.EXPERIMENT_TITLE, experiment_title);
		uwr.set(Vlink_experiment_curriculum.EXPERIMENT_IS_ACTIVED, experiment_is_actived);
		uwr.set(Vlink_experiment_curriculum.PURPOSES_REQUIREMENT, purposes_requirement);
		uwr.set(Vlink_experiment_curriculum.FILESIZE, filesize);
		uwr.set(Vlink_experiment_curriculum.STUDENT_GROUP_ID, student_group_id);
		uwr.set(Vlink_experiment_curriculum.USER_ID, user_id);
		uwr.set(Vlink_experiment_curriculum.SEMESTER, semester);
		uwr.set(Vlink_experiment_curriculum.STUDENT_GROUP_NAME, student_group_name);
		uwr.set(Vlink_experiment_curriculum.SUBJECT_IS_ACTIVED, subject_is_actived);
		uwr.set(Vlink_experiment_curriculum.SUBJECT_INTRO, subject_intro);
		uwr.set(Vlink_experiment_curriculum.SUBJECT_NAME, subject_name);
		uwr.set(Vlink_experiment_curriculum.SUBJECT_ILLUSTRATION, subject_illustration);
		uwr.set(Vlink_experiment_curriculum.CURRICULUM_IS_ACTIVED, curriculum_is_actived);
		uwr.set(Vlink_experiment_curriculum.SUBJECT_SORTID, subject_sortid);

		uwr.eq(Vlink_experiment_curriculum.ID, id);
		// 视图需要定制修改方法！
		// return svcvlink_experiment_curriculum.update(uwr);
		return false;
	}

	/***
	 * 按id修改实体，返回是否成功
	 * 
	 * @param it 实体
	 * @return 是否成功
	 */
	public Boolean updateVlink_experiment_curriculumById(Vlink_experiment_curriculum it) {

		logger.debug(this.getClass().getName() + ".updateVlink_experiment_curriculumById()");
		return svcvlink_experiment_curriculum.updateById(it);
	}

	public Boolean moveVlink_experiment_curriculum(String method, String upOrDown, Integer id, String sortColumn) {

		Vlink_experiment_curriculum it = svcvlink_experiment_curriculum.getById(id);
		// 读取当前已有信息
		// SELECT * FROM `column` where column_parentid =0 and sortid<4 order by
		// sortid desc limit 1
		QueryWrapper<Vlink_experiment_curriculum> queryWrapper = new QueryWrapper<>();
		// 同一个父栏目下
		// queryWrapper.eq(Vlink_experiment_curriculum.COLUMN_PARENTID ,
		// it.getColumn_parentid());
		if (method.equals(upOrDown)) {
			queryWrapper.lt(sortColumn, it.getSortid());
			queryWrapper.orderByDesc(sortColumn);
		} else {
			queryWrapper.gt(sortColumn, it.getSortid());
			queryWrapper.orderByAsc(sortColumn);
		}
		queryWrapper.last("limit 1");

		Vlink_experiment_curriculum target = svcvlink_experiment_curriculum.getOne(queryWrapper);

		if (target == null) {
			// 没有
			return false;
		} else {

			UpdateWrapper<Vlink_experiment_curriculum> uwr1 = new UpdateWrapper<>();
			uwr1.set(Vlink_experiment_curriculum.SORTID, target.getSortid());
			uwr1.eq(Vlink_experiment_curriculum.ID, it.getId());

			UpdateWrapper<Vlink_experiment_curriculum> uwr2 = new UpdateWrapper<>();
			uwr2.set(Vlink_experiment_curriculum.SORTID, it.getSortid());
			uwr2.eq(Vlink_experiment_curriculum.ID, target.getId());

			try {
				svcvlink_experiment_curriculum.update(uwr1);
				svcvlink_experiment_curriculum.update(uwr2);
			} catch (Exception e) {
				e.printStackTrace();
				return false;
			}
			return true;
		}
	}

	/***
	 * 统计当前表的数量
	 * 
	 * @return
	 */
	public Integer countVlink_experiment_curriculum() {
		return svcvlink_experiment_curriculum.count();
	}

	/***
	 * 统计当前表的数量
	 * 
	 * @return
	 */
	public Integer countVlink_experiment_curriculum(QueryWrapper<Vlink_experiment_curriculum> queryWrapper) {
		return svcvlink_experiment_curriculum.count(queryWrapper);
	}

	/***
	 * 按自定义查询统计,返回map
	 * 
	 * @return
	 */
	public Map<String, Integer> statVlink_experiment_curriculumGroupbyId() {
		List<Map<String, Object>> list = svcvlink_experiment_curriculum
				.listMaps(new QueryWrapper<Vlink_experiment_curriculum>()
						.select(Vlink_experiment_curriculum.EXPERIMENT_CONTENT, "count(*)")
						.eq(Vlink_experiment_curriculum.EXPERIMENT_ID, 0).groupBy(Vlink_experiment_curriculum.ID)
						.orderByAsc(Vlink_experiment_curriculum.ID));
		return Util.listmapToMap(list, Vlink_experiment_curriculum.EXPERIMENT_CONTENT, "count(*)");
	}

	/***
	 * 按自定义查询统计,返回map
	 * 
	 * @return
	 */
	public Map<String, Integer> statVlink_experiment_curriculumGroupbyExperiment_id() {

		return svcvlink_experiment_curriculum.statMapByFieldname(Vlink_experiment_curriculum.EXPERIMENT_ID);
	}

	// TODO:--------------manageVlink_experiment_curriculum-end----------------
	// TODO:--------------manageVlink_experiment_curriculum_min-begin----------------
	/***
	 * 统计Vlink_experiment_curriculum_min中，指定字段的最大值列表
	 * 
	 * @param fieldname 需要统计的字段
	 * @return Vlink_experiment_curriculum_min表，指定字段中的最大值
	 */
	public Integer maxVlink_experiment_curriculum_min(String fieldname) {

		int rtv = 0;
		try {
			rtv = svcvlink_experiment_curriculum_min.max(fieldname);
		} catch (Exception e) {
		}
		return rtv;
	}

	/***
	 * 查询全部，返回一个map，用于数量较少时的映射
	 * 
	 * @return
	 */
	public Map<Integer, String> mapVlink_experiment_curriculum_min() {
		List<Vlink_experiment_curriculum_min> list = svcvlink_experiment_curriculum_min.list();
		Map<Integer, String> map = new HashMap<Integer, String>();
		for (int i = 0; i < list.size(); i++) {
			map.put(list.get(i).getId(), list.get(i).getExperiment_title());
		}
		return map;
	}

	public Map<Integer, String> mapVlink_experiment_curriculum_min(Map<String, Object> params) {
		List<Vlink_experiment_curriculum_min> list = listVlink_experiment_curriculum_minByMap(params);
		Map<Integer, String> map = new HashMap<Integer, String>();
		for (int i = 0; i < list.size(); i++) {
			map.put(list.get(i).getId(), list.get(i).getExperiment_title());
		}
		return map;
	}

	/***
	 * 查询，返回Vlink_experiment_curriculum_min列表
	 * 
	 * @return Vlink_experiment_curriculum_min列表
	 */
	public List<Vlink_experiment_curriculum_min> listVlink_experiment_curriculum_min() {

		Map<String, Object> params = new HashMap<String, Object>();
		return (List<Vlink_experiment_curriculum_min>) svcvlink_experiment_curriculum_min.listByMap(params);
	}

	/***
	 * 查询，返回Vlink_experiment_curriculum_min列表
	 * 
	 * @param params 查询条件
	 * @return Vlink_experiment_curriculum_min列表
	 */
	public List<Vlink_experiment_curriculum_min> listVlink_experiment_curriculum_minByMap(Map<String, Object> params) {

		logger.debug(this.getClass().getName() + ".listVlink_experiment_curriculum_minByMap()");
		return (List<Vlink_experiment_curriculum_min>) svcvlink_experiment_curriculum_min.listByMap(params);
	}

	/***
	 * 查询，返回Vlink_experiment_curriculum_min列表
	 * 
	 * @param params  查询条件（可以多个）
	 * @param ordlist 排序条件（可以多个）
	 * @return Vlink_experiment_curriculum_min列表
	 */
	public List<Vlink_experiment_curriculum_min> listVlink_experiment_curriculum_minByMap(Map<String, Object> params,
			List<KeyAndValue> ordlist) {

		logger.debug(this.getClass().getName() + ".listVlink_experiment_curriculum_minByMap()");
		// Map<String, Object> params = new HashMap<String, Object>();
		// params.put(Vlink_experiment_curriculum_min.ID, 0);
		// List<KeyAndValue> ordlist = new ArrayList<KeyAndValue>();
		// ordlist.add(new KeyAndValue(Vlink_experiment_curriculum_min.ID, "desc"));
		QueryWrapper<Vlink_experiment_curriculum_min> queryWrapper = new QueryWrapper<>();
		if (params.size() > 0) {
			queryWrapper.allEq(params);
		}
		for (KeyAndValue od : ordlist) {
			if (od.getValue().equals("desc")) {
				queryWrapper.orderByDesc((String) od.getKey());
			} else {
				queryWrapper.orderByAsc((String) od.getKey());
			}
		}
		return svcvlink_experiment_curriculum_min.list(queryWrapper);
	}

	/***
	 * 按id查询，返回Vlink_experiment_curriculum_min
	 * 
	 * @param id
	 * @return Vlink_experiment_curriculum_min
	 */
	public Vlink_experiment_curriculum_min getVlink_experiment_curriculum_minById(Serializable id) {

		logger.debug(this.getClass().getName() + ".getVlink_experiment_curriculum_minById()");
		return svcvlink_experiment_curriculum_min.getById(id);
	}

	/***
	 * 通过唯一值(数字)查找记录，返回Vlink_experiment_curriculum_min
	 * 
	 * @param infoid
	 * @return Vlink_experiment_curriculum_min
	 */
	public Vlink_experiment_curriculum_min getVlink_experiment_curriculum_minByExperiment_id(
			Serializable experiment_id) {

		logger.debug(this.getClass().getName() + ".getVlink_experiment_curriculum_minByExperiment_id()");
		return svcvlink_experiment_curriculum_min.getOne(new QueryWrapper<Vlink_experiment_curriculum_min>()
				.eq(Vlink_experiment_curriculum_min.EXPERIMENT_ID, experiment_id).last("limit 1"));
	}

	/***
	 * 通过Map(多个条件)，查询返回Vlink_experiment_curriculum_min
	 * 
	 * @param params 多个条件
	 * @return Vlink_experiment_curriculum_min
	 */
	public Vlink_experiment_curriculum_min getVlink_experiment_curriculum_minByMap(Map<String, Object> params) {

		logger.debug(this.getClass().getName() + ".getVlink_experiment_curriculum_minByMap()");
		// Map<String, Object> params = new HashMap<String, Object>();
		// params.put(Vlink_experiment_curriculum_min.ID, 0);
		return svcvlink_experiment_curriculum_min
				.getOne(new QueryWrapper<Vlink_experiment_curriculum_min>().allEq(params).last("limit 1"));
	}

	/***
	 * 查询，返回Vlink_experiment_curriculum_min列表
	 * 
	 * @param columnname 排序字段
	 * @return Vlink_experiment_curriculum_min列表
	 */
	public List<Vlink_experiment_curriculum_min> listVlink_experiment_curriculum_minOrderByAsc(String columnname) {

		logger.debug(this.getClass().getName() + ".listVlink_experiment_curriculum_minOrderByAsc()");
		return svcvlink_experiment_curriculum_min
				.list(new QueryWrapper<Vlink_experiment_curriculum_min>().orderByAsc(columnname));
	}

	/***
	 * 查询，返回Vlink_experiment_curriculum_min列表
	 * 
	 * @param columnname 排序字段
	 * @return Vlink_experiment_curriculum_min列表
	 */
	public List<Vlink_experiment_curriculum_min> listVlink_experiment_curriculum_minOrderByDesc(String columnname) {

		logger.debug(this.getClass().getName() + ".listVlink_experiment_curriculum_minOrderByDesc()");
		return svcvlink_experiment_curriculum_min
				.list(new QueryWrapper<Vlink_experiment_curriculum_min>().orderByDesc(columnname));
	}

	/***
	 * 查询，返回Vlink_experiment_curriculum_min列表
	 * 
	 * @param columnname 排序字段
	 * @return Vlink_experiment_curriculum_min列表
	 */
	public List<Vlink_experiment_curriculum_min> listVlink_experiment_curriculum_minByMapAsc(Map<String, Object> params,
			String columnname) {

		logger.debug(this.getClass().getName() + ".listVlink_experiment_curriculum_minByMapAsc()");
		return svcvlink_experiment_curriculum_min
				.list(new QueryWrapper<Vlink_experiment_curriculum_min>().allEq(params).orderByAsc(columnname));
	}

	/***
	 * 查询，返回Vlink_experiment_curriculum_min列表
	 * 
	 * @param columnname 排序字段
	 * @return Vlink_experiment_curriculum_min列表
	 */
	public List<Vlink_experiment_curriculum_min> listVlink_experiment_curriculum_minByMapDesc(
			Map<String, Object> params, String columnname) {

		logger.debug(this.getClass().getName() + ".listVlink_experiment_curriculum_minByMapDesc()");
		return svcvlink_experiment_curriculum_min
				.list(new QueryWrapper<Vlink_experiment_curriculum_min>().allEq(params).orderByDesc(columnname));
	}

	/***
	 * 
	 * @param pagenumber 页码
	 * @param pagesize   页面显示数量
	 * @return
	 */
	public PagerList<Vlink_experiment_curriculum_min> pagerListVlink_experiment_curriculum_min(Integer pagenumber,
			Integer pagesize) {

		return pagerListVlink_experiment_curriculum_min(pagenumber, pagesize, "", new HashMap<String, String>());
	}

	/***
	 * 
	 * @param pagenumber 页码
	 * @param pagesize   页面显示数量
	 * @param keyword    关键字
	 * @return
	 */
	public PagerList<Vlink_experiment_curriculum_min> pagerListVlink_experiment_curriculum_min(Integer pagenumber,
			Integer pagesize, String keyword) {

		return pagerListVlink_experiment_curriculum_min(pagenumber, pagesize, keyword, new HashMap<String, String>());
	}

	/***
	 * 
	 * @param pagenumber 页码
	 * @param pagesize   页面显示数量
	 * @param keyword    关键字
	 * @param sqlin      用in子句包括的id值
	 * @return
	 */
	public PagerList<Vlink_experiment_curriculum_min> pagerListVlink_experiment_curriculum_min(Integer pagenumber,
			Integer pagesize, String keyword, Map<String, String> sqlin) {
		return pagerListVlink_experiment_curriculum_min(pagenumber, pagesize, keyword, sqlin,
				new HashMap<String, Object>());
	}

	/***
	 * 
	 * @param pagenumber 页码
	 * @param pagesize   页面显示数量
	 * @param keyword    关键字
	 * @param sqlin      用in子句包括的id值
	 * @param params     筛选条件
	 * @return
	 */
	public PagerList<Vlink_experiment_curriculum_min> pagerListVlink_experiment_curriculum_min(Integer pagenumber,
			Integer pagesize, String keyword, Map<String, String> sqlin, Map<String, Object> params) {
		List<KeyAndValue> ordlist = new ArrayList<KeyAndValue>();
		ordlist.add(new KeyAndValue(Vlink_experiment_curriculum_min.ID, "desc"));
		return pagerListVlink_experiment_curriculum_min(pagenumber, pagesize, keyword, sqlin, params, ordlist);
	}

	/***
	 * 
	 * @param pagenumber 页码
	 * @param pagesize   页面显示数量
	 * @param keyword    关键字
	 * @param sqlin      用in子句包括的id值
	 * @return
	 */
	public PagerList<Vlink_experiment_curriculum_min> pagerListVlink_experiment_curriculum_min(Integer pagenumber,
			Integer pagesize, String keyword, Map<String, String> sqlin, Map<String, Object> params,
			List<KeyAndValue> ordlist) {

		Page<Vlink_experiment_curriculum_min> page = new Page<>(pagenumber, pagesize);
		List<Vlink_experiment_curriculum_min> list = null;

		QueryWrapper<Vlink_experiment_curriculum_min> queryWrapper = new QueryWrapper<>();
		// 读取url中是否包含筛选条件
		String experiment_id = sqlin.get(Vlink_experiment_curriculum_min.EXPERIMENT_ID + "_id");
		String curriculum_id = sqlin.get(Vlink_experiment_curriculum_min.CURRICULUM_ID + "_id");
		String subject_id = sqlin.get(Vlink_experiment_curriculum_min.SUBJECT_ID + "_id");
		String student_group_id = sqlin.get(Vlink_experiment_curriculum_min.STUDENT_GROUP_ID + "_id");
		String user_id = sqlin.get(Vlink_experiment_curriculum_min.USER_ID + "_id");

		if (params.size() > 0) {
			queryWrapper.allEq(params);
		}
		if (StringUtils.isBlank(keyword) && StringUtils.isBlank(experiment_id) && StringUtils.isBlank(curriculum_id)
				&& StringUtils.isBlank(subject_id) && StringUtils.isBlank(student_group_id)
				&& StringUtils.isBlank(user_id)) {

			// --------1.准确匹配模式---------

		} else {
			// --------2.模糊匹配模式---------
			// 添加关键字模糊查找条件
			if (!StringUtils.isBlank(keyword)) {
				String kwss = keyword;
				queryWrapper.and(wr -> wr.like(Vlink_experiment_curriculum_min.EXPERIMENT_TITLE, kwss).or()
						.like(Vlink_experiment_curriculum_min.SEMESTER, kwss).or()
						.like(Vlink_experiment_curriculum_min.STUDENT_GROUP_NAME, kwss).or()
						.like(Vlink_experiment_curriculum_min.SUBJECT_INTRO, kwss).or()
						.like(Vlink_experiment_curriculum_min.SUBJECT_NAME, kwss).or()
						.like(Vlink_experiment_curriculum_min.SUBJECT_ILLUSTRATION, kwss));
			}
			// 添加id使用in语句筛选
			if (!StringUtils.isBlank(experiment_id)) {
				queryWrapper.inSql(Vlink_experiment_curriculum_min.EXPERIMENT_ID, experiment_id);
			}
			if (!StringUtils.isBlank(curriculum_id)) {
				queryWrapper.inSql(Vlink_experiment_curriculum_min.CURRICULUM_ID, curriculum_id);
			}
			if (!StringUtils.isBlank(subject_id)) {
				queryWrapper.inSql(Vlink_experiment_curriculum_min.SUBJECT_ID, subject_id);
			}
			if (!StringUtils.isBlank(student_group_id)) {
				queryWrapper.inSql(Vlink_experiment_curriculum_min.STUDENT_GROUP_ID, student_group_id);
			}
			if (!StringUtils.isBlank(user_id)) {
				queryWrapper.inSql(Vlink_experiment_curriculum_min.USER_ID, user_id);
			}
			// --------2.模糊匹配模式---------
		}
		for (KeyAndValue od : ordlist) {
			if (od.getValue().equals("desc")) {
				queryWrapper.orderByDesc((String) od.getKey());
			} else {
				queryWrapper.orderByAsc((String) od.getKey());
			}
		}
		list = svcvlink_experiment_curriculum_min.page(page, queryWrapper).getRecords();
		// 清理数据,标注关键字，范围：所有字符型
		for (int i = 0; i < list.size(); i++) {
			// 如果头像为空，加载默认头像
			// if (StringUtils.isBlank(list.get(i).getWechat_headimgurl())
			// || list.get(i).getWechat_headimgurl().equals("0")) {
			// list.get(i).setWechat_headimgurl(Common.userheadimgurl);
			// }
			// 标注关键字，范围：所有字符型
			if (!StringUtils.isBlank(keyword)) {
				// 避免空值出现错误
				try {

					list.get(i).setExperiment_title(
							(list.get(i).getExperiment_title().replace(keyword, Common.getKeywordSpan(keyword))));
					list.get(i)
							.setSemester((list.get(i).getSemester().replace(keyword, Common.getKeywordSpan(keyword))));
					list.get(i).setStudent_group_name(
							(list.get(i).getStudent_group_name().replace(keyword, Common.getKeywordSpan(keyword))));
					list.get(i).setSubject_intro(
							(list.get(i).getSubject_intro().replace(keyword, Common.getKeywordSpan(keyword))));
					list.get(i).setSubject_name(
							(list.get(i).getSubject_name().replace(keyword, Common.getKeywordSpan(keyword))));
					list.get(i).setSubject_illustration(
							(list.get(i).getSubject_illustration().replace(keyword, Common.getKeywordSpan(keyword))));
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		}

		Pager<Vlink_experiment_curriculum_min> pager = new Pager<>(page);
		PagerList<Vlink_experiment_curriculum_min> pagerList = new PagerList<>(pager, list);

		return pagerList;
	}

	/***
	 * 保持新的实体，返回是否成功
	 * 
	 * @param it 实体
	 * @return 是否成功
	 */
	public Boolean saveVlink_experiment_curriculum_min(Vlink_experiment_curriculum_min it) {

		logger.debug(this.getClass().getName() + ".saveVlink_experiment_curriculum_min()");
		return svcvlink_experiment_curriculum_min.save(it);
	}

	/***
	 * 按id删除，返回是否成功
	 * 
	 * @param id
	 * @return 是否成功
	 */
	public Boolean removeVlink_experiment_curriculum_minById(Serializable id) {

		logger.debug(this.getClass().getName() + ".removeVlink_experiment_curriculum_minById()");
		return svcvlink_experiment_curriculum_min.removeById(id);
	}

	/***
	 * 按id修改实体，返回布尔值，是否成功
	 * 
	 * @param it 实体
	 * @return 是否成功
	 */
	public Boolean updateVlink_experiment_curriculum_minById(Integer experiment_id, Integer curriculum_id,
			Integer subject_id, Long opening_gmt, Long closing_gmt, Integer sortid,
			Boolean experiment_curriculum_is_actived, String experiment_title, Integer filesize,
			Integer student_group_id, Integer user_id, String semester, String student_group_name,
			Boolean subject_is_actived, String subject_intro, String subject_name, String subject_illustration,
			Boolean curriculum_is_actived, Integer subject_sortid, Integer id) {

		logger.debug(this.getClass().getName() + ".updateVlink_experiment_curriculum_minById()");
		UpdateWrapper<Vlink_experiment_curriculum_min> uwr = new UpdateWrapper<>();
		uwr.set(Vlink_experiment_curriculum_min.EXPERIMENT_ID, experiment_id);
		uwr.set(Vlink_experiment_curriculum_min.CURRICULUM_ID, curriculum_id);
		uwr.set(Vlink_experiment_curriculum_min.SUBJECT_ID, subject_id);
		uwr.set(Vlink_experiment_curriculum_min.OPENING_GMT, opening_gmt);
		uwr.set(Vlink_experiment_curriculum_min.CLOSING_GMT, closing_gmt);
		uwr.set(Vlink_experiment_curriculum_min.SORTID, sortid);
		uwr.set(Vlink_experiment_curriculum_min.EXPERIMENT_CURRICULUM_IS_ACTIVED, experiment_curriculum_is_actived);
		uwr.set(Vlink_experiment_curriculum_min.EXPERIMENT_TITLE, experiment_title);
		uwr.set(Vlink_experiment_curriculum_min.FILESIZE, filesize);
		uwr.set(Vlink_experiment_curriculum_min.STUDENT_GROUP_ID, student_group_id);
		uwr.set(Vlink_experiment_curriculum_min.USER_ID, user_id);
		uwr.set(Vlink_experiment_curriculum_min.SEMESTER, semester);
		uwr.set(Vlink_experiment_curriculum_min.STUDENT_GROUP_NAME, student_group_name);
		uwr.set(Vlink_experiment_curriculum_min.SUBJECT_IS_ACTIVED, subject_is_actived);
		uwr.set(Vlink_experiment_curriculum_min.SUBJECT_INTRO, subject_intro);
		uwr.set(Vlink_experiment_curriculum_min.SUBJECT_NAME, subject_name);
		uwr.set(Vlink_experiment_curriculum_min.SUBJECT_ILLUSTRATION, subject_illustration);
		uwr.set(Vlink_experiment_curriculum_min.CURRICULUM_IS_ACTIVED, curriculum_is_actived);
		uwr.set(Vlink_experiment_curriculum_min.SUBJECT_SORTID, subject_sortid);

		uwr.eq(Vlink_experiment_curriculum_min.ID, id);
		// 视图需要定制修改方法！
		// return svcvlink_experiment_curriculum_min.update(uwr);
		return false;
	}

	/***
	 * 按id修改实体，返回是否成功
	 * 
	 * @param it 实体
	 * @return 是否成功
	 */
	public Boolean updateVlink_experiment_curriculum_minById(Vlink_experiment_curriculum_min it) {

		logger.debug(this.getClass().getName() + ".updateVlink_experiment_curriculum_minById()");
		return svcvlink_experiment_curriculum_min.updateById(it);
	}

	public Boolean moveVlink_experiment_curriculum_min(String method, String upOrDown, Integer id, String sortColumn) {

		Vlink_experiment_curriculum_min it = svcvlink_experiment_curriculum_min.getById(id);
		// 读取当前已有信息
		// SELECT * FROM `column` where column_parentid =0 and sortid<4 order by
		// sortid desc limit 1
		QueryWrapper<Vlink_experiment_curriculum_min> queryWrapper = new QueryWrapper<>();
		// 同一个父栏目下
		// queryWrapper.eq(Vlink_experiment_curriculum_min.COLUMN_PARENTID ,
		// it.getColumn_parentid());
		if (method.equals(upOrDown)) {
			queryWrapper.lt(sortColumn, it.getSortid());
			queryWrapper.orderByDesc(sortColumn);
		} else {
			queryWrapper.gt(sortColumn, it.getSortid());
			queryWrapper.orderByAsc(sortColumn);
		}
		queryWrapper.last("limit 1");

		Vlink_experiment_curriculum_min target = svcvlink_experiment_curriculum_min.getOne(queryWrapper);

		if (target == null) {
			// 没有
			return false;
		} else {

			UpdateWrapper<Vlink_experiment_curriculum_min> uwr1 = new UpdateWrapper<>();
			uwr1.set(Vlink_experiment_curriculum_min.SORTID, target.getSortid());
			uwr1.eq(Vlink_experiment_curriculum_min.ID, it.getId());

			UpdateWrapper<Vlink_experiment_curriculum_min> uwr2 = new UpdateWrapper<>();
			uwr2.set(Vlink_experiment_curriculum_min.SORTID, it.getSortid());
			uwr2.eq(Vlink_experiment_curriculum_min.ID, target.getId());

			try {
				svcvlink_experiment_curriculum_min.update(uwr1);
				svcvlink_experiment_curriculum_min.update(uwr2);
			} catch (Exception e) {
				e.printStackTrace();
				return false;
			}
			return true;
		}
	}

	/***
	 * 统计当前表的数量
	 * 
	 * @return
	 */
	public Integer countVlink_experiment_curriculum_min() {
		return svcvlink_experiment_curriculum_min.count();
	}

	/***
	 * 统计当前表的数量
	 * 
	 * @return
	 */
	public Integer countVlink_experiment_curriculum_min(QueryWrapper<Vlink_experiment_curriculum_min> queryWrapper) {
		return svcvlink_experiment_curriculum_min.count(queryWrapper);
	}

	/***
	 * 按自定义查询统计,返回map
	 * 
	 * @return
	 */
	public Map<String, Integer> statVlink_experiment_curriculum_minGroupbyId() {
		List<Map<String, Object>> list = svcvlink_experiment_curriculum_min
				.listMaps(new QueryWrapper<Vlink_experiment_curriculum_min>()
						.select(Vlink_experiment_curriculum_min.EXPERIMENT_TITLE, "count(*)")
						.eq(Vlink_experiment_curriculum_min.EXPERIMENT_ID, 0)
						.groupBy(Vlink_experiment_curriculum_min.ID).orderByAsc(Vlink_experiment_curriculum_min.ID));
		return Util.listmapToMap(list, Vlink_experiment_curriculum_min.EXPERIMENT_TITLE, "count(*)");
	}

	/***
	 * 按自定义查询统计,返回map
	 * 
	 * @return
	 */
	public Map<String, Integer> statVlink_experiment_curriculum_minGroupbyExperiment_id() {

		return svcvlink_experiment_curriculum_min.statMapByFieldname(Vlink_experiment_curriculum_min.EXPERIMENT_ID);
	}

	// TODO:--------------manageVlink_experiment_curriculum_min-end----------------
	// TODO:--------------manageVlink_student2group-begin----------------
	/***
	 * 统计Vlink_student2group中，指定字段的最大值列表
	 * 
	 * @param fieldname 需要统计的字段
	 * @return Vlink_student2group表，指定字段中的最大值
	 */
	public Integer maxVlink_student2group(String fieldname) {

		int rtv = 0;
		try {
			rtv = svcvlink_student2group.max(fieldname);
		} catch (Exception e) {
		}
		return rtv;
	}

	/***
	 * 查询全部，返回一个map，用于数量较少时的映射
	 * 
	 * @return
	 */
	public Map<Integer, String> mapVlink_student2group() {
		List<Vlink_student2group> list = svcvlink_student2group.list();
		Map<Integer, String> map = new HashMap<Integer, String>();
		for (int i = 0; i < list.size(); i++) {
			map.put(list.get(i).getId(), list.get(i).getSno());
		}
		return map;
	}

	public Map<Integer, String> mapVlink_student2group(Map<String, Object> params) {
		List<Vlink_student2group> list = listVlink_student2groupByMap(params);
		Map<Integer, String> map = new HashMap<Integer, String>();
		for (int i = 0; i < list.size(); i++) {
			map.put(list.get(i).getId(), list.get(i).getSno());
		}
		return map;
	}

	/***
	 * 查询，返回Vlink_student2group列表
	 * 
	 * @return Vlink_student2group列表
	 */
	public List<Vlink_student2group> listVlink_student2group() {

		Map<String, Object> params = new HashMap<String, Object>();
		return (List<Vlink_student2group>) svcvlink_student2group.listByMap(params);
	}

	/***
	 * 查询，返回Vlink_student2group列表
	 * 
	 * @param params 查询条件
	 * @return Vlink_student2group列表
	 */
	public List<Vlink_student2group> listVlink_student2groupByMap(Map<String, Object> params) {

		logger.debug(this.getClass().getName() + ".listVlink_student2groupByMap()");
		return (List<Vlink_student2group>) svcvlink_student2group.listByMap(params);
	}

	/***
	 * 查询，返回Vlink_student2group列表
	 * 
	 * @param params  查询条件（可以多个）
	 * @param ordlist 排序条件（可以多个）
	 * @return Vlink_student2group列表
	 */
	public List<Vlink_student2group> listVlink_student2groupByMap(Map<String, Object> params,
			List<KeyAndValue> ordlist) {

		logger.debug(this.getClass().getName() + ".listVlink_student2groupByMap()");
		// Map<String, Object> params = new HashMap<String, Object>();
		// params.put(Vlink_student2group.ID, 0);
		// List<KeyAndValue> ordlist = new ArrayList<KeyAndValue>();
		// ordlist.add(new KeyAndValue(Vlink_student2group.ID, "desc"));
		QueryWrapper<Vlink_student2group> queryWrapper = new QueryWrapper<>();
		if (params.size() > 0) {
			queryWrapper.allEq(params);
		}
		for (KeyAndValue od : ordlist) {
			if (od.getValue().equals("desc")) {
				queryWrapper.orderByDesc((String) od.getKey());
			} else {
				queryWrapper.orderByAsc((String) od.getKey());
			}
		}
		return svcvlink_student2group.list(queryWrapper);
	}

	/***
	 * 按id查询，返回Vlink_student2group
	 * 
	 * @param id
	 * @return Vlink_student2group
	 */
	public Vlink_student2group getVlink_student2groupById(Serializable id) {

		logger.debug(this.getClass().getName() + ".getVlink_student2groupById()");
		return svcvlink_student2group.getById(id);
	}

	/***
	 * 通过唯一值(数字)查找记录，返回Vlink_student2group
	 * 
	 * @param infoid
	 * @return Vlink_student2group
	 */
	public Vlink_student2group getVlink_student2groupByStudent_id(Serializable student_id) {

		logger.debug(this.getClass().getName() + ".getVlink_student2groupByStudent_id()");
		return svcvlink_student2group.getOne(
				new QueryWrapper<Vlink_student2group>().eq(Vlink_student2group.STUDENT_ID, student_id).last("limit 1"));
	}

	/***
	 * 通过Map(多个条件)，查询返回Vlink_student2group
	 * 
	 * @param params 多个条件
	 * @return Vlink_student2group
	 */
	public Vlink_student2group getVlink_student2groupByMap(Map<String, Object> params) {

		logger.debug(this.getClass().getName() + ".getVlink_student2groupByMap()");
		// Map<String, Object> params = new HashMap<String, Object>();
		// params.put(Vlink_student2group.ID, 0);
		return svcvlink_student2group.getOne(new QueryWrapper<Vlink_student2group>().allEq(params).last("limit 1"));
	}

	/***
	 * 查询，返回Vlink_student2group列表
	 * 
	 * @param columnname 排序字段
	 * @return Vlink_student2group列表
	 */
	public List<Vlink_student2group> listVlink_student2groupOrderByAsc(String columnname) {

		logger.debug(this.getClass().getName() + ".listVlink_student2groupOrderByAsc()");
		return svcvlink_student2group.list(new QueryWrapper<Vlink_student2group>().orderByAsc(columnname));
	}

	/***
	 * 查询，返回Vlink_student2group列表
	 * 
	 * @param columnname 排序字段
	 * @return Vlink_student2group列表
	 */
	public List<Vlink_student2group> listVlink_student2groupOrderByDesc(String columnname) {

		logger.debug(this.getClass().getName() + ".listVlink_student2groupOrderByDesc()");
		return svcvlink_student2group.list(new QueryWrapper<Vlink_student2group>().orderByDesc(columnname));
	}

	/***
	 * 查询，返回Vlink_student2group列表
	 * 
	 * @param columnname 排序字段
	 * @return Vlink_student2group列表
	 */
	public List<Vlink_student2group> listVlink_student2groupByMapAsc(Map<String, Object> params, String columnname) {

		logger.debug(this.getClass().getName() + ".listVlink_student2groupByMapAsc()");
		return svcvlink_student2group
				.list(new QueryWrapper<Vlink_student2group>().allEq(params).orderByAsc(columnname));
	}

	/***
	 * 查询，返回Vlink_student2group列表
	 * 
	 * @param columnname 排序字段
	 * @return Vlink_student2group列表
	 */
	public List<Vlink_student2group> listVlink_student2groupByMapDesc(Map<String, Object> params, String columnname) {

		logger.debug(this.getClass().getName() + ".listVlink_student2groupByMapDesc()");
		return svcvlink_student2group
				.list(new QueryWrapper<Vlink_student2group>().allEq(params).orderByDesc(columnname));
	}

	/***
	 * 
	 * @param pagenumber 页码
	 * @param pagesize   页面显示数量
	 * @return
	 */
	public PagerList<Vlink_student2group> pagerListVlink_student2group(Integer pagenumber, Integer pagesize) {

		return pagerListVlink_student2group(pagenumber, pagesize, "", new HashMap<String, String>());
	}

	/***
	 * 
	 * @param pagenumber 页码
	 * @param pagesize   页面显示数量
	 * @param keyword    关键字
	 * @return
	 */
	public PagerList<Vlink_student2group> pagerListVlink_student2group(Integer pagenumber, Integer pagesize,
			String keyword) {

		return pagerListVlink_student2group(pagenumber, pagesize, keyword, new HashMap<String, String>());
	}

	/***
	 * 
	 * @param pagenumber 页码
	 * @param pagesize   页面显示数量
	 * @param keyword    关键字
	 * @param sqlin      用in子句包括的id值
	 * @return
	 */
	public PagerList<Vlink_student2group> pagerListVlink_student2group(Integer pagenumber, Integer pagesize,
			String keyword, Map<String, String> sqlin) {
		return pagerListVlink_student2group(pagenumber, pagesize, keyword, sqlin, new HashMap<String, Object>());
	}

	/***
	 * 
	 * @param pagenumber 页码
	 * @param pagesize   页面显示数量
	 * @param keyword    关键字
	 * @param sqlin      用in子句包括的id值
	 * @param params     筛选条件
	 * @return
	 */
	public PagerList<Vlink_student2group> pagerListVlink_student2group(Integer pagenumber, Integer pagesize,
			String keyword, Map<String, String> sqlin, Map<String, Object> params) {
		List<KeyAndValue> ordlist = new ArrayList<KeyAndValue>();
		ordlist.add(new KeyAndValue(Vlink_student2group.ID, "desc"));
		return pagerListVlink_student2group(pagenumber, pagesize, keyword, sqlin, params, ordlist);
	}

	/***
	 * 
	 * @param pagenumber 页码
	 * @param pagesize   页面显示数量
	 * @param keyword    关键字
	 * @param sqlin      用in子句包括的id值
	 * @return
	 */
	public PagerList<Vlink_student2group> pagerListVlink_student2group(Integer pagenumber, Integer pagesize,
			String keyword, Map<String, String> sqlin, Map<String, Object> params, List<KeyAndValue> ordlist) {

		Page<Vlink_student2group> page = new Page<>(pagenumber, pagesize);
		List<Vlink_student2group> list = null;

		QueryWrapper<Vlink_student2group> queryWrapper = new QueryWrapper<>();
		// 读取url中是否包含筛选条件
		String student_id = sqlin.get(Vlink_student2group.STUDENT_ID + "_id");
		String student_group_id = sqlin.get(Vlink_student2group.STUDENT_GROUP_ID + "_id");

		if (params.size() > 0) {
			queryWrapper.allEq(params);
		}
		if (StringUtils.isBlank(keyword) && StringUtils.isBlank(student_id) && StringUtils.isBlank(student_group_id)) {

			// --------1.准确匹配模式---------

		} else {
			// --------2.模糊匹配模式---------
			// 添加关键字模糊查找条件
			if (!StringUtils.isBlank(keyword)) {
				String kwss = keyword;
				queryWrapper.and(wr -> wr.like(Vlink_student2group.SNO, kwss).or().like(Vlink_student2group.NAME, kwss)
						.or().like(Vlink_student2group.EMAIL, kwss).or().like(Vlink_student2group.MOBILE, kwss).or()
						.like(Vlink_student2group.QQ, kwss).or().like(Vlink_student2group.CLASSCODE, kwss).or()
						.like(Vlink_student2group.STUDENT_GROUP_NAME, kwss).or()
						.like(Vlink_student2group.STUDENT_GROUP_CODE, kwss));
			}
			// 添加id使用in语句筛选
			if (!StringUtils.isBlank(student_id)) {
				queryWrapper.inSql(Vlink_student2group.STUDENT_ID, student_id);
			}
			if (!StringUtils.isBlank(student_group_id)) {
				queryWrapper.inSql(Vlink_student2group.STUDENT_GROUP_ID, student_group_id);
			}
			// --------2.模糊匹配模式---------
		}
		for (KeyAndValue od : ordlist) {
			if (od.getValue().equals("desc")) {
				queryWrapper.orderByDesc((String) od.getKey());
			} else {
				queryWrapper.orderByAsc((String) od.getKey());
			}
		}
		list = svcvlink_student2group.page(page, queryWrapper).getRecords();
		// 清理数据,标注关键字，范围：所有字符型
		for (int i = 0; i < list.size(); i++) {
			// 如果头像为空，加载默认头像
			// if (StringUtils.isBlank(list.get(i).getWechat_headimgurl())
			// || list.get(i).getWechat_headimgurl().equals("0")) {
			// list.get(i).setWechat_headimgurl(Common.userheadimgurl);
			// }
			// 标注关键字，范围：所有字符型
			if (!StringUtils.isBlank(keyword)) {
				// 避免空值出现错误
				try {

					list.get(i).setSno((list.get(i).getSno().replace(keyword, Common.getKeywordSpan(keyword))));
					list.get(i).setName((list.get(i).getName().replace(keyword, Common.getKeywordSpan(keyword))));
					list.get(i).setEmail((list.get(i).getEmail().replace(keyword, Common.getKeywordSpan(keyword))));
					list.get(i).setMobile((list.get(i).getMobile().replace(keyword, Common.getKeywordSpan(keyword))));
					list.get(i).setQq((list.get(i).getQq().replace(keyword, Common.getKeywordSpan(keyword))));
					list.get(i).setClasscode(
							(list.get(i).getClasscode().replace(keyword, Common.getKeywordSpan(keyword))));
					list.get(i).setStudent_group_name(
							(list.get(i).getStudent_group_name().replace(keyword, Common.getKeywordSpan(keyword))));
					list.get(i).setStudent_group_code(
							(list.get(i).getStudent_group_code().replace(keyword, Common.getKeywordSpan(keyword))));
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		}

		Pager<Vlink_student2group> pager = new Pager<>(page);
		PagerList<Vlink_student2group> pagerList = new PagerList<>(pager, list);

		return pagerList;
	}

	/***
	 * 保持新的实体，返回是否成功
	 * 
	 * @param it 实体
	 * @return 是否成功
	 */
	public Boolean saveVlink_student2group(Vlink_student2group it) {

		logger.debug(this.getClass().getName() + ".saveVlink_student2group()");
		return svcvlink_student2group.save(it);
	}

	/***
	 * 按id删除，返回是否成功
	 * 
	 * @param id
	 * @return 是否成功
	 */
	public Boolean removeVlink_student2groupById(Serializable id) {

		logger.debug(this.getClass().getName() + ".removeVlink_student2groupById()");
		return svcvlink_student2group.removeById(id);
	}

	/***
	 * 按id修改实体，返回布尔值，是否成功
	 * 
	 * @param it 实体
	 * @return 是否成功
	 */
	public Boolean updateVlink_student2groupById(Integer student_id, Integer student_group_id,
			Boolean student_is_actived, Boolean student_group_is_actived, String sno, String name, String email,
			String mobile, String qq, String classcode, Integer login_method, String student_group_name,
			String student_group_code, Integer id) {

		logger.debug(this.getClass().getName() + ".updateVlink_student2groupById()");
		UpdateWrapper<Vlink_student2group> uwr = new UpdateWrapper<>();
		uwr.set(Vlink_student2group.STUDENT_ID, student_id);
		uwr.set(Vlink_student2group.STUDENT_GROUP_ID, student_group_id);
		uwr.set(Vlink_student2group.STUDENT_IS_ACTIVED, student_is_actived);
		uwr.set(Vlink_student2group.STUDENT_GROUP_IS_ACTIVED, student_group_is_actived);
		uwr.set(Vlink_student2group.SNO, sno);
		uwr.set(Vlink_student2group.NAME, name);
		uwr.set(Vlink_student2group.EMAIL, email);
		uwr.set(Vlink_student2group.MOBILE, mobile);
		uwr.set(Vlink_student2group.QQ, qq);
		uwr.set(Vlink_student2group.CLASSCODE, classcode);
		uwr.set(Vlink_student2group.LOGIN_METHOD, login_method);
		uwr.set(Vlink_student2group.STUDENT_GROUP_NAME, student_group_name);
		uwr.set(Vlink_student2group.STUDENT_GROUP_CODE, student_group_code);

		uwr.eq(Vlink_student2group.ID, id);
		// 视图需要定制修改方法！
		// return svcvlink_student2group.update(uwr);
		return false;
	}

	/***
	 * 按id修改实体，返回是否成功
	 * 
	 * @param it 实体
	 * @return 是否成功
	 */
	public Boolean updateVlink_student2groupById(Vlink_student2group it) {

		logger.debug(this.getClass().getName() + ".updateVlink_student2groupById()");
		return svcvlink_student2group.updateById(it);
	}

	/***
	 * 统计当前表的数量
	 * 
	 * @return
	 */
	public Integer countVlink_student2group() {
		return svcvlink_student2group.count();
	}

	/***
	 * 统计当前表的数量
	 * 
	 * @return
	 */
	public Integer countVlink_student2group(QueryWrapper<Vlink_student2group> queryWrapper) {
		return svcvlink_student2group.count(queryWrapper);
	}

	/***
	 * 按自定义查询统计,返回map
	 * 
	 * @return
	 */
	public Map<String, Integer> statVlink_student2groupGroupbyId() {
		List<Map<String, Object>> list = svcvlink_student2group.listMaps(new QueryWrapper<Vlink_student2group>()
				.select(Vlink_student2group.SNO, "count(*)").eq(Vlink_student2group.STUDENT_ID, 0)
				.groupBy(Vlink_student2group.ID).orderByAsc(Vlink_student2group.ID));
		return Util.listmapToMap(list, Vlink_student2group.SNO, "count(*)");
	}

	/***
	 * 按自定义查询统计,返回map
	 * 
	 * @return
	 */
	public Map<String, Integer> statVlink_student2groupGroupbyStudent_id() {

		return svcvlink_student2group.statMapByFieldname(Vlink_student2group.STUDENT_ID);
	}
	// TODO:--------------manageVlink_student2group-end----------------
}
