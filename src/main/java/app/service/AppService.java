//-----------------------------
//-- Generated By Denny(luhox@qq.com)
//-- Remarks: ServiceImpl
//-- Date Generated: 2019-03-22 16:16:07
//-----------------------------

package app.service;

import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
import com.baomidou.mybatisplus.core.conditions.update.UpdateWrapper;
import com.baomidou.mybatisplus.core.metadata.IPage;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;

import app.entity.EvprStatInfo;
import app.entity.MajorQuestions;
import app.entity.Menu;
import app.entity.Pager;
import app.entity.PagerList;
import app.entity.StatEvaluationPoint;
import app.entity.StatExperimentCurriculum;
import app.entity.UserSession;
import app.utils.Common;
import tpa.entity.*;
import tpa.service.*;
import sun.misc.BASE64Encoder;

import java.io.Serializable;
import java.io.UnsupportedEncodingException;
import java.sql.Wrapper;
import java.text.SimpleDateFormat;
import java.util.*;

import org.apache.commons.codec.digest.DigestUtils;
import org.apache.commons.lang3.StringUtils;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Isolation;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

import javax.swing.text.html.parser.Entity;

@Service("AppService")
public class AppService {

	private static final Log logger = LogFactory.getLog(TestService.class);

	@Autowired
	@Qualifier("BrowseService")
	private BrowseService svcb;

	@Autowired
	@Qualifier("configService")
	private IConfigService svcconfig;

	@Autowired
	@Qualifier("curriculumService")
	private ICurriculumService svccurriculum;

	@Autowired
	@Qualifier("evaluationService")
	private IEvaluationService svcevaluation;

	@Autowired
	@Qualifier("evaluation_ip_recordService")
	private IEvaluation_ip_recordService svcevaluation_ip_record;

	@Autowired
	@Qualifier("evaluation_pointService")
	private IEvaluation_pointService svcevaluation_point;

	@Autowired
	@Qualifier("evaluation_resultService")
	private IEvaluation_resultService svcevaluation_result;

	@Autowired
	@Qualifier("evaluation_result_recordService")
	private IEvaluation_result_recordService svcevaluation_result_record;

	@Autowired
	@Qualifier("evaluation_typeService")
	private IEvaluation_typeService svcevaluation_type;

	@Autowired
	@Qualifier("experimentService")
	private IExperimentService svcexperiment;

	@Autowired
	@Qualifier("experiment_recordService")
	private IExperiment_recordService svcexperiment_record;

	@Autowired
	@Qualifier("link_experiment_curriculumService")
	private ILink_experiment_curriculumService svclink_experiment_curriculum;

	@Autowired
	@Qualifier("link_role_permitService")
	private ILink_role_permitService svclink_role_permit;

	@Autowired
	@Qualifier("link_student2groupService")
	private ILink_student2groupService svclink_student2group;

	@Autowired
	@Qualifier("link_user_roleService")
	private ILink_user_roleService svclink_user_role;

	@Autowired
	@Qualifier("messageService")
	private IMessageService svcmessage;

	@Autowired
	@Qualifier("permitService")
	private IPermitService svcpermit;

	@Autowired
	@Qualifier("roleService")
	private IRoleService svcrole;

	@Autowired
	@Qualifier("statisticService")
	private IStatisticService svcstatistic;

	@Autowired
	@Qualifier("studentService")
	private IStudentService svcstudent;

	@Autowired
	@Qualifier("student_groupService")
	private IStudent_groupService svcstudent_group;

	@Autowired
	@Qualifier("subjectService")
	private ISubjectService svcsubject;

	@Autowired
	@Qualifier("syslogService")
	private ISyslogService svcsyslog;

	@Autowired
	@Qualifier("userService")
	private IUserService svcuser;

	@Autowired
	@Qualifier("user_login_logService")
	private IUser_login_logService svcuser_login_log;

	@Autowired
	@Qualifier("vcurriculumService")
	private IVcurriculumService svcvcurriculum;

	@Autowired
	@Qualifier("vevaluationService")
	private IVevaluationService svcvevaluation;

	@Autowired
	@Qualifier("vevaluation_pointService")
	private IVevaluation_pointService svcvevaluation_point;

	@Autowired
	@Qualifier("vexperiment_recordService")
	private IVexperiment_recordService svcvexperiment_record;

	@Autowired
	@Qualifier("vexperiment_record_miniService")
	private IVexperiment_record_miniService svcvexperiment_record_mini;

	@Autowired
	@Qualifier("vlink_experiment_curriculumService")
	private IVlink_experiment_curriculumService svcvlink_experiment_curriculum;

	@Autowired
	@Qualifier("vlink_experiment_curriculum_minService")
	private IVlink_experiment_curriculum_minService svcvlink_experiment_curriculum_min;

	@Autowired
	@Qualifier("vlink_student2groupService")
	private IVlink_student2groupService svcvlink_student2group;

	

	/***
	 * 获取最后一条记录的总访问量
	 * 
	 * @return Statistic数量
	 */
	public Integer getLastTotal() {
		Statistic lastone = svcstatistic
				.getOne(new QueryWrapper<Statistic>().orderByDesc(Statistic.ID).last("limit 1"));
		if (lastone == null) {
			return 1;
		} else {
			return lastone.getSt_total();
		}
	}

	/***
	 * 获取当日访问量
	 * 
	 * @return Statistic数量
	 */

	public Integer getDay() {

		Statistic lastone = svcstatistic
				.getOne(new QueryWrapper<Statistic>().orderByDesc(Statistic.ID).last("limit 1"));
		if (lastone == null) {
			return 1;
		} else {
			return lastone.getSt_today();
		}
	}

	/***
	 * 获取指定日访问量
	 * 
	 * @return Statistic数量
	 */

	public Integer getDay(String st_date) {

		Statistic lastone = svcstatistic.getOne(
				new QueryWrapper<Statistic>().eq(Statistic.ST_DATE, st_date).orderByDesc(Statistic.ID).last("limit 1"));
		if (lastone == null) {
			return 1;
		} else {
			return lastone.getSt_today();
		}
	}

	/***
	 * 更新一条访问统计，返回今天的访问量
	 * 
	 * @return 受影响行数
	 * @throws Exception
	 */

	public Integer recordVisit() {

		SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMdd");
		String st_date = sdf.format(new Date());

		Map<String, Object> params = new HashMap<String, Object>();
		params.put(Statistic.ST_DATE, st_date);
		Statistic lastone = svcstatistic.getOne(new QueryWrapper<Statistic>().allEq(params).last("limit 1"));

		if (lastone == null) {
			// 新的一天
			Statistic it = new Statistic(st_date, getLastTotal() + 1, 1);
			boolean affected = svcstatistic.save(it);
			return 1;
		} else {

			UpdateWrapper<Statistic> ituw = new UpdateWrapper<>();
			ituw.set(Statistic.ST_TOTAL, lastone.getSt_total() + 1);
			ituw.set(Statistic.ST_TODAY, lastone.getSt_today() + 1);
			ituw.eq(Statistic.ID, lastone.getId());
			boolean itupdate = svcstatistic.update(ituw);
			return lastone.getSt_today() + 1;
		}
	}

	/***
	 * 查找二级菜单
	 * 
	 * @return
	 */

	public List<Menu> getMenuTree(String toggle) {

		List<Menu> menutree = new ArrayList<>();

		QueryWrapper<Subject> qw = new QueryWrapper<>();
		qw.orderByAsc(Subject.SORTID);
		List<Subject> list = svcsubject.list(qw);

		for (int i = 0; i < list.size(); i++) {
			// 第1级菜单，父栏目id=0

			Menu it = new Menu(list.get(i));
			menutree.add(it);

		}
		return menutree;
	}

	/***
	 * 修改用户状态
	 * 
	 * @param id 实体
	 * @return 是否成功
	 */

	public Boolean updateUserActivedById(Boolean isactived, Integer id) {

		logger.debug(this.getClass().getName() + ".updateUserById()");

		UpdateWrapper<User> uwr = new UpdateWrapper<>();
		uwr.set(User.IS_ACTIVED, isactived);

		uwr.eq(User.ID, id);
		return svcuser.update(uwr);
	}

	/***
	 * 修改角色状态
	 * 
	 * @param id 实体
	 * @return 是否成功
	 */

	public Boolean updateRoleActivedById(Boolean isactived, Integer id) {

		logger.debug(this.getClass().getName() + ".updateRolerById()");

		UpdateWrapper<Role> uwr = new UpdateWrapper<>();
		uwr.set(Role.IS_ACTIVED, isactived);

		uwr.eq(Role.ID, id);
		return svcrole.update(uwr);
	}

	/***
	 * 保存微信信息到绑定的用户
	 * 
	 * @param id 实体
	 * @return 是否成功
	 */

	public Boolean updateUserWechatInfoById(String wechat_openid, String wechat_nickname, String wechat_headimgurl,
			Integer update_userid, Long update_gmt, Integer id) {

		logger.debug(this.getClass().getName() + ".updateUserById()");

		UpdateWrapper<User> uwr = new UpdateWrapper<>();
		uwr.set(User.WECHAT_OPENID, wechat_openid);
		uwr.set(User.WECHAT_NICKNAME, wechat_nickname);
		uwr.set(User.WECHAT_HEADIMGURL, wechat_headimgurl);
		uwr.set(User.UPDATE_USERID, update_userid);
		uwr.set(User.UPDATE_GMT, update_gmt);

		uwr.eq(User.ID, id);
		return svcuser.update(uwr);
	}

	/***
	 * 通过用户id获取该用户的角色idlist
	 * 
	 * @param userid
	 * @return
	 */
	public List<Integer> listIntegers(Integer userid) {

		Map<String, Object> lurparams = new HashMap<String, Object>();
		lurparams.put(Link_user_role.USER_ID, userid);

		List<Link_user_role> lurlist = listLink_user_roleByMap(lurparams);

		// 当前登录用户拥有的角色数量
		// System.out.println("CustomRealm.doGetAuthenticationInfo()lurlist.size()=" +
		// lurlist.size());

		// SELECT * from role where id in (SELECT role_id from link_user_role where
		// user_id =20)
		List<Integer> roleids = new ArrayList<Integer>();
		for (int i = 0; i < lurlist.size(); i++) {
			roleids.add(lurlist.get(i).getRole_id());
		}
		return roleids;
	}

	/***
	 * 查询，返回Link_user_role列表
	 * 
	 * @param params orderby排序依据
	 * @return Link_user_role列表
	 */
	public List<Link_user_role> listLink_user_roleByMap(Map<String, Object> params) {

		logger.debug(this.getClass().getName() + ".listLink_user_roleByMap()");
		return (List<Link_user_role>) svclink_user_role.listByMap(params);
	}

	/***
	 * 通过用户id，获取该用户拥有的角色列表
	 * 
	 * @param userid
	 * @return
	 */
	public List<Role> listRoleByUserid(Integer userid) {

		// System.out.println("AppService.listRoleByUserid()userid="+userid);
		List<Integer> roleids = listIntegers(userid);
		if (roleids.size() == 0) {
			return new ArrayList<Role>();
		} else {
			return svcrole.list(new QueryWrapper<Role>().in(Role.ID, roleids).orderByAsc(Role.ID));
		}

	}

	/***
	 * 通过角色id获取该角色的许可列表
	 * 
	 * @param roleid
	 * @return
	 */
	public List<Integer> listIntegers2(Integer roleid) {

		Map<String, Object> lrpparams = new HashMap<String, Object>();
		lrpparams.put(Link_role_permit.ROLE_ID, roleid);

		List<Link_role_permit> lrplist = listLink_role_permitByMap(lrpparams);

		// 当前登录用户拥有的角色数量
		// System.out.println("CustomRealm.doGetAuthenticationInfo()lurlist.size()=" +
		// lurlist.size());

		// SELECT * from role where id in (SELECT role_id from link_user_role where
		// user_id =20)
		List<Integer> permitids = new ArrayList<Integer>();
		for (int i = 0; i < lrplist.size(); i++) {
			permitids.add(lrplist.get(i).getPermit_id());
		}
		return permitids;
	}

	/***
	 * 查询，返回Link_role_permit列表
	 * 
	 * @param params orderby排序依据
	 * @return Link_role_permit列表
	 */
	public List<Link_role_permit> listLink_role_permitByMap(Map<String, Object> params) {

		logger.debug(this.getClass().getName() + ".listLink_role_permitByMap()");
		return (List<Link_role_permit>) svclink_role_permit.listByMap(params);
	}

	/****
	 * 通过用户id，获取该用户的许可列表
	 * 
	 * @param userid
	 * @return
	 */
	public List<Permit> listPermitByUserid(Integer userid) {

		// System.out.println("AppService.listPermitByUserid()userid="+userid);

		List<Integer> roleids = listIntegers(userid);

		List<Link_role_permit> lrplist = svclink_role_permit
				.list(new QueryWrapper<Link_role_permit>().in(Link_role_permit.ROLE_ID, roleids));
		if (lrplist.size() > 0) {

			List<Integer> permitids = new ArrayList<Integer>();
			for (int i = 0; i < lrplist.size(); i++) {
				permitids.add(lrplist.get(i).getPermit_id());
			}
			// SELECT * FROM permit where id in ( SELECT permit_id FROM link_role_permit
			// where role_id in (2,3))
			return svcpermit.list(new QueryWrapper<Permit>().in(Permit.ID, permitids));
		} else {
			return new ArrayList<Permit>();
		}

	}

	public Boolean removeLink_user_roleByUserIdandRoleid(Integer userid, Integer roleid) {
		// Role role = svcrole.getOne(new QueryWrapper<Role>().eq(Role.NAME, rolename));
		return svclink_user_role.remove(new QueryWrapper<Link_user_role>().eq(Link_user_role.USER_ID, userid)
				.eq(Link_user_role.ROLE_ID, roleid));
	}

	public Boolean saveLink_user_roleByUserIdandRoleid(Integer userid, Integer roleid, Integer create_userid) {

		// Role role = svcrole.getOne(new QueryWrapper<Role>().eq(Role.NAME, rolename));
		Link_user_role it = new Link_user_role(userid, roleid, create_userid, 0);
		return svclink_user_role.save(it);
	}

	public Boolean saveLink_user_roleByLogin_nameandRolename(String login_name, String rolename,
			Integer create_userid) {
		Role role = svcrole.getOne(new QueryWrapper<Role>().eq(Role.NAME, rolename));
		User user = svcuser.getOne(new QueryWrapper<User>().eq(User.LOGIN_NAME, login_name));
		Link_user_role it = new Link_user_role(user.getId(), role.getId(), create_userid, 0);
		return svclink_user_role.save(it);
	}

	public Boolean removeLink_role_permitByRoleIdandPermitname(Integer roleid, String permitname) {
		Permit permit = svcpermit.getOne(new QueryWrapper<Permit>().eq(Permit.NAME, permitname));
		return svclink_role_permit.remove(new QueryWrapper<Link_role_permit>().eq(Link_role_permit.ROLE_ID, roleid)
				.eq(Link_role_permit.PERMIT_ID, permit.getId()));

	}

	public Boolean saveLink_role_permitByRoleIdandPermitname(Integer roleid, String permitname, Integer create_userid) {
		Permit permit = svcpermit.getOne(new QueryWrapper<Permit>().eq(Permit.NAME, permitname));
		Link_role_permit it = new Link_role_permit(roleid, permit.getId(), create_userid, 0);

		return svclink_role_permit.save(it);

	}

	public Boolean saveLink_role_permitByNameandPermitname(String name, String permitname, Integer create_userid) {
		Permit permit = svcpermit.getOne(new QueryWrapper<Permit>().eq(Permit.NAME, permitname));
		Role role = svcrole.getOne(new QueryWrapper<Role>().eq(User.NAME, name));
		Link_role_permit it = new Link_role_permit(role.getId(), permit.getId(), create_userid, 0);
		return svclink_role_permit.save(it);

	}

	/***
	 * 通过角色id，读取该角色拥有的权限
	 * 
	 * @param roleid
	 * @return
	 */
	public List<Permit> listPermitByRoleid(Integer roleid) {

		List<Integer> permitids = listIntegers2(roleid);

		// System.out.println("AppService.listPermitByRoleid()permitids.size()=" +
		// permitids.size());
		if (permitids.size() == 0) {
			return new ArrayList<Permit>();
		} else {
			return svcpermit.list(new QueryWrapper<Permit>().in(Permit.ID, permitids).orderByAsc(Permit.ID));
		}
	}

	/**
	 * 根据ColumnMap，查询pojo对象 -julius
	 * @param ColumnMap
	 * @return
	 */
	public UserSession getUserByUsernameAndPassword(Map<String, Object> ColumnMap) {
		Collection<User> users = svcuser.listByMap(ColumnMap);
		List<User> list = new LinkedList<>();
		Iterator<User> iterator = users.iterator();
		while(iterator.hasNext()){
			User next = iterator.next();
			list.add(next);
		}
		User user = list.get(0);
		Integer userId = user.getId();
		return new UserSession(list.get(0),UserSession.TEACHER,null,null);
	}

	/**
	 *
	 */
	public UserSession getSuperAdminByUsernameAndPassword(Map<String, Object> ColumnMap) {
		Collection<User> users = svcuser.listByMap(ColumnMap);
		List<User> list = new LinkedList<>();
		Iterator<User> iterator = users.iterator();
		while(iterator.hasNext()){
			User next = iterator.next();
			list.add(next);
		}
		User user = list.get(0);
		Integer userId = user.getId();
		Link_user_role lur = svclink_user_role.getOne(new QueryWrapper<Link_user_role>().eq("user_id", userId).eq("role_id",1),true);
		if (lur != null){
			return new UserSession(list.get(0),UserSession.SUPERADMIN,null,null);
		}
		return null;
	}


	/***
	 * 查询教师表和学生表
	 * 
	 * ，用户名摘要，返回UserSession
	 * 
	 * @param usernameDigest 用户名摘要
	 * @return UserSession
	 */
	public UserSession getUserByUsernameDigest(String usernameDigest) {
		//此方法可以根据登录摘要查到对应的User信息 -julius
		List<User> list = svcuser.list(new QueryWrapper<User>().eq(User.LOGIN_NAME_DIGEST, usernameDigest));

		if (list == null || list.size() == 0) {
			// 如果在教师表里面没有记录，再查找学生表
			List<Student> stulist = svcstudent
					.list(new QueryWrapper<Student>().eq(Student.LOGIN_NAME_DIGEST, usernameDigest));

			// System.out.println("AppService.getUserByUsernameDigest()stulist.size=" +
			// stulist.size());

			if (stulist == null || stulist.size() == 0) {
				return null;
			} else if (stulist.size() > 1) {
				return null;
			} else {
				// System.out.println("AppService.getUserByUsernameDigest()stulist.get(0)=" +
				// stulist.get(0));
				return new UserSession(stulist.get(0));
			}

		} else if (list.size() > 1) {

			// 结果不唯一
			return null;
		} else {//list.size() == 1 的情况  -julius

			// 通过userid获取当前用户的所有角色
			List<Role> rolelist = listRoleByUserid(list.get(0).getId());
			// System.out.println("AppService.getUserByUsernameDigest()rolelist=" +
			// rolelist.toString());

			// 判断是否是超级管理员
			Boolean isSuperAdmin = false;
			// Boolean isProduct_admin = false;
			for (int i = 0; i < rolelist.size(); i++) {
				//确认是否是超级管理员
				if (rolelist.get(i).getId() == 1) {
					isSuperAdmin = true;
				}
			}

			if (isSuperAdmin) {
				// 超级管理员默认拥有所有权限
				List<Permit> permitall = svcb.listPermitOrderByAsc(Permit.ID);
				return new UserSession(list.get(0), UserSession.SUPERADMIN, rolelist, permitall);
			} else {
				// 非超级管理员的权限按实际情况统计
				List<Permit> permitlist = listPermitByUserid(list.get(0).getId());
				//返回具有教师权限的用户
				return new UserSession(list.get(0), UserSession.TEACHER, rolelist, permitlist);
			}

		}

	}

	/***
	 * 按id修改实体，返回是否成功
	 * 
	 * @param id 实体
	 * @return 是否成功
	 */

	public Boolean updateUserById(String name, String qq, String email, Integer update_userid, Long update_gmt,
			Integer id) {

		logger.debug(this.getClass().getName() + ".updateUserById()");

		UpdateWrapper<User> uwr = new UpdateWrapper<>();
		uwr.set(User.NAME, name);
		uwr.set(User.QQ, qq);
		uwr.set(User.EMAIL, email);
		uwr.set(User.UPDATE_USERID, update_userid);
		uwr.set(User.UPDATE_GMT, update_gmt);

		uwr.eq(User.ID, id);
		return svcuser.update(uwr);
	}

	/***
	 * 按id修改密码摘要，密码修改为modified，返回是否成功
	 * 按id修改密码摘要，密码修改为新密码，返回是否成功 -julius
	 * @param id 实体
	 * @return 是否成功
	 */

	public Boolean updateUserById(String login_password, Integer update_userid, Long update_gmt, Integer id) {
		logger.debug(this.getClass().getName() + ".updateUserById()");
		UpdateWrapper<User> uwr = new UpdateWrapper<>();
//		uwr.set(User.LOGIN_PASSWORD, "modified");
		uwr.set(User.LOGIN_PASSWORD,login_password);
		uwr.set(User.LOGIN_PASSWORD_DIGEST, DigestUtils.md5Hex(login_password));
		uwr.set(User.UPDATE_USERID, update_userid);
		uwr.set(User.UPDATE_GMT, update_gmt);
		uwr.eq(User.ID, id);
		return svcuser.update(uwr);
	}

	/***
	 * 按id修改实体，返回是否成功
	 * 
	 * @param id 实体
	 * @return 是否成功
	 */

	public Boolean updateUserById(String login_name, String name, Boolean is_actived, Integer update_userid,
			Long update_gmt, Integer id) {

		logger.debug(this.getClass().getName() + ".updateUserById()");
		UpdateWrapper<User> uwr = new UpdateWrapper<>();
		uwr.set(User.LOGIN_NAME, login_name);
		uwr.set(User.LOGIN_NAME_DIGEST, DigestUtils.md5Hex(login_name));
		uwr.set(User.NAME, name);
		uwr.set(User.IS_ACTIVED, is_actived);
		uwr.set(User.UPDATE_USERID, update_userid);
		uwr.set(User.UPDATE_GMT, update_gmt);

		uwr.eq(User.ID, id);
		return svcuser.update(uwr);
	}

	/**
	 *	按id修改密码摘要，密码修改为新密码，返回是否成功 -julius
	 * @param login_password
	 * @param update_gmt
	 * @param id
	 * @return
	 */
	public Boolean updateStudentById(String login_password, Long update_gmt, Integer id) {
		logger.debug(this.getClass().getName() + ".updateStudentById()");
		UpdateWrapper<Student> uwr = new UpdateWrapper<>();
		uwr.set(Student.LOGIN_PASSWORD,login_password);
		uwr.set(Student.UPDATE_GMT, update_gmt);
		uwr.eq(Student.ID, id);
		return svcstudent.update(uwr);
	}

	/****
	 * 记录用户登录ip和登录时间
	 * 
	 * @param user_id
	 * @param user_ip
	 * @param login_gmt
	 * @return
	 */
	public void saveUserLoginIpDateById(Integer user_id, String user_ip, long login_gmt, String operating_system,
			String browser) {

		logger.debug(this.getClass().getName() + ".saveUserLoginIpDateById()");
		svcuser_login_log.save(new User_login_log(login_gmt, user_ip, user_id, operating_system, browser));

	}

	/***
	 * 记录用户是否已经修改密码
	 * 
	 * @param id
	 * @param login_password
	 * @return
	 */
	public boolean updateUserHasModifyPassword(Integer id, String login_password) {
		logger.debug(this.getClass().getName() + ".updateUserById()");
		UpdateWrapper<User> uwr = new UpdateWrapper<>();

		uwr.set(User.LOGIN_PASSWORD, login_password);

		uwr.eq(User.ID, id);
		return svcuser.update(uwr);
	}

	/***
	 * 恢复密码为登录手机号码
	 * 
	 * @param id
	 * @return
	 */
	public boolean updateUserPasswordToUsernameById(Integer id) {

		User it = svcuser.getById(id);
		UpdateWrapper<User> uwr = new UpdateWrapper<>();

		uwr.set(User.LOGIN_PASSWORD_DIGEST, it.getLogin_password_digest());
		uwr.set(User.LOGIN_PASSWORD, "no modified");

		uwr.eq(User.ID, id);
		return svcuser.update(uwr);

	}

	/***
	 * 查询全部，返回一个map，用于数量较少时的映射
	 * 
	 * @return
	 */
	public Map<Integer, String> mapUser() {
		List<User> list = svcuser.list();
		Map<Integer, String> map = new HashMap<Integer, String>();
		for (int i = 0; i < list.size(); i++) {
			map.put(list.get(i).getId(), list.get(i).getName());
		}
		return map;
	}

	/***
	 * 通过配置名称查找配置内容
	 * 
	 * @param name
	 * @return
	 */
	public Config getConfigByKey(String name) {

		return svcconfig.getOne(new QueryWrapper<Config>().eq(Config.NAME, name).last("limit 1"));
	}

	/***
	 * 通过学生id，找到该同学参加的（学习组）
	 * 
	 * @param studentid
	 * @return
	 */
	public List<Vlink_student2group> listVlink_student2groupByStudentId(Integer studentid) {
		// SELECT * FROM vlink_student2group where student_is_actived=1 and
		// student_group_is_actived=1 and student_id=826
		return svcvlink_student2group.list(new QueryWrapper<Vlink_student2group>()
				.eq(Vlink_student2group.STUDENT_IS_ACTIVED, true).eq(Vlink_student2group.STUDENT_GROUP_IS_ACTIVED, true)
				.eq(Vlink_student2group.STUDENT_ID, studentid));
	}

	/***
	 * 通过学生id，找到该同学所在学习组，已经开设的（学习课程）
	 * 
	 * @param studentid
	 * @return
	 */
	public List<Vcurriculum> listVcurriculumByStudentId(Integer studentid) {
		// SELECT * FROM vcurriculum where is_actived=1 and student_group_id in (SELECT
		// student_group_id FROM vlink_student2group where student_is_actived=1 and
		// student_group_is_actived=1 and student_id=826 )

		// inSql("id", "select id from table where id < 3")--->id in (select id from
		// table where id < 3)

		return svcvcurriculum.list(new QueryWrapper<Vcurriculum>().eq(Vcurriculum.IS_ACTIVED, true).inSql(
				Vcurriculum.STUDENT_GROUP_ID,
				"SELECT student_group_id FROM vlink_student2group where student_is_actived=1 and student_group_is_actived=1 and student_id="
						+ studentid)

		);
	}

	/***
	 * 找到该同学所在学习组，可以开设的实验课程
	 * 
	 * @param studentid
	 * @return
	 */
	public List<Vlink_experiment_curriculum_min> listLinkExperimentCurriculumByStudentId(Integer studentid) {
//		SELECT * FROM vlink_experiment_curriculum_min where experiment_curriculum_is_actived=1 and 
//		curriculum_id in (SELECT id FROM vcurriculum where   is_actived=1  and student_group_id in (SELECT student_group_id FROM vlink_student2group  where  student_is_actived=1    and student_group_is_actived=1  and  student_id=826 ) )  
//		order  by curriculum_id,opening_gmt 
		return svcvlink_experiment_curriculum_min.list(new QueryWrapper<Vlink_experiment_curriculum_min>()
				.eq(Vlink_experiment_curriculum_min.EXPERIMENT_CURRICULUM_IS_ACTIVED, true)
				.inSql(Vlink_experiment_curriculum_min.CURRICULUM_ID,
						"SELECT id FROM vcurriculum where   is_actived=1  and student_group_id in"
								+ " (SELECT student_group_id FROM vlink_student2group  where  student_is_actived=1    and student_group_is_actived=1  and  student_id="
								+ studentid + " ) ")
				.orderByAsc(Vlink_experiment_curriculum_min.CURRICULUM_ID)
				.orderByAsc(Vlink_experiment_curriculum_min.OPENING_GMT));
	}

	/***
	 * 通过学生id，获取过程考核列表
	 * 
	 * @param studentid
	 * @return
	 */
	public List<Vevaluation> listVevaluationByStudentId(Integer studentid) {
		// SELECT * FROM tpa.vevaluation
		// where is_actived=1 and student_group_id in
		// (SELECT student_group_id FROM vlink_student2group where student_is_actived=1
		// and student_group_is_actived=1 and student_id=826 )

		return svcvevaluation.list(new QueryWrapper<Vevaluation>().eq(Vevaluation.IS_ACTIVED, true).inSql(
				Vevaluation.STUDENT_GROUP_ID,
				"SELECT student_group_id FROM vlink_student2group  where  student_is_actived=1    and student_group_is_actived=1  and  student_id= "
						+ studentid));
	}

	public Boolean updateSubjectById(String intro, String name, String illustration, long update_gmt, Integer id) {

		logger.debug(this.getClass().getName() + ".updateSubjectById()");
		UpdateWrapper<Subject> uwr = new UpdateWrapper<>();
		uwr.set(Subject.INTRO, intro);
		uwr.set(Subject.NAME, name);
		uwr.set(Subject.ILLUSTRATION, illustration);
		uwr.set(Subject.UPDATE_GMT, update_gmt);

		uwr.eq(Subject.ID, id);
		return svcsubject.update(uwr);

	}

	public Boolean updateCurriculumById(Integer subject_id, Integer student_group_id, Integer user_id,
			Boolean is_actived, String semester, long update_gmt, Integer id) {

		logger.debug(this.getClass().getName() + ".updateCurriculumById()");
		UpdateWrapper<Curriculum> uwr = new UpdateWrapper<>();
		uwr.set(Curriculum.SUBJECT_ID, subject_id);
		uwr.set(Curriculum.STUDENT_GROUP_ID, student_group_id);
		uwr.set(Curriculum.USER_ID, user_id);
		uwr.set(Curriculum.IS_ACTIVED, is_actived);
		uwr.set(Curriculum.SEMESTER, semester);
		uwr.set(Curriculum.UPDATE_GMT, update_gmt);

		uwr.eq(Curriculum.ID, id);
		return svccurriculum.update(uwr);

	}

	/***
	 * 按课程统计数据库中已有的实验报告数量
	 * @return
	 */
	public List<StatExperimentCurriculum> statExperimentCurriculum(String semester) {
		return svcvlink_experiment_curriculum_min.statExperimentCurriculum(semester);
	}

	/***
	 * 更新一个考核的基础信息
	 * 
	 * @param curriculum_id
	 * @param is_actived
	 * @param begin_gmt
	 * @param end_gmt
	 * @param content
	 * @param title
	 * @param update_gmt
	 * @param id
	 * @return
	 */
	public Boolean updateEvaluationById(Integer curriculum_id, boolean is_actived, Long begin_gmt, Long end_gmt,
			String content, String title, long update_gmt, Integer id) {

		UpdateWrapper<Evaluation> uwr = new UpdateWrapper<>();
		uwr.set(Evaluation.CURRICULUM_ID, curriculum_id);
		uwr.set(Evaluation.IS_ACTIVED, is_actived);
		uwr.set(Evaluation.BEGIN_GMT, begin_gmt);
		uwr.set(Evaluation.END_GMT, end_gmt);
		uwr.set(Evaluation.CONTENT, content);
		uwr.set(Evaluation.TITLE, title);
		uwr.set(Evaluation.UPDATE_GMT, update_gmt);

		uwr.eq(Evaluation.ID, id);
		return svcevaluation.update(uwr);

	}

	/***
	 * 重新为一个考生选题
	 * 
	 * @param student_id
	 * @param evaluation_id
	 * @return
	 */
	@Transactional(propagation = Propagation.REQUIRED, isolation = Isolation.DEFAULT, readOnly = false)
	public String rebuildEvp(Integer student_id, Integer evaluation_id) {
		// 随机数
		Random rnd = new Random(new Date().getTime());
		String msg = "";

		Student stu = svcstudent.getById(student_id);

		Vevaluation evit = svcvevaluation.getById(evaluation_id);

		// 删除原有的所有考点
		Map<String, Object> whereFields = new HashMap<String, Object>();
		whereFields.put(Evaluation_result_record.EVALUATION_ID + "", evaluation_id);
		whereFields.put(Evaluation_result_record.STUDENT_ID + "", student_id);
		Boolean deleteResult = svcevaluation_result_record.removeByMap(whereFields);

		System.out.println("AppService.rebuildEvp()deleteResult=" + deleteResult);
		System.out.println("AppService.rebuildEvp()evit.getContent()=" + evit.getContent());

		List<MajorQuestions> mqlist = new ArrayList<MajorQuestions>();
		String[] evcontentlist = evit.getContent().split(";");
		for (int i = 0; i < evcontentlist.length; i++) {

			System.out.println("AppService.rebuildEvp()" + evcontentlist[i].trim());

			String[] mqinfolist = evcontentlist[i].trim().split(",");

			Evaluation_type evtype = svcevaluation_type.getById(Integer.parseInt(mqinfolist[0]));
			Integer number = Integer.parseInt(mqinfolist[1]);
			Integer score = Integer.parseInt(mqinfolist[2]);

			System.out.println(
					"AppService.rebuildEvp()" + "evtype=" + evtype.getId() + ",number=" + number + ",score=" + score);

			mqlist.add(new MajorQuestions(evtype, number, score, null));

			// 当前题型是所有可用试题
			// SELECT * FROM pas.evpoint where subjectId=11 and
			// evtype=3

			System.out.println("AppService.rebuildEvp()evit.getSubject_id=" + evit.getSubject_id());
			System.out.println("AppService.rebuildEvp()TYPE=" + evtype.getId());

			List<Evaluation_point> evplist = svcevaluation_point
					.list(new QueryWrapper<Evaluation_point>().eq(Evaluation_point.SUBJECT_ID, evit.getSubject_id())
							.eq(Evaluation_point.TYPE, evtype.getId()).eq(Evaluation_point.IS_ACTIVED, true));

			// System.out.println("AppService.rebuildEvp()evplist.size()="+evplist.size());
			// System.out.println("AppService.rebuildEvp()number="+number);

			if (evplist.size() < number) {
				// System.out.println("---------------error:题型：" +
				// evtype.getName() + ",备选题量小于需求量");
				msg += "<br>error:题型：" + evtype.getName() + ",备选题量小于需求量,当前有" + evplist.size() + ",需要选出" + number + "个";
			} else {
				// 当前存量充足
				int evpri = number;// 需求量
				while (evpri > 0) {
					// System.out.println("EvaluationService.rebuildEvp()evplist.size()="+evplist.size());
					int rndint = rnd.nextInt(evplist.size());// 在所有可选题目中，随机抽取一题
					// 保存到数据库
					Evaluation_point it = evplist.get(rndint);

					Evaluation_result_record qst = new Evaluation_result_record(student_id, evaluation_id, stu.getSno(),
							it.getId(), it.getContent(), 0, it.getType(), evit.getSubject_id(),
							evit.getStudent_group_id(), evit.getCurriculum_id(), it.getDifficulty(), number - evpri + 1,
							false, score, false);

//					qst.setDifficulty(it.getDifficulty());
//					qst.setEvaluation_id(evaluation_id);
//					qst.setEvaluation_point_id(it.getId());
//					qst.setSubmit_record(it.getContent());
//					qst.setType(it.getType());
//					qst.setScore(0);
//					qst.setSubject_id(evit.getSubject_id());
//					qst.setStudent_group_id(evit.getStudent_group_id());
//					qst.setStudent_id(student_id);
//					qst.setSno(stu.getSno());
//					qst.setSortid(number - evpri + 1);
//					qst.setIs_submited(false);
//					qst.setScore_wish(score);
//					qst.setIs_reviewed(false);
//					qst.setCurriculum_id(evit.getCurriculum_id());

					svcevaluation_result_record.save(qst);

					// 删除已经选择的题目
					evplist.remove(rndint);

					// 需要添加的题量--
					evpri--;
				}
			}
		}
		return msg;
	}

	/***
	 * 读取考核对应的分组所有成员
	 * 
	 * @param student_group_id
	 * @return
	 */
	public List<Vlink_student2group> listVlink_student2groupByGroupId(Integer student_group_id) {

		return svcvlink_student2group.list(new QueryWrapper<Vlink_student2group>()
				.eq(Vlink_student2group.STUDENT_GROUP_ID, student_group_id).orderByAsc(Vlink_student2group.SNO));
	}

	/***
	 * 读取指定考核已经提交
	 * 
	 * @param evaluationId
	 * @return
	 */
	public List<Evaluation_result> listEvaluation_resultByEvaluationId(Integer evaluationId) {

		return svcevaluation_result.list(new QueryWrapper<Evaluation_result>()
				.eq(Evaluation_result.EVALUATION_ID, evaluationId).orderByAsc(Evaluation_result.SNO));
	}

	/***
	 * 读取当前考核的题目数，难度系数
	 * 
	 * @param params
	 * @return
	 */
	public List<EvprStatInfo> statEvprStatInfoByMap(Map<String, Object> params) {
//		SELECT student_id,count(difficulty) as cd,sum(difficulty) as sd,sum(score_wish) as sw  FROM evaluation_result_record
//		where evaluation_id=2
//		group by subject_id,student_id
		return svcevaluation_result_record.statEvprStatInfoByMap(params);
	}

	/***
	 * 按科目，统计已有的题库中题目数量
	 * 
	 * @return
	 */
	public List<StatEvaluationPoint> statEvaluationPointByMap() {
		// SELECT subject_id,subject_name,type,evaluation_type_name,count(subject_id) as
		// num FROM vevaluation_point group by subject_id,type
		// # subject_id, subject_name, type, evaluation_type_name, num
		// 1, 教育网络开发与应用, 1, 填空, 4
		// 1, 教育网络开发与应用, 3, 选择, 5
		// 1, 教育网络开发与应用, 4, 判断, 1

		return svcvevaluation_point.statEvaluationPointByMap();
	}

	public PagerList<Vevaluation_point> pagerListVevaluation_point(Integer pagenumber, Integer pagesize, String keyword,
			Map<String, String> sqlin, String ordercolumn, String descorasc, Integer subject_id, Integer type) {

		Page<Vevaluation_point> page = new Page<>(pagenumber, pagesize);
		List<Vevaluation_point> list = null;

		QueryWrapper<Vevaluation_point> queryWrapper = new QueryWrapper<>();
		Map<String, Object> params = new HashMap<String, Object>();
		// 读取url中是否包含筛选条件
		queryWrapper.eq(Vevaluation_point.SUBJECT_ID, subject_id);
		queryWrapper.eq(Vevaluation_point.TYPE, type);

		if (StringUtils.isBlank(keyword)) {

			// params.put(Vevaluation_point.SUBJECT_ID, 2);// 筛选条件1
			// params.put(Vevaluation_point.ID, 3);// 筛选条件2
			// 在统计总数前完成筛选条件设定
			// --------1.准确匹配模式---------
			queryWrapper.allEq(params);
			if (descorasc.equals("desc")) {
				queryWrapper.orderByDesc(ordercolumn);
			} else {
				queryWrapper.orderByAsc(ordercolumn);
			}

		} else {
			// --------2.模糊匹配模式---------
			// 添加关键字模糊查找条件
			if (!StringUtils.isBlank(keyword)) {
				String kwss = keyword;
				queryWrapper.and(
						wr -> wr.like(Vevaluation_point.CONTENT, kwss).or().like(Vevaluation_point.SUBJECT_NAME, kwss)
								.or().like(Vevaluation_point.EVALUATION_TYPE_NAME, kwss));
			}

			if (descorasc.equals("desc")) {
				queryWrapper.orderByDesc(ordercolumn);
			} else {
				queryWrapper.orderByAsc(ordercolumn);
			}
			// --------2.模糊匹配模式---------
		}
		list = svcvevaluation_point.page(page, queryWrapper).getRecords();
		// 清理数据,标注关键字，范围：所有字符型
		for (int i = 0; i < list.size(); i++) {
			// 如果头像为空，加载默认头像
			// if (StringUtils.isBlank(list.get(i).getWechat_headimgurl())
			// || list.get(i).getWechat_headimgurl().equals("0")) {
			// list.get(i).setWechat_headimgurl(Common.userheadimgurl);
			// }
			// 标注关键字，范围：所有字符型
			if (!StringUtils.isBlank(keyword)) {
				// 避免空值出现错误
				try {

					list.get(i).setContent((list.get(i).getContent().replace(keyword, Common.getKeywordSpan(keyword))));
					list.get(i).setSubject_name(
							(list.get(i).getSubject_name().replace(keyword, Common.getKeywordSpan(keyword))));
					list.get(i).setEvaluation_type_name(
							(list.get(i).getEvaluation_type_name().replace(keyword, Common.getKeywordSpan(keyword))));
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		}

		Pager<Vevaluation_point> pager = new Pager<>(page);
		PagerList<Vevaluation_point> pagerList = new PagerList<>(pager, list);

		return pagerList;
	}

	/**
	 * 自定义学生查找
	 * 
	 * @return
	 */
	public PagerList<Vlink_student2group> pagerListVlink_student2group(Integer student_group_id, Integer pagenumber,
			Integer pagesize, String keyword, Map<String, String> sqlin, String ordercolumn, String descorasc) {

		Page<Vlink_student2group> page = new Page<>(pagenumber, pagesize);
		List<Vlink_student2group> list = null;

		QueryWrapper<Vlink_student2group> queryWrapper = new QueryWrapper<>();
		Map<String, Object> params = new HashMap<String, Object>();
		params.put(Vlink_student2group.STUDENT_GROUP_ID, student_group_id);

		if (StringUtils.isBlank(keyword)) {

			// 在统计总数前完成筛选条件设定
			// --------1.准确匹配模式---------
			queryWrapper.allEq(params);
			if (descorasc.equals("desc")) {
				queryWrapper.orderByDesc(ordercolumn);
			} else {
				queryWrapper.orderByAsc(ordercolumn);
			}

		} else {
			// --------2.模糊匹配模式---------
			// 添加关键字模糊查找条件
			if (!StringUtils.isBlank(keyword)) {
				String kwss = keyword;
				queryWrapper.and(wr -> wr.like(Vlink_student2group.SNO, kwss).or().like(Vlink_student2group.NAME, kwss)
						.or().like(Vlink_student2group.EMAIL, kwss).or().like(Vlink_student2group.MOBILE, kwss).or()
						.like(Vlink_student2group.QQ, kwss).or().like(Vlink_student2group.CLASSCODE, kwss).or()
						.like(Vlink_student2group.STUDENT_GROUP_NAME, kwss).or()
						.like(Vlink_student2group.STUDENT_GROUP_CODE, kwss));
			}
			// 添加id使用in语句筛选

			if (descorasc.equals("desc")) {
				queryWrapper.orderByDesc(ordercolumn);
			} else {
				queryWrapper.orderByAsc(ordercolumn);
			}
			// --------2.模糊匹配模式---------
		}
		list = svcvlink_student2group.page(page, queryWrapper).getRecords();
		// 清理数据,标注关键字，范围：所有字符型
		for (int i = 0; i < list.size(); i++) {
			// 如果头像为空，加载默认头像
			// if (StringUtils.isBlank(list.get(i).getWechat_headimgurl())
			// || list.get(i).getWechat_headimgurl().equals("0")) {
			// list.get(i).setWechat_headimgurl(Common.userheadimgurl);
			// }
			// 标注关键字，范围：所有字符型
			if (!StringUtils.isBlank(keyword)) {
				// 避免空值出现错误
				try {

					list.get(i).setSno((list.get(i).getSno().replace(keyword, Common.getKeywordSpan(keyword))));
					list.get(i).setName((list.get(i).getName().replace(keyword, Common.getKeywordSpan(keyword))));
					list.get(i).setEmail((list.get(i).getEmail().replace(keyword, Common.getKeywordSpan(keyword))));
					list.get(i).setMobile((list.get(i).getMobile().replace(keyword, Common.getKeywordSpan(keyword))));
					list.get(i).setQq((list.get(i).getQq().replace(keyword, Common.getKeywordSpan(keyword))));
					list.get(i).setClasscode(
							(list.get(i).getClasscode().replace(keyword, Common.getKeywordSpan(keyword))));
					list.get(i).setStudent_group_name(
							(list.get(i).getStudent_group_name().replace(keyword, Common.getKeywordSpan(keyword))));
					list.get(i).setStudent_group_code(
							(list.get(i).getStudent_group_code().replace(keyword, Common.getKeywordSpan(keyword))));
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		}

		Pager<Vlink_student2group> pager = new Pager<>(page);
		PagerList<Vlink_student2group> pagerList = new PagerList<>(pager, list);

		return pagerList;
	}

	public Boolean updateEvaluation_result_recordIs_submitedById(boolean is_submited, Integer id) {

		logger.debug(this.getClass().getName() + ".updateEvaluation_result_recordById()");
		UpdateWrapper<Evaluation_result_record> uwr = new UpdateWrapper<>();

		uwr.set(Evaluation_result_record.IS_SUBMITED, is_submited);

		uwr.eq(Evaluation_result_record.ID, id);
		return svcevaluation_result_record.update(uwr);

	}

	/***
	 * 
	 * @param pagenumber 页码
	 * @param pagesize   页面显示数量
	 * @param keyword    关键字
	 * @param sqlin      用in子句包括的id值
	 * @return
	 */
	public PagerList<Vexperiment_record_mini> pagerListVexperiment_record_mini(Integer pagenumber, Integer pagesize,
			String keyword, Map<String, String> sqlin, Map<String, Object> params, String ordercolumn,
			String descorasc) {

		Page<Vexperiment_record_mini> page = new Page<>(pagenumber, pagesize);
		List<Vexperiment_record_mini> list = null;

		QueryWrapper<Vexperiment_record_mini> queryWrapper = new QueryWrapper<>();
		// 读取url中是否包含筛选条件
		String reviewstate_id = sqlin.get(Vexperiment_record_mini.REVIEWSTATE + "_id");
		String curriculum_id = sqlin.get(Vexperiment_record_mini.CURRICULUM_ID + "_id");
		String student_group_id = sqlin.get(Vexperiment_record_mini.STUDENT_GROUP_ID + "_id");

		if (StringUtils.isBlank(keyword) && StringUtils.isBlank(reviewstate_id) && StringUtils.isBlank(curriculum_id)
				&& StringUtils.isBlank(student_group_id)) {

			// --------1.准确匹配模式---------
			if (params.size() > 0) {
				queryWrapper.allEq(params);
			}
			if (descorasc.equals("desc")) {
				queryWrapper.orderByDesc(ordercolumn);
			} else {
				queryWrapper.orderByAsc(ordercolumn);
			}

		} else {
			// --------2.模糊匹配模式---------
			// 添加关键字模糊查找条件
			if (!StringUtils.isBlank(keyword)) {
				String kwss = keyword;
				queryWrapper.and(wr -> wr.like(Vexperiment_record_mini.TRUENAME, kwss).or()
						.like(Vexperiment_record_mini.SNO, kwss).or().like(Vexperiment_record_mini.SNO_EXP, kwss).or()
						.like(Vexperiment_record_mini.CLASSCODE, kwss).or()
						.like(Vexperiment_record_mini.STUDENT_GROUP_CODE, kwss).or()
						.like(Vexperiment_record_mini.STUDENT_GROUP_NAME, kwss).or()
						.like(Vexperiment_record_mini.SCORESCRIPT, kwss).or()
						.like(Vexperiment_record_mini.WECHAT_OPENID, kwss).or()
						.like(Vexperiment_record_mini.EXPERIMENT_TITLE, kwss).or()
						.like(Vexperiment_record_mini.SUBJECT_NAME, kwss));
			}
			// 添加id使用in语句筛选
			if (!StringUtils.isBlank(reviewstate_id)) {
				queryWrapper.inSql(Vexperiment_record_mini.REVIEWSTATE, reviewstate_id);
			}

			if (!StringUtils.isBlank(curriculum_id)) {
				queryWrapper.inSql(Vexperiment_record_mini.CURRICULUM_ID, curriculum_id);
			}

			if (!StringUtils.isBlank(student_group_id)) {
				queryWrapper.inSql(Vexperiment_record_mini.STUDENT_GROUP_ID, student_group_id);
			}
			if (descorasc.equals("desc")) {
				queryWrapper.orderByDesc(ordercolumn);
			} else {
				queryWrapper.orderByAsc(ordercolumn);
			}
			// --------2.模糊匹配模式---------
		}
		list = svcvexperiment_record_mini.page(page, queryWrapper).getRecords();
		// 清理数据,标注关键字，范围：所有字符型
		for (int i = 0; i < list.size(); i++) {

			// 标注关键字，范围：所有字符型
			if (!StringUtils.isBlank(keyword)) {
				// 避免空值出现错误
				try {

					list.get(i)
							.setTruename((list.get(i).getTruename().replace(keyword, Common.getKeywordSpan(keyword))));
					list.get(i).setSno((list.get(i).getSno().replace(keyword, Common.getKeywordSpan(keyword))));

					list.get(i).setClasscode(
							(list.get(i).getClasscode().replace(keyword, Common.getKeywordSpan(keyword))));
					list.get(i).setStudent_group_code(
							(list.get(i).getStudent_group_code().replace(keyword, Common.getKeywordSpan(keyword))));
					list.get(i).setStudent_group_name(
							(list.get(i).getStudent_group_name().replace(keyword, Common.getKeywordSpan(keyword))));
					list.get(i).setScorescript(
							(list.get(i).getScorescript().replace(keyword, Common.getKeywordSpan(keyword))));

				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		}

		Pager<Vexperiment_record_mini> pager = new Pager<>(page);
		PagerList<Vexperiment_record_mini> pagerList = new PagerList<>(pager, list);

		return pagerList;
	}

	/***
	 * 按id修改实体，返回布尔值，是否成功
	 * 
	 * @param id 实体
	 * @return 是否成功
	 */
	public Boolean updateExperiment_recordById(Integer score, String scorescript, Integer reviewstate, Long update_gmt,
			Integer id) {

		logger.debug(this.getClass().getName() + ".updateExperiment_recordById()");
		UpdateWrapper<Experiment_record> uwr = new UpdateWrapper<>();

		uwr.set(Experiment_record.SCORE, score);
		uwr.set(Experiment_record.SCORESCRIPT, scorescript);
		uwr.set(Experiment_record.REVIEWSTATE, reviewstate);

		uwr.set(Experiment_record.UPDATE_GMT, update_gmt);

		uwr.eq(Experiment_record.ID, id);
		return svcexperiment_record.update(uwr);
	}

	/**
	 * 读取当前课程的所有学生名单
	 * 
	 * @param curriculumid
	 * @return
	 */
	public List<Student> listStudentByCurriculumid(Integer curriculumid) {

		// SELECT distinct user_id FROM tpa.vlink_user_usergroup_curriculum_experiment
		// where curriculum_id=31
		// SELECT * FROM tpa.user where id in (
		// SELECT distinct user_id FROM tpa.vlink_user_usergroup_curriculum_experiment
		// where curriculum_id=31
		// ) order by username

		// Map<String, Object> params = new HashMap<String, Object>();
		// params.put(Vlink_user_usergroup_curriculum_experiment.FieldName.curriculum_id
		// + "", curriculumid);
		// List<Vlink_user_usergroup_curriculum_experiment> uuc =
		// daovlink_user_usergroup_curriculum_experiment
		// .getlist(params);

		List<Student> students = svcstudent.listStudentByCurriculumid(curriculumid);

		return students;
	}

//	public



	/***
	 * 更新小分
	 * 
	 * @param id 实体
	 * @return 是否成功
	 */
	public Boolean updateEvaluation_result_recordById(Integer score, Boolean is_reviewed, Long update_gmt, Integer id) {

		logger.debug(this.getClass().getName() + ".updateEvaluation_result_recordById()");
		UpdateWrapper<Evaluation_result_record> uwr = new UpdateWrapper<>();

		uwr.set(Evaluation_result_record.IS_SUBMITED, true);
		uwr.set(Evaluation_result_record.SCORE, score);
		uwr.set(Evaluation_result_record.IS_REVIEWED, is_reviewed);
		uwr.set(Evaluation_result_record.UPDATE_GMT, update_gmt);

		uwr.eq(Evaluation_result_record.ID, id);
		return svcevaluation_result_record.update(uwr);
	}

	/***
	 * 更新总分
	 * 
	 * @param id 实体
	 * @return 是否成功
	 */
	public Boolean updateEvaluation_resultById(Integer score, Boolean is_reviewed, Long update_gmt, Integer id) {

		logger.debug(this.getClass().getName() + ".updateEvaluation_resultById()");
		UpdateWrapper<Evaluation_result> uwr = new UpdateWrapper<>();

		uwr.set(Evaluation_result.SCORE, score);
		uwr.set(Evaluation_result.IS_REVIEWED, is_reviewed);
		uwr.set(Evaluation_result.UPDATE_GMT, update_gmt);

		uwr.eq(Evaluation_result.ID, id);
		return svcevaluation_result.update(uwr);
	}

	/****
	 * 返回条件筛选后，并且排序后的实验
	 * 
	 * @param params
	 * @param orderByField
	 * @return
	 */
	public List<Vlink_experiment_curriculum_min> listExperimentByMap(Map<String, Object> params, String orderByField) {

		return svcvlink_experiment_curriculum_min
				.list(new QueryWrapper<Vlink_experiment_curriculum_min>().allEq(params).orderByAsc(orderByField));
	}

	/***
	 * 教师更新实验内容和实验安排experimentarrange
	 * 
	 * @param intro
	 * @param title
	 * @param content
	 * @param purposes_requirement
	 * @param filesize
	 * @param update_gmt
	 * @param id
	 * @return
	 */
	public Boolean updateExperimentById(String intro, String title, String content, String purposes_requirement,
			Integer filesize, long update_gmt, Integer id) {

		logger.debug(this.getClass().getName() + ".updateExperimentById()");
		UpdateWrapper<Experiment> uwr = new UpdateWrapper<>();

		uwr.set(Experiment.INTRO, intro);
		uwr.set(Experiment.TITLE, title);
		uwr.set(Experiment.CONTENT, content);
		uwr.set(Experiment.PURPOSES_REQUIREMENT, purposes_requirement);
		uwr.set(Experiment.FILESIZE, filesize);
		uwr.set(Experiment.UPDATE_GMT, update_gmt);

		uwr.eq(Experiment.ID, id);

		return svcexperiment.update(uwr);
	}

	/****
	 * 教师更新实验内容和实验安排experimentarrange
	 * 
	 * @param opening_gmt
	 * @param closing_gmt
	 * @param update_gmt
	 * @param lec_id
	 * @return
	 */
	public Boolean updateLink_experiment_curriculumById(Long opening_gmt, Long closing_gmt, long update_gmt,
			Integer lec_id) {

		logger.debug(this.getClass().getName() + ".updateLink_experiment_curriculumById()");
		UpdateWrapper<Link_experiment_curriculum> uwr = new UpdateWrapper<>();

		uwr.set(Link_experiment_curriculum.OPENING_GMT, opening_gmt);
		uwr.set(Link_experiment_curriculum.CLOSING_GMT, closing_gmt);

		uwr.set(Link_experiment_curriculum.UPDATE_GMT, update_gmt);

		uwr.eq(Link_experiment_curriculum.ID, lec_id);
		return svclink_experiment_curriculum.update(uwr);
	}

	public Evaluation_ip_record getlastEvaluation_ip_record(Integer evid, String sno) {

		Evaluation_ip_record it = new Evaluation_ip_record();

		List<Evaluation_ip_record> list = svcevaluation_ip_record.list(new QueryWrapper<Evaluation_ip_record>()
				.eq(Evaluation_ip_record.EVALUATION_ID, evid).eq(Evaluation_ip_record.SNO, sno)
				.eq(Evaluation_ip_record.TYPE, 0).orderByDesc(Evaluation_ip_record.ID).last("limit 1"));

		if (list.size() == 0) {

			it.setIp(Common.getIP());
		} else {
			it = list.get(0);
		}

		return it;
	}

	// 记录cena评测结果
	public boolean updateEvaluation_resultById(Integer evaluation_id, String sno, Integer totalscore,
			Integer evaluation_result_id) {

		logger.debug(this.getClass().getName() + ".updateEvaluation_resultById()");

		UpdateWrapper<Evaluation_result> uwr = new UpdateWrapper<>();

		uwr.set(Evaluation_result.EVALUATION_ID, evaluation_id);
		uwr.set(Evaluation_result.SNO, sno);
		uwr.set(Evaluation_result.SCORE, totalscore);
		uwr.set(Evaluation_result.IS_REVIEWED, true);
		// uwr.set(Evaluation_result.UPDATE_GMT , new Date().getTime());
		uwr.eq(Evaluation_result.ID, evaluation_result_id);

		return svcevaluation_result.update(uwr);

	}

}
