//-----------------------------
//-- Generated By Denny(luhox@qq.com)
//-- Remarks: app.controller.test
//-- Date Generated: 2020-10-09 10:48:00
//-----------------------------

package app.controller;

import java.util.*;
import java.text.*;
import java.math.BigDecimal;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;

import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.ModelAndView;
import org.apache.commons.lang3.StringUtils;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.shiro.SecurityUtils;

import app.utils.Common;
import app.entity.*;
import app.service.TestService;
import sld.webutils.*;
import tpa.entity.*;

/*
 *  测试用，控制器注解已经注释，调试时可以打开使用
 */
//@Controller
//@RequestMapping(value = "/test")
public class Test extends BaseController {

	private static final Log logger = LogFactory.getLog(Test.class);
	private String themeName = "default/";
	@Autowired
	@Qualifier("TestService")
	private TestService svcb;

	public Test() {
		System.out.println("Test--控制器加载");
	}

	/***
	 * 在Controller每个方法执行之前都执行
	 * 
	 * @param model
	 */
	@ModelAttribute
	public void addAttribute(Model model) {

		System.out.println("Test Controller -julius");

		model.addAttribute("basePath", Common.getBasePath());
		model.addAttribute("appPath", Common.AppPath);
		model.addAttribute("appName", Common.AppName);
		model.addAttribute("appSubName", Common.AppSubName);
		model.addAttribute("companyName", Common.companyName);
		model.addAttribute("companyShortName", Common.companyShortName);
	}

	@RequestMapping(value = { "", "/", "/index.html" }, method = RequestMethod.GET)
	public ModelAndView index(ModelAndView mv) {

		System.out.println(this.getClass().getName() + "GET had been called!");

		ArrayList<String> list = new ArrayList<>();

		list.add("config");
		list.add("curriculum");
		list.add("evaluation");
		list.add("evaluation_ip_record");
		list.add("evaluation_point");
		list.add("evaluation_result");
		list.add("evaluation_result_record");
		list.add("evaluation_type");
		list.add("experiment");
		list.add("experiment_record");
		list.add("link_experiment_curriculum");
		list.add("link_role_permit");
		list.add("link_student2group");
		list.add("link_user_role");
		list.add("message");
		list.add("permit");
		list.add("role");
		list.add("statistic");
		list.add("student");
		list.add("student_group");
		list.add("subject");
		list.add("syslog");
		list.add("user");
		list.add("user_login_log");
		list.add("vcurriculum");
		list.add("vevaluation");
		list.add("vevaluation_point");
		list.add("vexperiment_record");
		list.add("vexperiment_record_mini");
		list.add("vlink_experiment_curriculum");
		list.add("vlink_experiment_curriculum_min");
		list.add("vlink_student2group");
		mv.addObject("message", "testGET!");
		mv.addObject("list", list);

		mv.setViewName("test/index");
		return mv;
	}

	@RequestMapping(value = "/test", method = RequestMethod.POST)
	public ModelAndView testPOST(ModelAndView mv) {

		System.out.println(this.getClass().getName() + "TestController");
		mv.addObject("message", "I'm testPOST!");

		mv.setViewName("admin/index");
		return mv;
	}

	// TODO: GET-config
	@RequestMapping(value = { "/config", "/config/", "/config/index.html" }, method = RequestMethod.GET)
	public ModelAndView configGET(ModelAndView mv, @RequestParam(value = "kw", required = false) String kw,
			@RequestParam(value = "clrkw", required = false) String clrkw,
			@RequestParam(value = "operate", required = false) String operate,
			@RequestParam(value = "pn", required = false) Integer pn,
			@RequestParam(value = "ps", required = false) Integer ps,
			@RequestParam(value = "id", required = false) Integer id, HttpServletRequest request, HttpSession session) {
		logger.info(this.getClass().getName());
		System.out.println(this.getClass().getName() + ",operate=" + operate + ",id=" + id + ",pn=" + pn + ",ps=" + ps
				+ ",kw=" + kw + ",clrkw=" + clrkw);
		mv.addObject("navitem", "Config");// 菜单项显示当前项
		String pagename = "test/config";
		// 新增和编辑，列表页面筛选也需要使用，页面部分都有一些预先读取的内容
		if (StringUtils.isBlank(operate) || operate.equals("add") || operate.equals("edit")) {
			// 新建、编辑、列表的条件筛选
			// 用于制作彩色的标签
			mv.addObject("tagpostfixlist", Common.tagPostfix);
		}
		// 新增和编辑，列表页面筛选也需要使用，页面部分都有一些预先读取的内容
		if (!StringUtils.isBlank(operate)) {
			// 操作不为空，增删改
			mv.addObject("operate", operate);
			switch (operate) {
			case "add": {
				mv.addObject("pagetitle", "管理系统配置表");
				mv.addObject("subtitle", "新增系统配置表");
				mv.addObject("formtitle", "新增系统配置表");
				mv.addObject("pagename", pagename);
				// 默认作者是当前用户
				UserShiro userShiro = (UserShiro) SecurityUtils.getSubject().getPrincipal();
				mv.addObject("author", userShiro.getLogin_name());
				// 默认置顶3天
				Calendar calendar = Calendar.getInstance();
				calendar.add(Calendar.DATE, 3);
				SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
				String toptill_date = sdf.format(new Date(calendar.getTimeInMillis()));
				mv.addObject("toptill_date", toptill_date);
				// 默认头像
				mv.addObject("wechat_headimgurl", Common.userheadimgurl);
				mv.setViewName(pagename);
			}
				break;
			case "edit": {

				mv.addObject("pagetitle", "管理系统配置表");
				mv.addObject("subtitle", "修改系统配置表");
				mv.addObject("formtitle", "修改系统配置表");
				mv.addObject("pagename", pagename);
				mv.addObject("referer", Common.getRefererUrl());

				// 读取当前已有信息
				Config it = svcb.getConfigById(id);
				// 修正信息：如默认头像
				mv.addObject("it", it);
				mv.setViewName(pagename);
			}
				break;
			case "delete": {

				boolean rtv = false;
				try {
					rtv = svcb.removeConfigById(id);
				} catch (Exception e) {
					e.printStackTrace();
				}
				if (rtv) {

					mv.addObject("message", "信息已经删除！");
					mv.addObject("jumpto", Common.getRefererUrl());
					mv.setViewName("jumper");
				} else {

					mv.addObject("message", "删除操作被外星人强行终止！");
					mv.addObject("jumpto", Common.getRefererUrl());
					mv.setViewName("jumperclick");
				}
			}
				break;
			case "hideitem":
			case "showitem": {
				UserShiro userShiro = (UserShiro) SecurityUtils.getSubject().getPrincipal();
				// svcb.updateConfigById(operate, id);
				mv.addObject("jumpto", Common.getRefererUrl());
				mv.setViewName("jumperatonce");
			}
				break;

			default: {

			}
				break;
			}
		} else {
			// 操作为空,默认为搜索,显示列表
			String qs = "";
			Integer pagenumber = Common.recordToSession(session, "pagenumber", pn + "", 1);
			Integer pagesize = Common.recordToSession(session, "pagesize", ps + "", 10);
			String keyword = Util.replaceSqlChar(kw);
			keyword = Common.recordToSession(session, "keyword_config", keyword, "");
			// 清除搜索条件
			if (!StringUtils.isBlank(clrkw)) {
				session.removeAttribute("keyword_config");
				keyword = null;
			}

			// 读取url中是否包含筛选条件
			Map<String, String> sqlin = new HashMap<String, String>();

			mv.addObject("pagetitle", "管理系统配置表");
			mv.addObject("subtitle", "分页列表");
			mv.addObject("tabletitle", "管理");
			mv.addObject("pagename", pagename);// 当前页面的url

			if (!StringUtils.isBlank(keyword)) {
				mv.addObject("kw", keyword);
				qs += "kw=" + keyword + "&";
			}
			mv.addObject("qs", qs);

			// 在列表中需要筛选的条件
			Map<String, Object> params = new HashMap<String, Object>();
			// params.put(Config.ID, 0);
			// params.put(Config.NAME, 0);// 筛选条件1
			List<KeyAndValue> ordlist = new ArrayList<KeyAndValue>();
			ordlist.add(new KeyAndValue(Config.ID, "desc"));
			PagerList<Config> pagerlist = svcb.pagerListConfig(pagenumber, pagesize, keyword, sqlin, params, ordlist);
			if (pagerlist.getPager().getRecordsSize() == 0 && pagerlist.getPager().getPages() != 0
					&& pagerlist.getPager().getCurrent() > pagerlist.getPager().getPages()) {
				String url = Common.getBasePath() + pagename + "?" + qs + "pn=" + pagerlist.getPager().getPages();
				mv.addObject("jumpto", url);
				// System.out.println("Test.ConfigGET()url=" + url);
				mv.setViewName("jumperatonce");
			} else {
				// Pager<Config> pager = new Pager<Config>(page);
				// System.out.println("Test.ConfigGET()pager=" + pager.toString());
				mv.addObject("qs", qs);
				mv.addObject("pager", pagerlist.getPager());
				mv.addObject("list", pagerlist.getList());
				mv.setViewName(pagename);
			}
		}

		return mv;

	}

	// TODO: POST-config
	@RequestMapping(value = { "/config", "/config/", "/config/index.html" }, method = RequestMethod.POST)
	public ModelAndView configPOST(ModelAndView mv, HttpServletRequest request, HttpSession session) throws Exception {

		System.out.println(this.getClass().getName() + "POST");
		String pagename = "admin/config";
		UserShiro userShiro = (UserShiro) SecurityUtils.getSubject().getPrincipal();
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		String operate = request.getParameter("operate");
		// --------编辑修改共有的部分---------
		String name = "";
		if (!StringUtils.isBlank(request.getParameter("name"))) {
			name = request.getParameter("name");
		}
		name = Util.restrictLength(name, 50);
		String value = "";
		if (!StringUtils.isBlank(request.getParameter("value"))) {
			value = request.getParameter("value");
		}
		value = Util.restrictLength(value, 255);
		String remark = "";
		if (!StringUtils.isBlank(request.getParameter("remark"))) {
			remark = request.getParameter("remark");
		}
		remark = Util.restrictLength(remark, 255);
		// --------编辑修改共有的部分-结束---------
		// Integer create_userid = userShiro.getId();
		// 来源页面
		String referer = request.getParameter("referer");
		switch (operate) {
		case "addform": {

			// String password_digest = DigestUtils.md5Hex(password);
			// Integer sortid = (int) Math.round(svcb.maxConfig(Config.SORTID)) + 1;
			Config it = new Config(name, value, remark, userShiro.getId(), 0);

			// ----------保存前检查逻辑问题---------------
			// 如：用户名必须唯一，手机号必须唯一
			Map<String, Object> params = new HashMap<String, Object>();
			// params.put(Config.ID, id);
			List<Config> list = svcb.listConfigByMap(params);
			if (StringUtils.isBlank("") || StringUtils.isBlank("")) {

				mv.addObject("message", "你输入的信息没有通过星际外交部的严格审核，请重新输入！");
				mv.addObject("jumpto", pagename);
				mv.setViewName("jumperback");
				return mv;
			} else if (list.size() > 0) {

				// 输入内容中，有些内容要求值唯一！
				mv.addObject("message", "你输入的信息已经被外星人抢先注册！");
				mv.addObject("jumpto", pagename);
				mv.setViewName("jumperback");
				return mv;
			} else {

				svcb.saveConfig(it);
			}
			// ----------保存前检查逻辑问题结束------------

			mv.addObject("message", "信息已经保存！");
		}
			break;
		case "editform": {
			Integer id = 0;
			if (!StringUtils.isBlank(request.getParameter("id"))) {
				id = Integer.parseInt(request.getParameter("id"));
			}
			// update_gmt = sdf.parse(request.getParameter("update_gmt_date")).getTime();
			// String password_digest = DigestUtils.md5Hex(password);

			// ----------保存前检查逻辑上是否有冲突---------------
			// 如：用户名必须唯一，手机号必须唯一
			Map<String, Object> params = new HashMap<String, Object>();
			params.put(Config.ID, id);
			List<Config> list = svcb.listConfigByMap(params);
			if (list.size() > 1 || (list.size() == 1 && list.get(0).getId() != id)) {

				mv.addObject("message", "你输入的手机号码已经被外星人抢先注册！");
				mv.addObject("jumpto", pagename);
				mv.setViewName("jumperback");
				return mv;
			} else {
				svcb.updateConfigById(name, value, remark, userShiro.getId(), new Date().getTime(), id);

			}
			// ----------保存前检查逻辑问题结束------------

			mv.addObject("message", "信息已经修改！");

		}
			break;

		default:
			System.out.println(this.getClass().getName() + "没有对应的operate=" + operate);
			break;
		}

		mv.addObject("jumpto", referer);
		mv.setViewName("jumper");

		return mv;
	}

	// TODO: GET-curriculum
	@RequestMapping(value = { "/curriculum", "/curriculum/", "/curriculum/index.html" }, method = RequestMethod.GET)
	public ModelAndView curriculumGET(ModelAndView mv, @RequestParam(value = "kw", required = false) String kw,
			@RequestParam(value = "clrkw", required = false) String clrkw,
			@RequestParam(value = "operate", required = false) String operate,
			@RequestParam(value = "pn", required = false) Integer pn,
			@RequestParam(value = "ps", required = false) Integer ps,
			@RequestParam(value = "id", required = false) Integer id, HttpServletRequest request, HttpSession session) {
		logger.info(this.getClass().getName());
		System.out.println(this.getClass().getName() + ",operate=" + operate + ",id=" + id + ",pn=" + pn + ",ps=" + ps
				+ ",kw=" + kw + ",clrkw=" + clrkw);
		mv.addObject("navitem", "Curriculum");// 菜单项显示当前项
		String pagename = "test/curriculum";
		// 新增和编辑，列表页面筛选也需要使用，页面部分都有一些预先读取的内容
		if (StringUtils.isBlank(operate) || operate.equals("add") || operate.equals("edit")) {
			// 新建、编辑、列表的条件筛选
			// 用于制作彩色的标签
			mv.addObject("tagpostfixlist", Common.tagPostfix);
			mv.addObject("subjectlist", svcb.listSubjectOrderByAsc(Subject.ID));
			mv.addObject("subjectmap", svcb.mapSubject());
			mv.addObject("student_grouplist", svcb.listStudent_groupOrderByAsc(Student_group.ID));
			mv.addObject("student_groupmap", svcb.mapStudent_group());
			mv.addObject("userlist", svcb.listUserOrderByAsc(User.ID));
			mv.addObject("usermap", svcb.mapUser());
		}
		// 新增和编辑，列表页面筛选也需要使用，页面部分都有一些预先读取的内容
		if (!StringUtils.isBlank(operate)) {
			// 操作不为空，增删改
			mv.addObject("operate", operate);
			switch (operate) {
			case "add": {
				mv.addObject("pagetitle", "管理课程，指定学科、班级、老师");
				mv.addObject("subtitle", "新增课程，指定学科、班级、老师");
				mv.addObject("formtitle", "新增课程，指定学科、班级、老师");
				mv.addObject("pagename", pagename);
				// 默认作者是当前用户
				UserShiro userShiro = (UserShiro) SecurityUtils.getSubject().getPrincipal();
				mv.addObject("author", userShiro.getLogin_name());
				// 默认置顶3天
				Calendar calendar = Calendar.getInstance();
				calendar.add(Calendar.DATE, 3);
				SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
				String toptill_date = sdf.format(new Date(calendar.getTimeInMillis()));
				mv.addObject("toptill_date", toptill_date);
				// 默认头像
				mv.addObject("wechat_headimgurl", Common.userheadimgurl);
				mv.setViewName(pagename);
			}
				break;
			case "edit": {

				mv.addObject("pagetitle", "管理课程，指定学科、班级、老师");
				mv.addObject("subtitle", "修改课程，指定学科、班级、老师");
				mv.addObject("formtitle", "修改课程，指定学科、班级、老师");
				mv.addObject("pagename", pagename);
				mv.addObject("referer", Common.getRefererUrl());

				// 读取当前已有信息
				Curriculum it = svcb.getCurriculumById(id);
				// 修正信息：如默认头像
				mv.addObject("it", it);
				mv.setViewName(pagename);
			}
				break;
			case "delete": {

				boolean rtv = false;
				try {
					rtv = svcb.removeCurriculumById(id);
				} catch (Exception e) {
					e.printStackTrace();
				}
				if (rtv) {

					mv.addObject("message", "信息已经删除！");
					mv.addObject("jumpto", Common.getRefererUrl());
					mv.setViewName("jumper");
				} else {

					mv.addObject("message", "删除操作被外星人强行终止！");
					mv.addObject("jumpto", Common.getRefererUrl());
					mv.setViewName("jumperclick");
				}
			}
				break;
			case "hideitem":
			case "showitem": {
				UserShiro userShiro = (UserShiro) SecurityUtils.getSubject().getPrincipal();
				// svcb.updateCurriculumById(operate, id);
				mv.addObject("jumpto", Common.getRefererUrl());
				mv.setViewName("jumperatonce");
			}
				break;

			default: {

			}
				break;
			}
		} else {
			// 操作为空,默认为搜索,显示列表
			String qs = "";
			Integer pagenumber = Common.recordToSession(session, "pagenumber", pn + "", 1);
			Integer pagesize = Common.recordToSession(session, "pagesize", ps + "", 10);
			String keyword = Util.replaceSqlChar(kw);
			keyword = Common.recordToSession(session, "keyword_curriculum", keyword, "");
			// 清除搜索条件
			if (!StringUtils.isBlank(clrkw)) {
				session.removeAttribute("keyword_curriculum");
				keyword = null;
			}

			// 读取url中是否包含筛选条件
			Map<String, String> sqlin = new HashMap<String, String>();

			if (!StringUtils.isBlank(request.getParameter("subject_id"))) {
				sqlin.put(Curriculum.SUBJECT_ID + "_id", request.getParameter("subject_id"));
				mv.addObject(Curriculum.SUBJECT_ID + "_map",
						Util.splitToInteger(request.getParameter("subject_id"), ","));
				qs += Curriculum.SUBJECT_ID + "=" + request.getParameter("subject_id") + "&";
			}

			if (!StringUtils.isBlank(request.getParameter("student_group_id"))) {
				sqlin.put(Curriculum.STUDENT_GROUP_ID + "_id", request.getParameter("student_group_id"));
				mv.addObject(Curriculum.STUDENT_GROUP_ID + "_map",
						Util.splitToInteger(request.getParameter("student_group_id"), ","));
				qs += Curriculum.STUDENT_GROUP_ID + "=" + request.getParameter("student_group_id") + "&";
			}

			if (!StringUtils.isBlank(request.getParameter("user_id"))) {
				sqlin.put(Curriculum.USER_ID + "_id", request.getParameter("user_id"));
				mv.addObject(Curriculum.USER_ID + "_map", Util.splitToInteger(request.getParameter("user_id"), ","));
				qs += Curriculum.USER_ID + "=" + request.getParameter("user_id") + "&";
			}

			mv.addObject("pagetitle", "管理课程，指定学科、班级、老师");
			mv.addObject("subtitle", "分页列表");
			mv.addObject("tabletitle", "管理");
			mv.addObject("pagename", pagename);// 当前页面的url

			if (!StringUtils.isBlank(keyword)) {
				mv.addObject("kw", keyword);
				qs += "kw=" + keyword + "&";
			}
			mv.addObject("qs", qs);

			// 在列表中需要筛选的条件
			Map<String, Object> params = new HashMap<String, Object>();
			// params.put(Curriculum.ID, 0);
			// params.put(Curriculum.SUBJECT_ID, 0);// 筛选条件1
			List<KeyAndValue> ordlist = new ArrayList<KeyAndValue>();
			ordlist.add(new KeyAndValue(Curriculum.ID, "desc"));
			PagerList<Curriculum> pagerlist = svcb.pagerListCurriculum(pagenumber, pagesize, keyword, sqlin, params,
					ordlist);
			if (pagerlist.getPager().getRecordsSize() == 0 && pagerlist.getPager().getPages() != 0
					&& pagerlist.getPager().getCurrent() > pagerlist.getPager().getPages()) {
				String url = Common.getBasePath() + pagename + "?" + qs + "pn=" + pagerlist.getPager().getPages();
				mv.addObject("jumpto", url);
				// System.out.println("Test.CurriculumGET()url=" + url);
				mv.setViewName("jumperatonce");
			} else {
				// Pager<Curriculum> pager = new Pager<Curriculum>(page);
				// System.out.println("Test.CurriculumGET()pager=" + pager.toString());
				mv.addObject("qs", qs);
				mv.addObject("pager", pagerlist.getPager());
				mv.addObject("list", pagerlist.getList());
				mv.setViewName(pagename);
			}
		}

		return mv;

	}

	// TODO: POST-curriculum
	@RequestMapping(value = { "/curriculum", "/curriculum/", "/curriculum/index.html" }, method = RequestMethod.POST)
	public ModelAndView curriculumPOST(ModelAndView mv, HttpServletRequest request, HttpSession session)
			throws Exception {

		System.out.println(this.getClass().getName() + "POST");
		String pagename = "admin/curriculum";
		UserShiro userShiro = (UserShiro) SecurityUtils.getSubject().getPrincipal();
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		String operate = request.getParameter("operate");
		// --------编辑修改共有的部分---------
		Integer subject_id = 0;
		if (!StringUtils.isBlank(request.getParameter("subject_id"))) {
			subject_id = Integer.parseInt(request.getParameter("subject_id"));
		}
		Integer student_group_id = 0;
		if (!StringUtils.isBlank(request.getParameter("student_group_id"))) {
			student_group_id = Integer.parseInt(request.getParameter("student_group_id"));
		}
		Integer user_id = 0;
		if (!StringUtils.isBlank(request.getParameter("user_id"))) {
			user_id = Integer.parseInt(request.getParameter("user_id"));
		}
		Boolean is_actived = StringUtils.isBlank(request.getParameter("is_actived")) ? false : true;
		String semester = "";
		if (!StringUtils.isBlank(request.getParameter("semester"))) {
			semester = request.getParameter("semester");
		}
		semester = Util.restrictLength(semester, 45);
		// --------编辑修改共有的部分-结束---------
		// Integer create_userid = userShiro.getId();
		// 来源页面
		String referer = request.getParameter("referer");
		switch (operate) {
		case "addform": {

			// String password_digest = DigestUtils.md5Hex(password);
			// Integer sortid = (int) Math.round(svcb.maxCurriculum(Curriculum.SORTID)) + 1;
			Curriculum it = new Curriculum(subject_id, student_group_id, user_id, is_actived, semester);

			// ----------保存前检查逻辑问题---------------
			// 如：用户名必须唯一，手机号必须唯一
			Map<String, Object> params = new HashMap<String, Object>();
			// params.put(Curriculum.ID, id);
			List<Curriculum> list = svcb.listCurriculumByMap(params);
			if (StringUtils.isBlank("") || StringUtils.isBlank("")) {

				mv.addObject("message", "你输入的信息没有通过星际外交部的严格审核，请重新输入！");
				mv.addObject("jumpto", pagename);
				mv.setViewName("jumperback");
				return mv;
			} else if (list.size() > 0) {

				// 输入内容中，有些内容要求值唯一！
				mv.addObject("message", "你输入的信息已经被外星人抢先注册！");
				mv.addObject("jumpto", pagename);
				mv.setViewName("jumperback");
				return mv;
			} else {

				svcb.saveCurriculum(it);
			}
			// ----------保存前检查逻辑问题结束------------

			mv.addObject("message", "信息已经保存！");
		}
			break;
		case "editform": {
			Integer id = 0;
			if (!StringUtils.isBlank(request.getParameter("id"))) {
				id = Integer.parseInt(request.getParameter("id"));
			}
			// update_gmt = sdf.parse(request.getParameter("update_gmt_date")).getTime();
			// String password_digest = DigestUtils.md5Hex(password);

			// ----------保存前检查逻辑上是否有冲突---------------
			// 如：用户名必须唯一，手机号必须唯一
			Map<String, Object> params = new HashMap<String, Object>();
			params.put(Curriculum.ID, id);
			List<Curriculum> list = svcb.listCurriculumByMap(params);
			if (list.size() > 1 || (list.size() == 1 && list.get(0).getId() != id)) {

				mv.addObject("message", "你输入的手机号码已经被外星人抢先注册！");
				mv.addObject("jumpto", pagename);
				mv.setViewName("jumperback");
				return mv;
			} else {
				svcb.updateCurriculumById(subject_id, student_group_id, user_id, is_actived, semester,
						new Date().getTime(), id);

			}
			// ----------保存前检查逻辑问题结束------------

			mv.addObject("message", "信息已经修改！");

		}
			break;

		default:
			System.out.println(this.getClass().getName() + "没有对应的operate=" + operate);
			break;
		}

		mv.addObject("jumpto", referer);
		mv.setViewName("jumper");

		return mv;
	}

	// TODO: GET-evaluation
	@RequestMapping(value = { "/evaluation", "/evaluation/", "/evaluation/index.html" }, method = RequestMethod.GET)
	public ModelAndView evaluationGET(ModelAndView mv, @RequestParam(value = "kw", required = false) String kw,
			@RequestParam(value = "clrkw", required = false) String clrkw,
			@RequestParam(value = "operate", required = false) String operate,
			@RequestParam(value = "pn", required = false) Integer pn,
			@RequestParam(value = "ps", required = false) Integer ps,
			@RequestParam(value = "id", required = false) Integer id, HttpServletRequest request, HttpSession session) {
		logger.info(this.getClass().getName());
		System.out.println(this.getClass().getName() + ",operate=" + operate + ",id=" + id + ",pn=" + pn + ",ps=" + ps
				+ ",kw=" + kw + ",clrkw=" + clrkw);
		mv.addObject("navitem", "Evaluation");// 菜单项显示当前项
		String pagename = "test/evaluation";
		// 新增和编辑，列表页面筛选也需要使用，页面部分都有一些预先读取的内容
		if (StringUtils.isBlank(operate) || operate.equals("add") || operate.equals("edit")) {
			// 新建、编辑、列表的条件筛选
			// 用于制作彩色的标签
			mv.addObject("tagpostfixlist", Common.tagPostfix);
			mv.addObject("curriculumlist", svcb.listCurriculumOrderByAsc(Curriculum.ID));
			mv.addObject("curriculummap", svcb.mapCurriculum());
		}
		// 新增和编辑，列表页面筛选也需要使用，页面部分都有一些预先读取的内容
		if (!StringUtils.isBlank(operate)) {
			// 操作不为空，增删改
			mv.addObject("operate", operate);
			switch (operate) {
			case "add": {
				mv.addObject("pagetitle", "管理考核内容管理");
				mv.addObject("subtitle", "新增考核内容管理");
				mv.addObject("formtitle", "新增考核内容管理");
				mv.addObject("pagename", pagename);
				// 默认作者是当前用户
				UserShiro userShiro = (UserShiro) SecurityUtils.getSubject().getPrincipal();
				mv.addObject("author", userShiro.getLogin_name());
				// 默认置顶3天
				Calendar calendar = Calendar.getInstance();
				calendar.add(Calendar.DATE, 3);
				SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
				String toptill_date = sdf.format(new Date(calendar.getTimeInMillis()));
				mv.addObject("toptill_date", toptill_date);
				// 默认头像
				mv.addObject("wechat_headimgurl", Common.userheadimgurl);
				mv.setViewName(pagename);
			}
				break;
			case "edit": {

				mv.addObject("pagetitle", "管理考核内容管理");
				mv.addObject("subtitle", "修改考核内容管理");
				mv.addObject("formtitle", "修改考核内容管理");
				mv.addObject("pagename", pagename);
				mv.addObject("referer", Common.getRefererUrl());

				// 读取当前已有信息
				Evaluation it = svcb.getEvaluationById(id);
				// 修正信息：如默认头像
				mv.addObject("it", it);
				mv.setViewName(pagename);
			}
				break;
			case "delete": {

				boolean rtv = false;
				try {
					rtv = svcb.removeEvaluationById(id);
				} catch (Exception e) {
					e.printStackTrace();
				}
				if (rtv) {

					mv.addObject("message", "信息已经删除！");
					mv.addObject("jumpto", Common.getRefererUrl());
					mv.setViewName("jumper");
				} else {

					mv.addObject("message", "删除操作被外星人强行终止！");
					mv.addObject("jumpto", Common.getRefererUrl());
					mv.setViewName("jumperclick");
				}
			}
				break;
			case "hideitem":
			case "showitem": {
				UserShiro userShiro = (UserShiro) SecurityUtils.getSubject().getPrincipal();
				// svcb.updateEvaluationById(operate, id);
				mv.addObject("jumpto", Common.getRefererUrl());
				mv.setViewName("jumperatonce");
			}
				break;
			case "moveup":
			case "movedown": {
				if (!svcb.moveEvaluation(operate, "movedown", id, Evaluation.SORTID)) {

					mv.addObject("message", "移动操作被外星人强行终止！");
					mv.addObject("jumpto", Common.getRefererUrl());
					mv.setViewName("jumperclick");
				} else {

					mv.addObject("jumpto", Common.getRefererUrl());
					mv.setViewName("jumperatonce");

				}
			}
				break;

			default: {

			}
				break;
			}
		} else {
			// 操作为空,默认为搜索,显示列表
			String qs = "";
			Integer pagenumber = Common.recordToSession(session, "pagenumber", pn + "", 1);
			Integer pagesize = Common.recordToSession(session, "pagesize", ps + "", 10);
			String keyword = Util.replaceSqlChar(kw);
			keyword = Common.recordToSession(session, "keyword_evaluation", keyword, "");
			// 清除搜索条件
			if (!StringUtils.isBlank(clrkw)) {
				session.removeAttribute("keyword_evaluation");
				keyword = null;
			}

			// 读取url中是否包含筛选条件
			Map<String, String> sqlin = new HashMap<String, String>();

			if (!StringUtils.isBlank(request.getParameter("curriculum_id"))) {
				sqlin.put(Evaluation.CURRICULUM_ID + "_id", request.getParameter("curriculum_id"));
				mv.addObject(Evaluation.CURRICULUM_ID + "_map",
						Util.splitToInteger(request.getParameter("curriculum_id"), ","));
				qs += Evaluation.CURRICULUM_ID + "=" + request.getParameter("curriculum_id") + "&";
			}

			mv.addObject("pagetitle", "管理考核内容管理");
			mv.addObject("subtitle", "分页列表");
			mv.addObject("tabletitle", "管理");
			mv.addObject("pagename", pagename);// 当前页面的url

			if (!StringUtils.isBlank(keyword)) {
				mv.addObject("kw", keyword);
				qs += "kw=" + keyword + "&";
			}
			mv.addObject("qs", qs);

			// 在列表中需要筛选的条件
			Map<String, Object> params = new HashMap<String, Object>();
			// params.put(Evaluation.ID, 0);
			// params.put(Evaluation.CURRICULUM_ID, 0);// 筛选条件1
			List<KeyAndValue> ordlist = new ArrayList<KeyAndValue>();
			ordlist.add(new KeyAndValue(Evaluation.ID, "desc"));
			PagerList<Evaluation> pagerlist = svcb.pagerListEvaluation(pagenumber, pagesize, keyword, sqlin, params,
					ordlist);
			if (pagerlist.getPager().getRecordsSize() == 0 && pagerlist.getPager().getPages() != 0
					&& pagerlist.getPager().getCurrent() > pagerlist.getPager().getPages()) {
				String url = Common.getBasePath() + pagename + "?" + qs + "pn=" + pagerlist.getPager().getPages();
				mv.addObject("jumpto", url);
				// System.out.println("Test.EvaluationGET()url=" + url);
				mv.setViewName("jumperatonce");
			} else {
				// Pager<Evaluation> pager = new Pager<Evaluation>(page);
				// System.out.println("Test.EvaluationGET()pager=" + pager.toString());
				mv.addObject("qs", qs);
				mv.addObject("pager", pagerlist.getPager());
				mv.addObject("list", pagerlist.getList());
				mv.setViewName(pagename);
			}
		}

		return mv;

	}

	// TODO: POST-evaluation
	@RequestMapping(value = { "/evaluation", "/evaluation/", "/evaluation/index.html" }, method = RequestMethod.POST)
	public ModelAndView evaluationPOST(ModelAndView mv, HttpServletRequest request, HttpSession session)
			throws Exception {

		System.out.println(this.getClass().getName() + "POST");
		String pagename = "admin/evaluation";
		UserShiro userShiro = (UserShiro) SecurityUtils.getSubject().getPrincipal();
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		String operate = request.getParameter("operate");
		// --------编辑修改共有的部分---------
		Integer curriculum_id = 0;
		if (!StringUtils.isBlank(request.getParameter("curriculum_id"))) {
			curriculum_id = Integer.parseInt(request.getParameter("curriculum_id"));
		}
		Boolean is_actived = StringUtils.isBlank(request.getParameter("is_actived")) ? false : true;
		Long begin_gmt = sdf.parse(request.getParameter("begin_gmt_date")).getTime();
		begin_gmt = begin_gmt > 0 ? begin_gmt : 0;
		Long end_gmt = sdf.parse(request.getParameter("end_gmt_date")).getTime();
		end_gmt = end_gmt > 0 ? end_gmt : 0;
		String content = "";
		if (!StringUtils.isBlank(request.getParameter("content"))) {
			content = request.getParameter("content");
		}
		content = Util.restrictLength(content, 50);
		String title = "";
		if (!StringUtils.isBlank(request.getParameter("title"))) {
			title = request.getParameter("title");
		}
		title = Util.restrictLength(title, 100);
		Integer sortid = 0;
		if (!StringUtils.isBlank(request.getParameter("sortid"))) {
			sortid = Integer.parseInt(request.getParameter("sortid"));
		}
		// --------编辑修改共有的部分-结束---------
		// Integer create_userid = userShiro.getId();
		// 来源页面
		String referer = request.getParameter("referer");
		switch (operate) {
		case "addform": {

			// String password_digest = DigestUtils.md5Hex(password);
			// Integer sortid = (int) Math.round(svcb.maxEvaluation(Evaluation.SORTID)) + 1;
			Evaluation it = new Evaluation(curriculum_id, is_actived, begin_gmt, end_gmt, content, title, sortid);

			// ----------保存前检查逻辑问题---------------
			// 如：用户名必须唯一，手机号必须唯一
			Map<String, Object> params = new HashMap<String, Object>();
			// params.put(Evaluation.ID, id);
			List<Evaluation> list = svcb.listEvaluationByMap(params);
			if (StringUtils.isBlank("") || StringUtils.isBlank("")) {

				mv.addObject("message", "你输入的信息没有通过星际外交部的严格审核，请重新输入！");
				mv.addObject("jumpto", pagename);
				mv.setViewName("jumperback");
				return mv;
			} else if (list.size() > 0) {

				// 输入内容中，有些内容要求值唯一！
				mv.addObject("message", "你输入的信息已经被外星人抢先注册！");
				mv.addObject("jumpto", pagename);
				mv.setViewName("jumperback");
				return mv;
			} else {

				svcb.saveEvaluation(it);
			}
			// ----------保存前检查逻辑问题结束------------

			mv.addObject("message", "信息已经保存！");
		}
			break;
		case "editform": {
			Integer id = 0;
			if (!StringUtils.isBlank(request.getParameter("id"))) {
				id = Integer.parseInt(request.getParameter("id"));
			}
			// update_gmt = sdf.parse(request.getParameter("update_gmt_date")).getTime();
			// String password_digest = DigestUtils.md5Hex(password);

			// ----------保存前检查逻辑上是否有冲突---------------
			// 如：用户名必须唯一，手机号必须唯一
			Map<String, Object> params = new HashMap<String, Object>();
			params.put(Evaluation.ID, id);
			List<Evaluation> list = svcb.listEvaluationByMap(params);
			if (list.size() > 1 || (list.size() == 1 && list.get(0).getId() != id)) {

				mv.addObject("message", "你输入的手机号码已经被外星人抢先注册！");
				mv.addObject("jumpto", pagename);
				mv.setViewName("jumperback");
				return mv;
			} else {
				svcb.updateEvaluationById(curriculum_id, is_actived, begin_gmt, end_gmt, content, title, sortid,
						new Date().getTime(), id);

			}
			// ----------保存前检查逻辑问题结束------------

			mv.addObject("message", "信息已经修改！");

		}
			break;

		default:
			System.out.println(this.getClass().getName() + "没有对应的operate=" + operate);
			break;
		}

		mv.addObject("jumpto", referer);
		mv.setViewName("jumper");

		return mv;
	}

	// TODO: GET-evaluation_ip_record
	@RequestMapping(value = { "/evaluation_ip_record", "/evaluation_ip_record/",
			"/evaluation_ip_record/index.html" }, method = RequestMethod.GET)
	public ModelAndView evaluation_ip_recordGET(ModelAndView mv,
			@RequestParam(value = "kw", required = false) String kw,
			@RequestParam(value = "clrkw", required = false) String clrkw,
			@RequestParam(value = "operate", required = false) String operate,
			@RequestParam(value = "pn", required = false) Integer pn,
			@RequestParam(value = "ps", required = false) Integer ps,
			@RequestParam(value = "id", required = false) Integer id, HttpServletRequest request, HttpSession session) {
		logger.info(this.getClass().getName());
		System.out.println(this.getClass().getName() + ",operate=" + operate + ",id=" + id + ",pn=" + pn + ",ps=" + ps
				+ ",kw=" + kw + ",clrkw=" + clrkw);
		mv.addObject("navitem", "Evaluation_ip_record");// 菜单项显示当前项
		String pagename = "test/evaluation_ip_record";
		// 新增和编辑，列表页面筛选也需要使用，页面部分都有一些预先读取的内容
		if (StringUtils.isBlank(operate) || operate.equals("add") || operate.equals("edit")) {
			// 新建、编辑、列表的条件筛选
			// 用于制作彩色的标签
			mv.addObject("tagpostfixlist", Common.tagPostfix);
			mv.addObject("studentlist", svcb.listStudentOrderByAsc(Student.ID));
			mv.addObject("studentmap", svcb.mapStudent());
			mv.addObject("evaluationlist", svcb.listEvaluationOrderByAsc(Evaluation.ID));
			mv.addObject("evaluationmap", svcb.mapEvaluation());
		}
		// 新增和编辑，列表页面筛选也需要使用，页面部分都有一些预先读取的内容
		if (!StringUtils.isBlank(operate)) {
			// 操作不为空，增删改
			mv.addObject("operate", operate);
			switch (operate) {
			case "add": {
				mv.addObject("pagetitle", "管理考试登录ip检查");
				mv.addObject("subtitle", "新增考试登录ip检查");
				mv.addObject("formtitle", "新增考试登录ip检查");
				mv.addObject("pagename", pagename);
				// 默认作者是当前用户
				UserShiro userShiro = (UserShiro) SecurityUtils.getSubject().getPrincipal();
				mv.addObject("author", userShiro.getLogin_name());
				// 默认置顶3天
				Calendar calendar = Calendar.getInstance();
				calendar.add(Calendar.DATE, 3);
				SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
				String toptill_date = sdf.format(new Date(calendar.getTimeInMillis()));
				mv.addObject("toptill_date", toptill_date);
				// 默认头像
				mv.addObject("wechat_headimgurl", Common.userheadimgurl);
				mv.setViewName(pagename);
			}
				break;
			case "edit": {

				mv.addObject("pagetitle", "管理考试登录ip检查");
				mv.addObject("subtitle", "修改考试登录ip检查");
				mv.addObject("formtitle", "修改考试登录ip检查");
				mv.addObject("pagename", pagename);
				mv.addObject("referer", Common.getRefererUrl());

				// 读取当前已有信息
				Evaluation_ip_record it = svcb.getEvaluation_ip_recordById(id);
				// 修正信息：如默认头像
				mv.addObject("it", it);
				mv.setViewName(pagename);
			}
				break;
			case "delete": {

				boolean rtv = false;
				try {
					rtv = svcb.removeEvaluation_ip_recordById(id);
				} catch (Exception e) {
					e.printStackTrace();
				}
				if (rtv) {

					mv.addObject("message", "信息已经删除！");
					mv.addObject("jumpto", Common.getRefererUrl());
					mv.setViewName("jumper");
				} else {

					mv.addObject("message", "删除操作被外星人强行终止！");
					mv.addObject("jumpto", Common.getRefererUrl());
					mv.setViewName("jumperclick");
				}
			}
				break;
			case "hideitem":
			case "showitem": {
				UserShiro userShiro = (UserShiro) SecurityUtils.getSubject().getPrincipal();
				// svcb.updateEvaluation_ip_recordById(operate, id);
				mv.addObject("jumpto", Common.getRefererUrl());
				mv.setViewName("jumperatonce");
			}
				break;

			default: {

			}
				break;
			}
		} else {
			// 操作为空,默认为搜索,显示列表
			String qs = "";
			Integer pagenumber = Common.recordToSession(session, "pagenumber", pn + "", 1);
			Integer pagesize = Common.recordToSession(session, "pagesize", ps + "", 10);
			String keyword = Util.replaceSqlChar(kw);
			keyword = Common.recordToSession(session, "keyword_evaluation_ip_record", keyword, "");
			// 清除搜索条件
			if (!StringUtils.isBlank(clrkw)) {
				session.removeAttribute("keyword_evaluation_ip_record");
				keyword = null;
			}

			// 读取url中是否包含筛选条件
			Map<String, String> sqlin = new HashMap<String, String>();

			if (!StringUtils.isBlank(request.getParameter("student_id"))) {
				sqlin.put(Evaluation_ip_record.STUDENT_ID + "_id", request.getParameter("student_id"));
				mv.addObject(Evaluation_ip_record.STUDENT_ID + "_map",
						Util.splitToInteger(request.getParameter("student_id"), ","));
				qs += Evaluation_ip_record.STUDENT_ID + "=" + request.getParameter("student_id") + "&";
			}

			if (!StringUtils.isBlank(request.getParameter("evaluation_id"))) {
				sqlin.put(Evaluation_ip_record.EVALUATION_ID + "_id", request.getParameter("evaluation_id"));
				mv.addObject(Evaluation_ip_record.EVALUATION_ID + "_map",
						Util.splitToInteger(request.getParameter("evaluation_id"), ","));
				qs += Evaluation_ip_record.EVALUATION_ID + "=" + request.getParameter("evaluation_id") + "&";
			}

			mv.addObject("pagetitle", "管理考试登录ip检查");
			mv.addObject("subtitle", "分页列表");
			mv.addObject("tabletitle", "管理");
			mv.addObject("pagename", pagename);// 当前页面的url

			if (!StringUtils.isBlank(keyword)) {
				mv.addObject("kw", keyword);
				qs += "kw=" + keyword + "&";
			}
			mv.addObject("qs", qs);

			// 在列表中需要筛选的条件
			Map<String, Object> params = new HashMap<String, Object>();
			// params.put(Evaluation_ip_record.ID, 0);
			// params.put(Evaluation_ip_record.STUDENT_ID, 0);// 筛选条件1
			List<KeyAndValue> ordlist = new ArrayList<KeyAndValue>();
			ordlist.add(new KeyAndValue(Evaluation_ip_record.ID, "desc"));
			PagerList<Evaluation_ip_record> pagerlist = svcb.pagerListEvaluation_ip_record(pagenumber, pagesize,
					keyword, sqlin, params, ordlist);
			if (pagerlist.getPager().getRecordsSize() == 0 && pagerlist.getPager().getPages() != 0
					&& pagerlist.getPager().getCurrent() > pagerlist.getPager().getPages()) {
				String url = Common.getBasePath() + pagename + "?" + qs + "pn=" + pagerlist.getPager().getPages();
				mv.addObject("jumpto", url);
				// System.out.println("Test.Evaluation_ip_recordGET()url=" + url);
				mv.setViewName("jumperatonce");
			} else {
				// Pager<Evaluation_ip_record> pager = new Pager<Evaluation_ip_record>(page);
				// System.out.println("Test.Evaluation_ip_recordGET()pager=" +
				// pager.toString());
				mv.addObject("qs", qs);
				mv.addObject("pager", pagerlist.getPager());
				mv.addObject("list", pagerlist.getList());
				mv.setViewName(pagename);
			}
		}

		return mv;

	}

	// TODO: POST-evaluation_ip_record
	@RequestMapping(value = { "/evaluation_ip_record", "/evaluation_ip_record/",
			"/evaluation_ip_record/index.html" }, method = RequestMethod.POST)
	public ModelAndView evaluation_ip_recordPOST(ModelAndView mv, HttpServletRequest request, HttpSession session)
			throws Exception {

		System.out.println(this.getClass().getName() + "POST");
		String pagename = "admin/evaluation_ip_record";
		UserShiro userShiro = (UserShiro) SecurityUtils.getSubject().getPrincipal();
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		String operate = request.getParameter("operate");
		// --------编辑修改共有的部分---------
		Integer student_id = 0;
		if (!StringUtils.isBlank(request.getParameter("student_id"))) {
			student_id = Integer.parseInt(request.getParameter("student_id"));
		}
		String sno = "";
		if (!StringUtils.isBlank(request.getParameter("sno"))) {
			sno = request.getParameter("sno");
		}
		sno = Util.restrictLength(sno, 45);
		Integer evaluation_id = 0;
		if (!StringUtils.isBlank(request.getParameter("evaluation_id"))) {
			evaluation_id = Integer.parseInt(request.getParameter("evaluation_id"));
		}
		String ip = "";
		if (!StringUtils.isBlank(request.getParameter("ip"))) {
			ip = request.getParameter("ip");
		}
		ip = Util.restrictLength(ip, 45);
		Integer type = 0;
		if (!StringUtils.isBlank(request.getParameter("type"))) {
			type = Integer.parseInt(request.getParameter("type"));
		}
		// --------编辑修改共有的部分-结束---------
		// Integer create_userid = userShiro.getId();
		// 来源页面
		String referer = request.getParameter("referer");
		switch (operate) {
		case "addform": {

			// String password_digest = DigestUtils.md5Hex(password);
			// Integer sortid = (int)
			// Math.round(svcb.maxEvaluation_ip_record(Evaluation_ip_record.SORTID)) + 1;
			Evaluation_ip_record it = new Evaluation_ip_record(student_id, sno, evaluation_id, ip, type);

			// ----------保存前检查逻辑问题---------------
			// 如：用户名必须唯一，手机号必须唯一
			Map<String, Object> params = new HashMap<String, Object>();
			// params.put(Evaluation_ip_record.ID, id);
			List<Evaluation_ip_record> list = svcb.listEvaluation_ip_recordByMap(params);
			if (StringUtils.isBlank("") || StringUtils.isBlank("")) {

				mv.addObject("message", "你输入的信息没有通过星际外交部的严格审核，请重新输入！");
				mv.addObject("jumpto", pagename);
				mv.setViewName("jumperback");
				return mv;
			} else if (list.size() > 0) {

				// 输入内容中，有些内容要求值唯一！
				mv.addObject("message", "你输入的信息已经被外星人抢先注册！");
				mv.addObject("jumpto", pagename);
				mv.setViewName("jumperback");
				return mv;
			} else {

				svcb.saveEvaluation_ip_record(it);
			}
			// ----------保存前检查逻辑问题结束------------

			mv.addObject("message", "信息已经保存！");
		}
			break;
		case "editform": {
			Integer id = 0;
			if (!StringUtils.isBlank(request.getParameter("id"))) {
				id = Integer.parseInt(request.getParameter("id"));
			}
			// update_gmt = sdf.parse(request.getParameter("update_gmt_date")).getTime();
			// String password_digest = DigestUtils.md5Hex(password);

			// ----------保存前检查逻辑上是否有冲突---------------
			// 如：用户名必须唯一，手机号必须唯一
			Map<String, Object> params = new HashMap<String, Object>();
			params.put(Evaluation_ip_record.ID, id);
			List<Evaluation_ip_record> list = svcb.listEvaluation_ip_recordByMap(params);
			if (list.size() > 1 || (list.size() == 1 && list.get(0).getId() != id)) {

				mv.addObject("message", "你输入的手机号码已经被外星人抢先注册！");
				mv.addObject("jumpto", pagename);
				mv.setViewName("jumperback");
				return mv;
			} else {
				svcb.updateEvaluation_ip_recordById(student_id, sno, evaluation_id, ip, type, id);

			}
			// ----------保存前检查逻辑问题结束------------

			mv.addObject("message", "信息已经修改！");

		}
			break;

		default:
			System.out.println(this.getClass().getName() + "没有对应的operate=" + operate);
			break;
		}

		mv.addObject("jumpto", referer);
		mv.setViewName("jumper");

		return mv;
	}

	// TODO: GET-evaluation_point
	@RequestMapping(value = { "/evaluation_point", "/evaluation_point/",
			"/evaluation_point/index.html" }, method = RequestMethod.GET)
	public ModelAndView evaluation_pointGET(ModelAndView mv, @RequestParam(value = "kw", required = false) String kw,
			@RequestParam(value = "clrkw", required = false) String clrkw,
			@RequestParam(value = "operate", required = false) String operate,
			@RequestParam(value = "pn", required = false) Integer pn,
			@RequestParam(value = "ps", required = false) Integer ps,
			@RequestParam(value = "id", required = false) Integer id, HttpServletRequest request, HttpSession session) {
		logger.info(this.getClass().getName());
		System.out.println(this.getClass().getName() + ",operate=" + operate + ",id=" + id + ",pn=" + pn + ",ps=" + ps
				+ ",kw=" + kw + ",clrkw=" + clrkw);
		mv.addObject("navitem", "Evaluation_point");// 菜单项显示当前项
		String pagename = "test/evaluation_point";
		// 新增和编辑，列表页面筛选也需要使用，页面部分都有一些预先读取的内容
		if (StringUtils.isBlank(operate) || operate.equals("add") || operate.equals("edit")) {
			// 新建、编辑、列表的条件筛选
			// 用于制作彩色的标签
			mv.addObject("tagpostfixlist", Common.tagPostfix);
			mv.addObject("subjectlist", svcb.listSubjectOrderByAsc(Subject.ID));
			mv.addObject("subjectmap", svcb.mapSubject());
		}
		// 新增和编辑，列表页面筛选也需要使用，页面部分都有一些预先读取的内容
		if (!StringUtils.isBlank(operate)) {
			// 操作不为空，增删改
			mv.addObject("operate", operate);
			switch (operate) {
			case "add": {
				mv.addObject("pagetitle", "管理考核点");
				mv.addObject("subtitle", "新增考核点");
				mv.addObject("formtitle", "新增考核点");
				mv.addObject("pagename", pagename);
				// 默认作者是当前用户
				UserShiro userShiro = (UserShiro) SecurityUtils.getSubject().getPrincipal();
				mv.addObject("author", userShiro.getLogin_name());
				// 默认置顶3天
				Calendar calendar = Calendar.getInstance();
				calendar.add(Calendar.DATE, 3);
				SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
				String toptill_date = sdf.format(new Date(calendar.getTimeInMillis()));
				mv.addObject("toptill_date", toptill_date);
				// 默认头像
				mv.addObject("wechat_headimgurl", Common.userheadimgurl);
				mv.setViewName(pagename);
			}
				break;
			case "edit": {

				mv.addObject("pagetitle", "管理考核点");
				mv.addObject("subtitle", "修改考核点");
				mv.addObject("formtitle", "修改考核点");
				mv.addObject("pagename", pagename);
				mv.addObject("referer", Common.getRefererUrl());

				// 读取当前已有信息
				Evaluation_point it = svcb.getEvaluation_pointById(id);
				// 修正信息：如默认头像
				mv.addObject("it", it);
				mv.setViewName(pagename);
			}
				break;
			case "delete": {

				boolean rtv = false;
				try {
					rtv = svcb.removeEvaluation_pointById(id);
				} catch (Exception e) {
					e.printStackTrace();
				}
				if (rtv) {

					mv.addObject("message", "信息已经删除！");
					mv.addObject("jumpto", Common.getRefererUrl());
					mv.setViewName("jumper");
				} else {

					mv.addObject("message", "删除操作被外星人强行终止！");
					mv.addObject("jumpto", Common.getRefererUrl());
					mv.setViewName("jumperclick");
				}
			}
				break;
			case "hideitem":
			case "showitem": {
				UserShiro userShiro = (UserShiro) SecurityUtils.getSubject().getPrincipal();
				// svcb.updateEvaluation_pointById(operate, id);
				mv.addObject("jumpto", Common.getRefererUrl());
				mv.setViewName("jumperatonce");
			}
				break;

			default: {

			}
				break;
			}
		} else {
			// 操作为空,默认为搜索,显示列表
			String qs = "";
			Integer pagenumber = Common.recordToSession(session, "pagenumber", pn + "", 1);
			Integer pagesize = Common.recordToSession(session, "pagesize", ps + "", 10);
			String keyword = Util.replaceSqlChar(kw);
			keyword = Common.recordToSession(session, "keyword_evaluation_point", keyword, "");
			// 清除搜索条件
			if (!StringUtils.isBlank(clrkw)) {
				session.removeAttribute("keyword_evaluation_point");
				keyword = null;
			}

			// 读取url中是否包含筛选条件
			Map<String, String> sqlin = new HashMap<String, String>();

			if (!StringUtils.isBlank(request.getParameter("subject_id"))) {
				sqlin.put(Evaluation_point.SUBJECT_ID + "_id", request.getParameter("subject_id"));
				mv.addObject(Evaluation_point.SUBJECT_ID + "_map",
						Util.splitToInteger(request.getParameter("subject_id"), ","));
				qs += Evaluation_point.SUBJECT_ID + "=" + request.getParameter("subject_id") + "&";
			}

			mv.addObject("pagetitle", "管理考核点");
			mv.addObject("subtitle", "分页列表");
			mv.addObject("tabletitle", "管理");
			mv.addObject("pagename", pagename);// 当前页面的url

			if (!StringUtils.isBlank(keyword)) {
				mv.addObject("kw", keyword);
				qs += "kw=" + keyword + "&";
			}
			mv.addObject("qs", qs);

			// 在列表中需要筛选的条件
			Map<String, Object> params = new HashMap<String, Object>();
			// params.put(Evaluation_point.ID, 0);
			// params.put(Evaluation_point.SUBJECT_ID, 0);// 筛选条件1
			List<KeyAndValue> ordlist = new ArrayList<KeyAndValue>();
			ordlist.add(new KeyAndValue(Evaluation_point.ID, "desc"));
			PagerList<Evaluation_point> pagerlist = svcb.pagerListEvaluation_point(pagenumber, pagesize, keyword, sqlin,
					params, ordlist);
			if (pagerlist.getPager().getRecordsSize() == 0 && pagerlist.getPager().getPages() != 0
					&& pagerlist.getPager().getCurrent() > pagerlist.getPager().getPages()) {
				String url = Common.getBasePath() + pagename + "?" + qs + "pn=" + pagerlist.getPager().getPages();
				mv.addObject("jumpto", url);
				// System.out.println("Test.Evaluation_pointGET()url=" + url);
				mv.setViewName("jumperatonce");
			} else {
				// Pager<Evaluation_point> pager = new Pager<Evaluation_point>(page);
				// System.out.println("Test.Evaluation_pointGET()pager=" + pager.toString());
				mv.addObject("qs", qs);
				mv.addObject("pager", pagerlist.getPager());
				mv.addObject("list", pagerlist.getList());
				mv.setViewName(pagename);
			}
		}

		return mv;

	}

	// TODO: POST-evaluation_point
	@RequestMapping(value = { "/evaluation_point", "/evaluation_point/",
			"/evaluation_point/index.html" }, method = RequestMethod.POST)
	public ModelAndView evaluation_pointPOST(ModelAndView mv, HttpServletRequest request, HttpSession session)
			throws Exception {

		System.out.println(this.getClass().getName() + "POST");
		String pagename = "admin/evaluation_point";
		UserShiro userShiro = (UserShiro) SecurityUtils.getSubject().getPrincipal();
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		String operate = request.getParameter("operate");
		// --------编辑修改共有的部分---------
		Integer subject_id = 0;
		if (!StringUtils.isBlank(request.getParameter("subject_id"))) {
			subject_id = Integer.parseInt(request.getParameter("subject_id"));
		}
		Boolean is_actived = StringUtils.isBlank(request.getParameter("is_actived")) ? false : true;
		Integer type = 0;
		if (!StringUtils.isBlank(request.getParameter("type"))) {
			type = Integer.parseInt(request.getParameter("type"));
		}
		Integer difficulty = 0;
		if (!StringUtils.isBlank(request.getParameter("difficulty"))) {
			difficulty = Integer.parseInt(request.getParameter("difficulty"));
		}
		String content = "";
		if (!StringUtils.isBlank(request.getParameter("content"))) {
			content = request.getParameter("content");
		}
		content = Util.restrictLength(content, 65535);
		// --------编辑修改共有的部分-结束---------
		// Integer create_userid = userShiro.getId();
		// 来源页面
		String referer = request.getParameter("referer");
		switch (operate) {
		case "addform": {

			// String password_digest = DigestUtils.md5Hex(password);
			// Integer sortid = (int)
			// Math.round(svcb.maxEvaluation_point(Evaluation_point.SORTID)) + 1;
			Evaluation_point it = new Evaluation_point(subject_id, is_actived, type, difficulty, content);

			// ----------保存前检查逻辑问题---------------
			// 如：用户名必须唯一，手机号必须唯一
			Map<String, Object> params = new HashMap<String, Object>();
			// params.put(Evaluation_point.ID, id);
			List<Evaluation_point> list = svcb.listEvaluation_pointByMap(params);
			if (StringUtils.isBlank("") || StringUtils.isBlank("")) {

				mv.addObject("message", "你输入的信息没有通过星际外交部的严格审核，请重新输入！");
				mv.addObject("jumpto", pagename);
				mv.setViewName("jumperback");
				return mv;
			} else if (list.size() > 0) {

				// 输入内容中，有些内容要求值唯一！
				mv.addObject("message", "你输入的信息已经被外星人抢先注册！");
				mv.addObject("jumpto", pagename);
				mv.setViewName("jumperback");
				return mv;
			} else {

				svcb.saveEvaluation_point(it);
			}
			// ----------保存前检查逻辑问题结束------------

			mv.addObject("message", "信息已经保存！");
		}
			break;
		case "editform": {
			Integer id = 0;
			if (!StringUtils.isBlank(request.getParameter("id"))) {
				id = Integer.parseInt(request.getParameter("id"));
			}
			// update_gmt = sdf.parse(request.getParameter("update_gmt_date")).getTime();
			// String password_digest = DigestUtils.md5Hex(password);

			// ----------保存前检查逻辑上是否有冲突---------------
			// 如：用户名必须唯一，手机号必须唯一
			Map<String, Object> params = new HashMap<String, Object>();
			params.put(Evaluation_point.ID, id);
			List<Evaluation_point> list = svcb.listEvaluation_pointByMap(params);
			if (list.size() > 1 || (list.size() == 1 && list.get(0).getId() != id)) {

				mv.addObject("message", "你输入的手机号码已经被外星人抢先注册！");
				mv.addObject("jumpto", pagename);
				mv.setViewName("jumperback");
				return mv;
			} else {
				svcb.updateEvaluation_pointById(subject_id, is_actived, type, difficulty, content, new Date().getTime(),
						id);

			}
			// ----------保存前检查逻辑问题结束------------

			mv.addObject("message", "信息已经修改！");

		}
			break;

		default:
			System.out.println(this.getClass().getName() + "没有对应的operate=" + operate);
			break;
		}

		mv.addObject("jumpto", referer);
		mv.setViewName("jumper");

		return mv;
	}

	// TODO: GET-evaluation_result
	@RequestMapping(value = { "/evaluation_result", "/evaluation_result/",
			"/evaluation_result/index.html" }, method = RequestMethod.GET)
	public ModelAndView evaluation_resultGET(ModelAndView mv, @RequestParam(value = "kw", required = false) String kw,
			@RequestParam(value = "clrkw", required = false) String clrkw,
			@RequestParam(value = "operate", required = false) String operate,
			@RequestParam(value = "pn", required = false) Integer pn,
			@RequestParam(value = "ps", required = false) Integer ps,
			@RequestParam(value = "id", required = false) Integer id, HttpServletRequest request, HttpSession session) {
		logger.info(this.getClass().getName());
		System.out.println(this.getClass().getName() + ",operate=" + operate + ",id=" + id + ",pn=" + pn + ",ps=" + ps
				+ ",kw=" + kw + ",clrkw=" + clrkw);
		mv.addObject("navitem", "Evaluation_result");// 菜单项显示当前项
		String pagename = "test/evaluation_result";
		// 新增和编辑，列表页面筛选也需要使用，页面部分都有一些预先读取的内容
		if (StringUtils.isBlank(operate) || operate.equals("add") || operate.equals("edit")) {
			// 新建、编辑、列表的条件筛选
			// 用于制作彩色的标签
			mv.addObject("tagpostfixlist", Common.tagPostfix);
			mv.addObject("studentlist", svcb.listStudentOrderByAsc(Student.ID));
			mv.addObject("studentmap", svcb.mapStudent());
			mv.addObject("evaluationlist", svcb.listEvaluationOrderByAsc(Evaluation.ID));
			mv.addObject("evaluationmap", svcb.mapEvaluation());
		}
		// 新增和编辑，列表页面筛选也需要使用，页面部分都有一些预先读取的内容
		if (!StringUtils.isBlank(operate)) {
			// 操作不为空，增删改
			mv.addObject("operate", operate);
			switch (operate) {
			case "add": {
				mv.addObject("pagetitle", "管理考核记录");
				mv.addObject("subtitle", "新增考核记录");
				mv.addObject("formtitle", "新增考核记录");
				mv.addObject("pagename", pagename);
				// 默认作者是当前用户
				UserShiro userShiro = (UserShiro) SecurityUtils.getSubject().getPrincipal();
				mv.addObject("author", userShiro.getLogin_name());
				// 默认置顶3天
				Calendar calendar = Calendar.getInstance();
				calendar.add(Calendar.DATE, 3);
				SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
				String toptill_date = sdf.format(new Date(calendar.getTimeInMillis()));
				mv.addObject("toptill_date", toptill_date);
				// 默认头像
				mv.addObject("wechat_headimgurl", Common.userheadimgurl);
				mv.setViewName(pagename);
			}
				break;
			case "edit": {

				mv.addObject("pagetitle", "管理考核记录");
				mv.addObject("subtitle", "修改考核记录");
				mv.addObject("formtitle", "修改考核记录");
				mv.addObject("pagename", pagename);
				mv.addObject("referer", Common.getRefererUrl());

				// 读取当前已有信息
				Evaluation_result it = svcb.getEvaluation_resultById(id);
				// 修正信息：如默认头像
				mv.addObject("it", it);
				mv.setViewName(pagename);
			}
				break;
			case "delete": {

				boolean rtv = false;
				try {
					rtv = svcb.removeEvaluation_resultById(id);
				} catch (Exception e) {
					e.printStackTrace();
				}
				if (rtv) {

					mv.addObject("message", "信息已经删除！");
					mv.addObject("jumpto", Common.getRefererUrl());
					mv.setViewName("jumper");
				} else {

					mv.addObject("message", "删除操作被外星人强行终止！");
					mv.addObject("jumpto", Common.getRefererUrl());
					mv.setViewName("jumperclick");
				}
			}
				break;
			case "hideitem":
			case "showitem": {
				UserShiro userShiro = (UserShiro) SecurityUtils.getSubject().getPrincipal();
				// svcb.updateEvaluation_resultById(operate, id);
				mv.addObject("jumpto", Common.getRefererUrl());
				mv.setViewName("jumperatonce");
			}
				break;

			default: {

			}
				break;
			}
		} else {
			// 操作为空,默认为搜索,显示列表
			String qs = "";
			Integer pagenumber = Common.recordToSession(session, "pagenumber", pn + "", 1);
			Integer pagesize = Common.recordToSession(session, "pagesize", ps + "", 10);
			String keyword = Util.replaceSqlChar(kw);
			keyword = Common.recordToSession(session, "keyword_evaluation_result", keyword, "");
			// 清除搜索条件
			if (!StringUtils.isBlank(clrkw)) {
				session.removeAttribute("keyword_evaluation_result");
				keyword = null;
			}

			// 读取url中是否包含筛选条件
			Map<String, String> sqlin = new HashMap<String, String>();

			if (!StringUtils.isBlank(request.getParameter("student_id"))) {
				sqlin.put(Evaluation_result.STUDENT_ID + "_id", request.getParameter("student_id"));
				mv.addObject(Evaluation_result.STUDENT_ID + "_map",
						Util.splitToInteger(request.getParameter("student_id"), ","));
				qs += Evaluation_result.STUDENT_ID + "=" + request.getParameter("student_id") + "&";
			}

			if (!StringUtils.isBlank(request.getParameter("evaluation_id"))) {
				sqlin.put(Evaluation_result.EVALUATION_ID + "_id", request.getParameter("evaluation_id"));
				mv.addObject(Evaluation_result.EVALUATION_ID + "_map",
						Util.splitToInteger(request.getParameter("evaluation_id"), ","));
				qs += Evaluation_result.EVALUATION_ID + "=" + request.getParameter("evaluation_id") + "&";
			}

			mv.addObject("pagetitle", "管理考核记录");
			mv.addObject("subtitle", "分页列表");
			mv.addObject("tabletitle", "管理");
			mv.addObject("pagename", pagename);// 当前页面的url

			if (!StringUtils.isBlank(keyword)) {
				mv.addObject("kw", keyword);
				qs += "kw=" + keyword + "&";
			}
			mv.addObject("qs", qs);

			// 在列表中需要筛选的条件
			Map<String, Object> params = new HashMap<String, Object>();
			// params.put(Evaluation_result.ID, 0);
			// params.put(Evaluation_result.STUDENT_ID, 0);// 筛选条件1
			List<KeyAndValue> ordlist = new ArrayList<KeyAndValue>();
			ordlist.add(new KeyAndValue(Evaluation_result.ID, "desc"));
			PagerList<Evaluation_result> pagerlist = svcb.pagerListEvaluation_result(pagenumber, pagesize, keyword,
					sqlin, params, ordlist);
			if (pagerlist.getPager().getRecordsSize() == 0 && pagerlist.getPager().getPages() != 0
					&& pagerlist.getPager().getCurrent() > pagerlist.getPager().getPages()) {
				String url = Common.getBasePath() + pagename + "?" + qs + "pn=" + pagerlist.getPager().getPages();
				mv.addObject("jumpto", url);
				// System.out.println("Test.Evaluation_resultGET()url=" + url);
				mv.setViewName("jumperatonce");
			} else {
				// Pager<Evaluation_result> pager = new Pager<Evaluation_result>(page);
				// System.out.println("Test.Evaluation_resultGET()pager=" + pager.toString());
				mv.addObject("qs", qs);
				mv.addObject("pager", pagerlist.getPager());
				mv.addObject("list", pagerlist.getList());
				mv.setViewName(pagename);
			}
		}

		return mv;

	}

	// TODO: POST-evaluation_result
	@RequestMapping(value = { "/evaluation_result", "/evaluation_result/",
			"/evaluation_result/index.html" }, method = RequestMethod.POST)
	public ModelAndView evaluation_resultPOST(ModelAndView mv, HttpServletRequest request, HttpSession session)
			throws Exception {

		System.out.println(this.getClass().getName() + "POST");
		String pagename = "admin/evaluation_result";
		UserShiro userShiro = (UserShiro) SecurityUtils.getSubject().getPrincipal();
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		String operate = request.getParameter("operate");
		// --------编辑修改共有的部分---------
		Integer student_id = 0;
		if (!StringUtils.isBlank(request.getParameter("student_id"))) {
			student_id = Integer.parseInt(request.getParameter("student_id"));
		}
		Integer evaluation_id = 0;
		if (!StringUtils.isBlank(request.getParameter("evaluation_id"))) {
			evaluation_id = Integer.parseInt(request.getParameter("evaluation_id"));
		}
		String sno = "";
		if (!StringUtils.isBlank(request.getParameter("sno"))) {
			sno = request.getParameter("sno");
		}
		sno = Util.restrictLength(sno, 10);
		String comment = "";
		if (!StringUtils.isBlank(request.getParameter("comment"))) {
			comment = request.getParameter("comment");
		}
		comment = Util.restrictLength(comment, 100);
		String evaluation_record = "";
		if (!StringUtils.isBlank(request.getParameter("evaluation_record"))) {
			evaluation_record = request.getParameter("evaluation_record");
		}
		evaluation_record = Util.restrictLength(evaluation_record, 65535);
		Integer score = 0;
		if (!StringUtils.isBlank(request.getParameter("score"))) {
			score = Integer.parseInt(request.getParameter("score"));
		}
		Long submit_gmt = sdf.parse(request.getParameter("submit_gmt_date")).getTime();
		submit_gmt = submit_gmt > 0 ? submit_gmt : 0;
		Boolean is_reviewed = StringUtils.isBlank(request.getParameter("is_reviewed")) ? false : true;
		// --------编辑修改共有的部分-结束---------
		// Integer create_userid = userShiro.getId();
		// 来源页面
		String referer = request.getParameter("referer");
		switch (operate) {
		case "addform": {

			// String password_digest = DigestUtils.md5Hex(password);
			// Integer sortid = (int)
			// Math.round(svcb.maxEvaluation_result(Evaluation_result.SORTID)) + 1;
			Evaluation_result it = new Evaluation_result(student_id, evaluation_id, sno, comment, evaluation_record,
					score, submit_gmt, is_reviewed);

			// ----------保存前检查逻辑问题---------------
			// 如：用户名必须唯一，手机号必须唯一
			Map<String, Object> params = new HashMap<String, Object>();
			// params.put(Evaluation_result.ID, id);
			List<Evaluation_result> list = svcb.listEvaluation_resultByMap(params);
			if (StringUtils.isBlank("") || StringUtils.isBlank("")) {

				mv.addObject("message", "你输入的信息没有通过星际外交部的严格审核，请重新输入！");
				mv.addObject("jumpto", pagename);
				mv.setViewName("jumperback");
				return mv;
			} else if (list.size() > 0) {

				// 输入内容中，有些内容要求值唯一！
				mv.addObject("message", "你输入的信息已经被外星人抢先注册！");
				mv.addObject("jumpto", pagename);
				mv.setViewName("jumperback");
				return mv;
			} else {

				svcb.saveEvaluation_result(it);
			}
			// ----------保存前检查逻辑问题结束------------

			mv.addObject("message", "信息已经保存！");
		}
			break;
		case "editform": {
			Integer id = 0;
			if (!StringUtils.isBlank(request.getParameter("id"))) {
				id = Integer.parseInt(request.getParameter("id"));
			}
			// update_gmt = sdf.parse(request.getParameter("update_gmt_date")).getTime();
			// String password_digest = DigestUtils.md5Hex(password);

			// ----------保存前检查逻辑上是否有冲突---------------
			// 如：用户名必须唯一，手机号必须唯一
			Map<String, Object> params = new HashMap<String, Object>();
			params.put(Evaluation_result.ID, id);
			List<Evaluation_result> list = svcb.listEvaluation_resultByMap(params);
			if (list.size() > 1 || (list.size() == 1 && list.get(0).getId() != id)) {

				mv.addObject("message", "你输入的手机号码已经被外星人抢先注册！");
				mv.addObject("jumpto", pagename);
				mv.setViewName("jumperback");
				return mv;
			} else {
				svcb.updateEvaluation_resultById(student_id, evaluation_id, sno, comment, evaluation_record, score,
						submit_gmt, is_reviewed, new Date().getTime(), id);

			}
			// ----------保存前检查逻辑问题结束------------

			mv.addObject("message", "信息已经修改！");

		}
			break;

		default:
			System.out.println(this.getClass().getName() + "没有对应的operate=" + operate);
			break;
		}

		mv.addObject("jumpto", referer);
		mv.setViewName("jumper");

		return mv;
	}

	// TODO: GET-evaluation_result_record
	@RequestMapping(value = { "/evaluation_result_record", "/evaluation_result_record/",
			"/evaluation_result_record/index.html" }, method = RequestMethod.GET)
	public ModelAndView evaluation_result_recordGET(ModelAndView mv,
			@RequestParam(value = "kw", required = false) String kw,
			@RequestParam(value = "clrkw", required = false) String clrkw,
			@RequestParam(value = "operate", required = false) String operate,
			@RequestParam(value = "pn", required = false) Integer pn,
			@RequestParam(value = "ps", required = false) Integer ps,
			@RequestParam(value = "id", required = false) Integer id, HttpServletRequest request, HttpSession session) {
		logger.info(this.getClass().getName());
		System.out.println(this.getClass().getName() + ",operate=" + operate + ",id=" + id + ",pn=" + pn + ",ps=" + ps
				+ ",kw=" + kw + ",clrkw=" + clrkw);
		mv.addObject("navitem", "Evaluation_result_record");// 菜单项显示当前项
		String pagename = "test/evaluation_result_record";
		// 新增和编辑，列表页面筛选也需要使用，页面部分都有一些预先读取的内容
		if (StringUtils.isBlank(operate) || operate.equals("add") || operate.equals("edit")) {
			// 新建、编辑、列表的条件筛选
			// 用于制作彩色的标签
			mv.addObject("tagpostfixlist", Common.tagPostfix);
			mv.addObject("studentlist", svcb.listStudentOrderByAsc(Student.ID));
			mv.addObject("studentmap", svcb.mapStudent());
			mv.addObject("evaluationlist", svcb.listEvaluationOrderByAsc(Evaluation.ID));
			mv.addObject("evaluationmap", svcb.mapEvaluation());
			mv.addObject("evaluation_pointlist", svcb.listEvaluation_pointOrderByAsc(Evaluation_point.ID));
			mv.addObject("evaluation_pointmap", svcb.mapEvaluation_point());
			mv.addObject("subjectlist", svcb.listSubjectOrderByAsc(Subject.ID));
			mv.addObject("subjectmap", svcb.mapSubject());
			mv.addObject("student_grouplist", svcb.listStudent_groupOrderByAsc(Student_group.ID));
			mv.addObject("student_groupmap", svcb.mapStudent_group());
			mv.addObject("curriculumlist", svcb.listCurriculumOrderByAsc(Curriculum.ID));
			mv.addObject("curriculummap", svcb.mapCurriculum());
		}
		// 新增和编辑，列表页面筛选也需要使用，页面部分都有一些预先读取的内容
		if (!StringUtils.isBlank(operate)) {
			// 操作不为空，增删改
			mv.addObject("operate", operate);
			switch (operate) {
			case "add": {
				mv.addObject("pagetitle", "管理考核，学生提交的题记录");
				mv.addObject("subtitle", "新增考核，学生提交的题记录");
				mv.addObject("formtitle", "新增考核，学生提交的题记录");
				mv.addObject("pagename", pagename);
				// 默认作者是当前用户
				UserShiro userShiro = (UserShiro) SecurityUtils.getSubject().getPrincipal();
				mv.addObject("author", userShiro.getLogin_name());
				// 默认置顶3天
				Calendar calendar = Calendar.getInstance();
				calendar.add(Calendar.DATE, 3);
				SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
				String toptill_date = sdf.format(new Date(calendar.getTimeInMillis()));
				mv.addObject("toptill_date", toptill_date);
				// 默认头像
				mv.addObject("wechat_headimgurl", Common.userheadimgurl);
				mv.setViewName(pagename);
			}
				break;
			case "edit": {

				mv.addObject("pagetitle", "管理考核，学生提交的题记录");
				mv.addObject("subtitle", "修改考核，学生提交的题记录");
				mv.addObject("formtitle", "修改考核，学生提交的题记录");
				mv.addObject("pagename", pagename);
				mv.addObject("referer", Common.getRefererUrl());

				// 读取当前已有信息
				Evaluation_result_record it = svcb.getEvaluation_result_recordById(id);
				// 修正信息：如默认头像
				mv.addObject("it", it);
				mv.setViewName(pagename);
			}
				break;
			case "delete": {

				boolean rtv = false;
				try {
					rtv = svcb.removeEvaluation_result_recordById(id);
				} catch (Exception e) {
					e.printStackTrace();
				}
				if (rtv) {

					mv.addObject("message", "信息已经删除！");
					mv.addObject("jumpto", Common.getRefererUrl());
					mv.setViewName("jumper");
				} else {

					mv.addObject("message", "删除操作被外星人强行终止！");
					mv.addObject("jumpto", Common.getRefererUrl());
					mv.setViewName("jumperclick");
				}
			}
				break;
			case "hideitem":
			case "showitem": {
				UserShiro userShiro = (UserShiro) SecurityUtils.getSubject().getPrincipal();
				// svcb.updateEvaluation_result_recordById(operate, id);
				mv.addObject("jumpto", Common.getRefererUrl());
				mv.setViewName("jumperatonce");
			}
				break;
			case "moveup":
			case "movedown": {
				if (!svcb.moveEvaluation_result_record(operate, "movedown", id, Evaluation_result_record.SORTID)) {

					mv.addObject("message", "移动操作被外星人强行终止！");
					mv.addObject("jumpto", Common.getRefererUrl());
					mv.setViewName("jumperclick");
				} else {

					mv.addObject("jumpto", Common.getRefererUrl());
					mv.setViewName("jumperatonce");

				}
			}
				break;

			default: {

			}
				break;
			}
		} else {
			// 操作为空,默认为搜索,显示列表
			String qs = "";
			Integer pagenumber = Common.recordToSession(session, "pagenumber", pn + "", 1);
			Integer pagesize = Common.recordToSession(session, "pagesize", ps + "", 10);
			String keyword = Util.replaceSqlChar(kw);
			keyword = Common.recordToSession(session, "keyword_evaluation_result_record", keyword, "");
			// 清除搜索条件
			if (!StringUtils.isBlank(clrkw)) {
				session.removeAttribute("keyword_evaluation_result_record");
				keyword = null;
			}

			// 读取url中是否包含筛选条件
			Map<String, String> sqlin = new HashMap<String, String>();

			if (!StringUtils.isBlank(request.getParameter("student_id"))) {
				sqlin.put(Evaluation_result_record.STUDENT_ID + "_id", request.getParameter("student_id"));
				mv.addObject(Evaluation_result_record.STUDENT_ID + "_map",
						Util.splitToInteger(request.getParameter("student_id"), ","));
				qs += Evaluation_result_record.STUDENT_ID + "=" + request.getParameter("student_id") + "&";
			}

			if (!StringUtils.isBlank(request.getParameter("evaluation_id"))) {
				sqlin.put(Evaluation_result_record.EVALUATION_ID + "_id", request.getParameter("evaluation_id"));
				mv.addObject(Evaluation_result_record.EVALUATION_ID + "_map",
						Util.splitToInteger(request.getParameter("evaluation_id"), ","));
				qs += Evaluation_result_record.EVALUATION_ID + "=" + request.getParameter("evaluation_id") + "&";
			}

			if (!StringUtils.isBlank(request.getParameter("evaluation_point_id"))) {
				sqlin.put(Evaluation_result_record.EVALUATION_POINT_ID + "_id",
						request.getParameter("evaluation_point_id"));
				mv.addObject(Evaluation_result_record.EVALUATION_POINT_ID + "_map",
						Util.splitToInteger(request.getParameter("evaluation_point_id"), ","));
				qs += Evaluation_result_record.EVALUATION_POINT_ID + "=" + request.getParameter("evaluation_point_id")
						+ "&";
			}

			if (!StringUtils.isBlank(request.getParameter("subject_id"))) {
				sqlin.put(Evaluation_result_record.SUBJECT_ID + "_id", request.getParameter("subject_id"));
				mv.addObject(Evaluation_result_record.SUBJECT_ID + "_map",
						Util.splitToInteger(request.getParameter("subject_id"), ","));
				qs += Evaluation_result_record.SUBJECT_ID + "=" + request.getParameter("subject_id") + "&";
			}

			if (!StringUtils.isBlank(request.getParameter("student_group_id"))) {
				sqlin.put(Evaluation_result_record.STUDENT_GROUP_ID + "_id", request.getParameter("student_group_id"));
				mv.addObject(Evaluation_result_record.STUDENT_GROUP_ID + "_map",
						Util.splitToInteger(request.getParameter("student_group_id"), ","));
				qs += Evaluation_result_record.STUDENT_GROUP_ID + "=" + request.getParameter("student_group_id") + "&";
			}

			if (!StringUtils.isBlank(request.getParameter("curriculum_id"))) {
				sqlin.put(Evaluation_result_record.CURRICULUM_ID + "_id", request.getParameter("curriculum_id"));
				mv.addObject(Evaluation_result_record.CURRICULUM_ID + "_map",
						Util.splitToInteger(request.getParameter("curriculum_id"), ","));
				qs += Evaluation_result_record.CURRICULUM_ID + "=" + request.getParameter("curriculum_id") + "&";
			}

			mv.addObject("pagetitle", "管理考核，学生提交的题记录");
			mv.addObject("subtitle", "分页列表");
			mv.addObject("tabletitle", "管理");
			mv.addObject("pagename", pagename);// 当前页面的url

			if (!StringUtils.isBlank(keyword)) {
				mv.addObject("kw", keyword);
				qs += "kw=" + keyword + "&";
			}
			mv.addObject("qs", qs);

			// 在列表中需要筛选的条件
			Map<String, Object> params = new HashMap<String, Object>();
			// params.put(Evaluation_result_record.ID, 0);
			// params.put(Evaluation_result_record.STUDENT_ID, 0);// 筛选条件1
			List<KeyAndValue> ordlist = new ArrayList<KeyAndValue>();
			ordlist.add(new KeyAndValue(Evaluation_result_record.ID, "desc"));
			PagerList<Evaluation_result_record> pagerlist = svcb.pagerListEvaluation_result_record(pagenumber, pagesize,
					keyword, sqlin, params, ordlist);
			if (pagerlist.getPager().getRecordsSize() == 0 && pagerlist.getPager().getPages() != 0
					&& pagerlist.getPager().getCurrent() > pagerlist.getPager().getPages()) {
				String url = Common.getBasePath() + pagename + "?" + qs + "pn=" + pagerlist.getPager().getPages();
				mv.addObject("jumpto", url);
				// System.out.println("Test.Evaluation_result_recordGET()url=" + url);
				mv.setViewName("jumperatonce");
			} else {
				// Pager<Evaluation_result_record> pager = new
				// Pager<Evaluation_result_record>(page);
				// System.out.println("Test.Evaluation_result_recordGET()pager=" +
				// pager.toString());
				mv.addObject("qs", qs);
				mv.addObject("pager", pagerlist.getPager());
				mv.addObject("list", pagerlist.getList());
				mv.setViewName(pagename);
			}
		}

		return mv;

	}

	// TODO: POST-evaluation_result_record
	@RequestMapping(value = { "/evaluation_result_record", "/evaluation_result_record/",
			"/evaluation_result_record/index.html" }, method = RequestMethod.POST)
	public ModelAndView evaluation_result_recordPOST(ModelAndView mv, HttpServletRequest request, HttpSession session)
			throws Exception {

		System.out.println(this.getClass().getName() + "POST");
		String pagename = "admin/evaluation_result_record";
		UserShiro userShiro = (UserShiro) SecurityUtils.getSubject().getPrincipal();
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		String operate = request.getParameter("operate");
		// --------编辑修改共有的部分---------
		Integer student_id = 0;
		if (!StringUtils.isBlank(request.getParameter("student_id"))) {
			student_id = Integer.parseInt(request.getParameter("student_id"));
		}
		Integer evaluation_id = 0;
		if (!StringUtils.isBlank(request.getParameter("evaluation_id"))) {
			evaluation_id = Integer.parseInt(request.getParameter("evaluation_id"));
		}
		String sno = "";
		if (!StringUtils.isBlank(request.getParameter("sno"))) {
			sno = request.getParameter("sno");
		}
		sno = Util.restrictLength(sno, 10);
		Integer evaluation_point_id = 0;
		if (!StringUtils.isBlank(request.getParameter("evaluation_point_id"))) {
			evaluation_point_id = Integer.parseInt(request.getParameter("evaluation_point_id"));
		}
		String submit_record = "";
		if (!StringUtils.isBlank(request.getParameter("submit_record"))) {
			submit_record = request.getParameter("submit_record");
		}
		submit_record = Util.restrictLength(submit_record, 65535);
		Integer score = 0;
		if (!StringUtils.isBlank(request.getParameter("score"))) {
			score = Integer.parseInt(request.getParameter("score"));
		}
		Integer type = 0;
		if (!StringUtils.isBlank(request.getParameter("type"))) {
			type = Integer.parseInt(request.getParameter("type"));
		}
		Integer subject_id = 0;
		if (!StringUtils.isBlank(request.getParameter("subject_id"))) {
			subject_id = Integer.parseInt(request.getParameter("subject_id"));
		}
		Integer student_group_id = 0;
		if (!StringUtils.isBlank(request.getParameter("student_group_id"))) {
			student_group_id = Integer.parseInt(request.getParameter("student_group_id"));
		}
		Integer curriculum_id = 0;
		if (!StringUtils.isBlank(request.getParameter("curriculum_id"))) {
			curriculum_id = Integer.parseInt(request.getParameter("curriculum_id"));
		}
		Integer difficulty = 0;
		if (!StringUtils.isBlank(request.getParameter("difficulty"))) {
			difficulty = Integer.parseInt(request.getParameter("difficulty"));
		}
		Integer sortid = 0;
		if (!StringUtils.isBlank(request.getParameter("sortid"))) {
			sortid = Integer.parseInt(request.getParameter("sortid"));
		}
		Boolean is_submited = StringUtils.isBlank(request.getParameter("is_submited")) ? false : true;
		Integer score_wish = 0;
		if (!StringUtils.isBlank(request.getParameter("score_wish"))) {
			score_wish = Integer.parseInt(request.getParameter("score_wish"));
		}
		Boolean is_reviewed = StringUtils.isBlank(request.getParameter("is_reviewed")) ? false : true;
		// --------编辑修改共有的部分-结束---------
		// Integer create_userid = userShiro.getId();
		// 来源页面
		String referer = request.getParameter("referer");
		switch (operate) {
		case "addform": {

			// String password_digest = DigestUtils.md5Hex(password);
			// Integer sortid = (int)
			// Math.round(svcb.maxEvaluation_result_record(Evaluation_result_record.SORTID))
			// + 1;
			Evaluation_result_record it = new Evaluation_result_record(student_id, evaluation_id, sno,
					evaluation_point_id, submit_record, score, type, subject_id, student_group_id, curriculum_id,
					difficulty, sortid, is_submited, score_wish, is_reviewed);

			// ----------保存前检查逻辑问题---------------
			// 如：用户名必须唯一，手机号必须唯一
			Map<String, Object> params = new HashMap<String, Object>();
			// params.put(Evaluation_result_record.ID, id);
			List<Evaluation_result_record> list = svcb.listEvaluation_result_recordByMap(params);
			if (StringUtils.isBlank("") || StringUtils.isBlank("")) {

				mv.addObject("message", "你输入的信息没有通过星际外交部的严格审核，请重新输入！");
				mv.addObject("jumpto", pagename);
				mv.setViewName("jumperback");
				return mv;
			} else if (list.size() > 0) {

				// 输入内容中，有些内容要求值唯一！
				mv.addObject("message", "你输入的信息已经被外星人抢先注册！");
				mv.addObject("jumpto", pagename);
				mv.setViewName("jumperback");
				return mv;
			} else {

				svcb.saveEvaluation_result_record(it);
			}
			// ----------保存前检查逻辑问题结束------------

			mv.addObject("message", "信息已经保存！");
		}
			break;
		case "editform": {
			Integer id = 0;
			if (!StringUtils.isBlank(request.getParameter("id"))) {
				id = Integer.parseInt(request.getParameter("id"));
			}
			// update_gmt = sdf.parse(request.getParameter("update_gmt_date")).getTime();
			// String password_digest = DigestUtils.md5Hex(password);

			// ----------保存前检查逻辑上是否有冲突---------------
			// 如：用户名必须唯一，手机号必须唯一
			Map<String, Object> params = new HashMap<String, Object>();
			params.put(Evaluation_result_record.ID, id);
			List<Evaluation_result_record> list = svcb.listEvaluation_result_recordByMap(params);
			if (list.size() > 1 || (list.size() == 1 && list.get(0).getId() != id)) {

				mv.addObject("message", "你输入的手机号码已经被外星人抢先注册！");
				mv.addObject("jumpto", pagename);
				mv.setViewName("jumperback");
				return mv;
			} else {
				svcb.updateEvaluation_result_recordById(student_id, evaluation_id, sno, evaluation_point_id,
						submit_record, score, type, subject_id, student_group_id, curriculum_id, difficulty, sortid,
						is_submited, score_wish, is_reviewed, new Date().getTime(), id);

			}
			// ----------保存前检查逻辑问题结束------------

			mv.addObject("message", "信息已经修改！");

		}
			break;

		default:
			System.out.println(this.getClass().getName() + "没有对应的operate=" + operate);
			break;
		}

		mv.addObject("jumpto", referer);
		mv.setViewName("jumper");

		return mv;
	}

	// TODO: GET-evaluation_type
	@RequestMapping(value = { "/evaluation_type", "/evaluation_type/",
			"/evaluation_type/index.html" }, method = RequestMethod.GET)
	public ModelAndView evaluation_typeGET(ModelAndView mv, @RequestParam(value = "kw", required = false) String kw,
			@RequestParam(value = "clrkw", required = false) String clrkw,
			@RequestParam(value = "operate", required = false) String operate,
			@RequestParam(value = "pn", required = false) Integer pn,
			@RequestParam(value = "ps", required = false) Integer ps,
			@RequestParam(value = "id", required = false) Integer id, HttpServletRequest request, HttpSession session) {
		logger.info(this.getClass().getName());
		System.out.println(this.getClass().getName() + ",operate=" + operate + ",id=" + id + ",pn=" + pn + ",ps=" + ps
				+ ",kw=" + kw + ",clrkw=" + clrkw);
		mv.addObject("navitem", "Evaluation_type");// 菜单项显示当前项
		String pagename = "test/evaluation_type";
		// 新增和编辑，列表页面筛选也需要使用，页面部分都有一些预先读取的内容
		if (StringUtils.isBlank(operate) || operate.equals("add") || operate.equals("edit")) {
			// 新建、编辑、列表的条件筛选
			// 用于制作彩色的标签
			mv.addObject("tagpostfixlist", Common.tagPostfix);
		}
		// 新增和编辑，列表页面筛选也需要使用，页面部分都有一些预先读取的内容
		if (!StringUtils.isBlank(operate)) {
			// 操作不为空，增删改
			mv.addObject("operate", operate);
			switch (operate) {
			case "add": {
				mv.addObject("pagetitle", "管理");
				mv.addObject("subtitle", "新增");
				mv.addObject("formtitle", "新增");
				mv.addObject("pagename", pagename);
				// 默认作者是当前用户
				UserShiro userShiro = (UserShiro) SecurityUtils.getSubject().getPrincipal();
				mv.addObject("author", userShiro.getLogin_name());
				// 默认置顶3天
				Calendar calendar = Calendar.getInstance();
				calendar.add(Calendar.DATE, 3);
				SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
				String toptill_date = sdf.format(new Date(calendar.getTimeInMillis()));
				mv.addObject("toptill_date", toptill_date);
				// 默认头像
				mv.addObject("wechat_headimgurl", Common.userheadimgurl);
				mv.setViewName(pagename);
			}
				break;
			case "edit": {

				mv.addObject("pagetitle", "管理");
				mv.addObject("subtitle", "修改");
				mv.addObject("formtitle", "修改");
				mv.addObject("pagename", pagename);
				mv.addObject("referer", Common.getRefererUrl());

				// 读取当前已有信息
				Evaluation_type it = svcb.getEvaluation_typeById(id);
				// 修正信息：如默认头像
				mv.addObject("it", it);
				mv.setViewName(pagename);
			}
				break;
			case "delete": {

				boolean rtv = false;
				try {
					rtv = svcb.removeEvaluation_typeById(id);
				} catch (Exception e) {
					e.printStackTrace();
				}
				if (rtv) {

					mv.addObject("message", "信息已经删除！");
					mv.addObject("jumpto", Common.getRefererUrl());
					mv.setViewName("jumper");
				} else {

					mv.addObject("message", "删除操作被外星人强行终止！");
					mv.addObject("jumpto", Common.getRefererUrl());
					mv.setViewName("jumperclick");
				}
			}
				break;
			case "hideitem":
			case "showitem": {
				UserShiro userShiro = (UserShiro) SecurityUtils.getSubject().getPrincipal();
				// svcb.updateEvaluation_typeById(operate, id);
				mv.addObject("jumpto", Common.getRefererUrl());
				mv.setViewName("jumperatonce");
			}
				break;

			default: {

			}
				break;
			}
		} else {
			// 操作为空,默认为搜索,显示列表
			String qs = "";
			Integer pagenumber = Common.recordToSession(session, "pagenumber", pn + "", 1);
			Integer pagesize = Common.recordToSession(session, "pagesize", ps + "", 10);
			String keyword = Util.replaceSqlChar(kw);
			keyword = Common.recordToSession(session, "keyword_evaluation_type", keyword, "");
			// 清除搜索条件
			if (!StringUtils.isBlank(clrkw)) {
				session.removeAttribute("keyword_evaluation_type");
				keyword = null;
			}

			// 读取url中是否包含筛选条件
			Map<String, String> sqlin = new HashMap<String, String>();

			mv.addObject("pagetitle", "管理");
			mv.addObject("subtitle", "分页列表");
			mv.addObject("tabletitle", "管理");
			mv.addObject("pagename", pagename);// 当前页面的url

			if (!StringUtils.isBlank(keyword)) {
				mv.addObject("kw", keyword);
				qs += "kw=" + keyword + "&";
			}
			mv.addObject("qs", qs);

			// 在列表中需要筛选的条件
			Map<String, Object> params = new HashMap<String, Object>();
			// params.put(Evaluation_type.ID, 0);
			// params.put(Evaluation_type.NAME, 0);// 筛选条件1
			List<KeyAndValue> ordlist = new ArrayList<KeyAndValue>();
			ordlist.add(new KeyAndValue(Evaluation_type.ID, "desc"));
			PagerList<Evaluation_type> pagerlist = svcb.pagerListEvaluation_type(pagenumber, pagesize, keyword, sqlin,
					params, ordlist);
			if (pagerlist.getPager().getRecordsSize() == 0 && pagerlist.getPager().getPages() != 0
					&& pagerlist.getPager().getCurrent() > pagerlist.getPager().getPages()) {
				String url = Common.getBasePath() + pagename + "?" + qs + "pn=" + pagerlist.getPager().getPages();
				mv.addObject("jumpto", url);
				// System.out.println("Test.Evaluation_typeGET()url=" + url);
				mv.setViewName("jumperatonce");
			} else {
				// Pager<Evaluation_type> pager = new Pager<Evaluation_type>(page);
				// System.out.println("Test.Evaluation_typeGET()pager=" + pager.toString());
				mv.addObject("qs", qs);
				mv.addObject("pager", pagerlist.getPager());
				mv.addObject("list", pagerlist.getList());
				mv.setViewName(pagename);
			}
		}

		return mv;

	}

	// TODO: POST-evaluation_type
	@RequestMapping(value = { "/evaluation_type", "/evaluation_type/",
			"/evaluation_type/index.html" }, method = RequestMethod.POST)
	public ModelAndView evaluation_typePOST(ModelAndView mv, HttpServletRequest request, HttpSession session)
			throws Exception {

		System.out.println(this.getClass().getName() + "POST");
		String pagename = "admin/evaluation_type";
		UserShiro userShiro = (UserShiro) SecurityUtils.getSubject().getPrincipal();
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		String operate = request.getParameter("operate");
		// --------编辑修改共有的部分---------
		String name = "";
		if (!StringUtils.isBlank(request.getParameter("name"))) {
			name = request.getParameter("name");
		}
		name = Util.restrictLength(name, 45);
		// --------编辑修改共有的部分-结束---------
		// Integer create_userid = userShiro.getId();
		// 来源页面
		String referer = request.getParameter("referer");
		switch (operate) {
		case "addform": {

			// String password_digest = DigestUtils.md5Hex(password);
			// Integer sortid = (int)
			// Math.round(svcb.maxEvaluation_type(Evaluation_type.SORTID)) + 1;
			Evaluation_type it = new Evaluation_type(name);

			// ----------保存前检查逻辑问题---------------
			// 如：用户名必须唯一，手机号必须唯一
			Map<String, Object> params = new HashMap<String, Object>();
			// params.put(Evaluation_type.ID, id);
			List<Evaluation_type> list = svcb.listEvaluation_typeByMap(params);
			if (StringUtils.isBlank("") || StringUtils.isBlank("")) {

				mv.addObject("message", "你输入的信息没有通过星际外交部的严格审核，请重新输入！");
				mv.addObject("jumpto", pagename);
				mv.setViewName("jumperback");
				return mv;
			} else if (list.size() > 0) {

				// 输入内容中，有些内容要求值唯一！
				mv.addObject("message", "你输入的信息已经被外星人抢先注册！");
				mv.addObject("jumpto", pagename);
				mv.setViewName("jumperback");
				return mv;
			} else {

				svcb.saveEvaluation_type(it);
			}
			// ----------保存前检查逻辑问题结束------------

			mv.addObject("message", "信息已经保存！");
		}
			break;
		case "editform": {
			Integer id = 0;
			if (!StringUtils.isBlank(request.getParameter("id"))) {
				id = Integer.parseInt(request.getParameter("id"));
			}
			// update_gmt = sdf.parse(request.getParameter("update_gmt_date")).getTime();
			// String password_digest = DigestUtils.md5Hex(password);

			// ----------保存前检查逻辑上是否有冲突---------------
			// 如：用户名必须唯一，手机号必须唯一
			Map<String, Object> params = new HashMap<String, Object>();
			params.put(Evaluation_type.ID, id);
			List<Evaluation_type> list = svcb.listEvaluation_typeByMap(params);
			if (list.size() > 1 || (list.size() == 1 && list.get(0).getId() != id)) {

				mv.addObject("message", "你输入的手机号码已经被外星人抢先注册！");
				mv.addObject("jumpto", pagename);
				mv.setViewName("jumperback");
				return mv;
			} else {
				svcb.updateEvaluation_typeById(name, id);

			}
			// ----------保存前检查逻辑问题结束------------

			mv.addObject("message", "信息已经修改！");

		}
			break;

		default:
			System.out.println(this.getClass().getName() + "没有对应的operate=" + operate);
			break;
		}

		mv.addObject("jumpto", referer);
		mv.setViewName("jumper");

		return mv;
	}

	// TODO: GET-experiment
	@RequestMapping(value = { "/experiment", "/experiment/", "/experiment/index.html" }, method = RequestMethod.GET)
	public ModelAndView experimentGET(ModelAndView mv, @RequestParam(value = "kw", required = false) String kw,
			@RequestParam(value = "clrkw", required = false) String clrkw,
			@RequestParam(value = "operate", required = false) String operate,
			@RequestParam(value = "pn", required = false) Integer pn,
			@RequestParam(value = "ps", required = false) Integer ps,
			@RequestParam(value = "id", required = false) Integer id, HttpServletRequest request, HttpSession session) {
		logger.info(this.getClass().getName());
		System.out.println(this.getClass().getName() + ",operate=" + operate + ",id=" + id + ",pn=" + pn + ",ps=" + ps
				+ ",kw=" + kw + ",clrkw=" + clrkw);
		mv.addObject("navitem", "Experiment");// 菜单项显示当前项
		String pagename = "test/experiment";
		// 新增和编辑，列表页面筛选也需要使用，页面部分都有一些预先读取的内容
		if (StringUtils.isBlank(operate) || operate.equals("add") || operate.equals("edit")) {
			// 新建、编辑、列表的条件筛选
			// 用于制作彩色的标签
			mv.addObject("tagpostfixlist", Common.tagPostfix);
			mv.addObject("subjectlist", svcb.listSubjectOrderByAsc(Subject.ID));
			mv.addObject("subjectmap", svcb.mapSubject());
			mv.addObject("curriculumlist", svcb.listCurriculumOrderByAsc(Curriculum.ID));
			mv.addObject("curriculummap", svcb.mapCurriculum());
		}
		// 新增和编辑，列表页面筛选也需要使用，页面部分都有一些预先读取的内容
		if (!StringUtils.isBlank(operate)) {
			// 操作不为空，增删改
			mv.addObject("operate", operate);
			switch (operate) {
			case "add": {
				mv.addObject("pagetitle", "管理实验内容");
				mv.addObject("subtitle", "新增实验内容");
				mv.addObject("formtitle", "新增实验内容");
				mv.addObject("pagename", pagename);
				// 默认作者是当前用户
				UserShiro userShiro = (UserShiro) SecurityUtils.getSubject().getPrincipal();
				mv.addObject("author", userShiro.getLogin_name());
				// 默认置顶3天
				Calendar calendar = Calendar.getInstance();
				calendar.add(Calendar.DATE, 3);
				SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
				String toptill_date = sdf.format(new Date(calendar.getTimeInMillis()));
				mv.addObject("toptill_date", toptill_date);
				// 默认头像
				mv.addObject("wechat_headimgurl", Common.userheadimgurl);
				mv.setViewName(pagename);
			}
				break;
			case "edit": {

				mv.addObject("pagetitle", "管理实验内容");
				mv.addObject("subtitle", "修改实验内容");
				mv.addObject("formtitle", "修改实验内容");
				mv.addObject("pagename", pagename);
				mv.addObject("referer", Common.getRefererUrl());

				// 读取当前已有信息
				Experiment it = svcb.getExperimentById(id);
				// 修正信息：如默认头像
				mv.addObject("it", it);
				mv.setViewName(pagename);
			}
				break;
			case "delete": {

				boolean rtv = false;
				try {
					rtv = svcb.removeExperimentById(id);
				} catch (Exception e) {
					e.printStackTrace();
				}
				if (rtv) {

					mv.addObject("message", "信息已经删除！");
					mv.addObject("jumpto", Common.getRefererUrl());
					mv.setViewName("jumper");
				} else {

					mv.addObject("message", "删除操作被外星人强行终止！");
					mv.addObject("jumpto", Common.getRefererUrl());
					mv.setViewName("jumperclick");
				}
			}
				break;
			case "hideitem":
			case "showitem": {
				UserShiro userShiro = (UserShiro) SecurityUtils.getSubject().getPrincipal();
				// svcb.updateExperimentById(operate, id);
				mv.addObject("jumpto", Common.getRefererUrl());
				mv.setViewName("jumperatonce");
			}
				break;

			default: {

			}
				break;
			}
		} else {
			// 操作为空,默认为搜索,显示列表
			String qs = "";
			Integer pagenumber = Common.recordToSession(session, "pagenumber", pn + "", 1);
			Integer pagesize = Common.recordToSession(session, "pagesize", ps + "", 10);
			String keyword = Util.replaceSqlChar(kw);
			keyword = Common.recordToSession(session, "keyword_experiment", keyword, "");
			// 清除搜索条件
			if (!StringUtils.isBlank(clrkw)) {
				session.removeAttribute("keyword_experiment");
				keyword = null;
			}

			// 读取url中是否包含筛选条件
			Map<String, String> sqlin = new HashMap<String, String>();

			if (!StringUtils.isBlank(request.getParameter("subject_id"))) {
				sqlin.put(Experiment.SUBJECT_ID + "_id", request.getParameter("subject_id"));
				mv.addObject(Experiment.SUBJECT_ID + "_map",
						Util.splitToInteger(request.getParameter("subject_id"), ","));
				qs += Experiment.SUBJECT_ID + "=" + request.getParameter("subject_id") + "&";
			}

			if (!StringUtils.isBlank(request.getParameter("curriculum_id"))) {
				sqlin.put(Experiment.CURRICULUM_ID + "_id", request.getParameter("curriculum_id"));
				mv.addObject(Experiment.CURRICULUM_ID + "_map",
						Util.splitToInteger(request.getParameter("curriculum_id"), ","));
				qs += Experiment.CURRICULUM_ID + "=" + request.getParameter("curriculum_id") + "&";
			}

			mv.addObject("pagetitle", "管理实验内容");
			mv.addObject("subtitle", "分页列表");
			mv.addObject("tabletitle", "管理");
			mv.addObject("pagename", pagename);// 当前页面的url

			if (!StringUtils.isBlank(keyword)) {
				mv.addObject("kw", keyword);
				qs += "kw=" + keyword + "&";
			}
			mv.addObject("qs", qs);

			// 在列表中需要筛选的条件
			Map<String, Object> params = new HashMap<String, Object>();
			// params.put(Experiment.ID, 0);
			// params.put(Experiment.SUBJECT_ID, 0);// 筛选条件1
			List<KeyAndValue> ordlist = new ArrayList<KeyAndValue>();
			ordlist.add(new KeyAndValue(Experiment.ID, "desc"));
			PagerList<Experiment> pagerlist = svcb.pagerListExperiment(pagenumber, pagesize, keyword, sqlin, params,
					ordlist);
			if (pagerlist.getPager().getRecordsSize() == 0 && pagerlist.getPager().getPages() != 0
					&& pagerlist.getPager().getCurrent() > pagerlist.getPager().getPages()) {
				String url = Common.getBasePath() + pagename + "?" + qs + "pn=" + pagerlist.getPager().getPages();
				mv.addObject("jumpto", url);
				// System.out.println("Test.ExperimentGET()url=" + url);
				mv.setViewName("jumperatonce");
			} else {
				// Pager<Experiment> pager = new Pager<Experiment>(page);
				// System.out.println("Test.ExperimentGET()pager=" + pager.toString());
				mv.addObject("qs", qs);
				mv.addObject("pager", pagerlist.getPager());
				mv.addObject("list", pagerlist.getList());
				mv.setViewName(pagename);
			}
		}

		return mv;

	}

	// TODO: POST-experiment
	@RequestMapping(value = { "/experiment", "/experiment/", "/experiment/index.html" }, method = RequestMethod.POST)
	public ModelAndView experimentPOST(ModelAndView mv, HttpServletRequest request, HttpSession session)
			throws Exception {

		System.out.println(this.getClass().getName() + "POST");
		String pagename = "admin/experiment";
		UserShiro userShiro = (UserShiro) SecurityUtils.getSubject().getPrincipal();
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		String operate = request.getParameter("operate");
		// --------编辑修改共有的部分---------
		Integer subject_id = 0;
		if (!StringUtils.isBlank(request.getParameter("subject_id"))) {
			subject_id = Integer.parseInt(request.getParameter("subject_id"));
		}
		Integer curriculum_id = 0;
		if (!StringUtils.isBlank(request.getParameter("curriculum_id"))) {
			curriculum_id = Integer.parseInt(request.getParameter("curriculum_id"));
		}
		Boolean is_actived = StringUtils.isBlank(request.getParameter("is_actived")) ? false : true;
		String intro = "";
		if (!StringUtils.isBlank(request.getParameter("intro"))) {
			intro = request.getParameter("intro");
		}
		intro = Util.restrictLength(intro, 200);
		String title = "";
		if (!StringUtils.isBlank(request.getParameter("title"))) {
			title = request.getParameter("title");
		}
		title = Util.restrictLength(title, 45);
		String content = "";
		if (!StringUtils.isBlank(request.getParameter("content"))) {
			content = request.getParameter("content");
		}
		content = Util.restrictLength(content, 65535);
		String purposes_requirement = "";
		if (!StringUtils.isBlank(request.getParameter("purposes_requirement"))) {
			purposes_requirement = request.getParameter("purposes_requirement");
		}
		purposes_requirement = Util.restrictLength(purposes_requirement, 65535);
		Integer filesize = 0;
		if (!StringUtils.isBlank(request.getParameter("filesize"))) {
			filesize = Integer.parseInt(request.getParameter("filesize"));
		}
		// --------编辑修改共有的部分-结束---------
		// Integer create_userid = userShiro.getId();
		// 来源页面
		String referer = request.getParameter("referer");
		switch (operate) {
		case "addform": {

			// String password_digest = DigestUtils.md5Hex(password);
			// Integer sortid = (int) Math.round(svcb.maxExperiment(Experiment.SORTID)) + 1;
			Experiment it = new Experiment(subject_id, curriculum_id, is_actived, intro, title, content,
					purposes_requirement, filesize);

			// ----------保存前检查逻辑问题---------------
			// 如：用户名必须唯一，手机号必须唯一
			Map<String, Object> params = new HashMap<String, Object>();
			// params.put(Experiment.ID, id);
			List<Experiment> list = svcb.listExperimentByMap(params);
			if (StringUtils.isBlank("") || StringUtils.isBlank("")) {

				mv.addObject("message", "你输入的信息没有通过星际外交部的严格审核，请重新输入！");
				mv.addObject("jumpto", pagename);
				mv.setViewName("jumperback");
				return mv;
			} else if (list.size() > 0) {

				// 输入内容中，有些内容要求值唯一！
				mv.addObject("message", "你输入的信息已经被外星人抢先注册！");
				mv.addObject("jumpto", pagename);
				mv.setViewName("jumperback");
				return mv;
			} else {

				svcb.saveExperiment(it);
			}
			// ----------保存前检查逻辑问题结束------------

			mv.addObject("message", "信息已经保存！");
		}
			break;
		case "editform": {
			Integer id = 0;
			if (!StringUtils.isBlank(request.getParameter("id"))) {
				id = Integer.parseInt(request.getParameter("id"));
			}
			// update_gmt = sdf.parse(request.getParameter("update_gmt_date")).getTime();
			// String password_digest = DigestUtils.md5Hex(password);

			// ----------保存前检查逻辑上是否有冲突---------------
			// 如：用户名必须唯一，手机号必须唯一
			Map<String, Object> params = new HashMap<String, Object>();
			params.put(Experiment.ID, id);
			List<Experiment> list = svcb.listExperimentByMap(params);
			if (list.size() > 1 || (list.size() == 1 && list.get(0).getId() != id)) {

				mv.addObject("message", "你输入的手机号码已经被外星人抢先注册！");
				mv.addObject("jumpto", pagename);
				mv.setViewName("jumperback");
				return mv;
			} else {
				svcb.updateExperimentById(subject_id, curriculum_id, is_actived, intro, title, content,
						purposes_requirement, filesize, new Date().getTime(), id);

			}
			// ----------保存前检查逻辑问题结束------------

			mv.addObject("message", "信息已经修改！");

		}
			break;

		default:
			System.out.println(this.getClass().getName() + "没有对应的operate=" + operate);
			break;
		}

		mv.addObject("jumpto", referer);
		mv.setViewName("jumper");

		return mv;
	}

	// TODO: GET-experiment_record
	@RequestMapping(value = { "/experiment_record", "/experiment_record/",
			"/experiment_record/index.html" }, method = RequestMethod.GET)
	public ModelAndView experiment_recordGET(ModelAndView mv, @RequestParam(value = "kw", required = false) String kw,
			@RequestParam(value = "clrkw", required = false) String clrkw,
			@RequestParam(value = "operate", required = false) String operate,
			@RequestParam(value = "pn", required = false) Integer pn,
			@RequestParam(value = "ps", required = false) Integer ps,
			@RequestParam(value = "id", required = false) Integer id, HttpServletRequest request, HttpSession session) {
		logger.info(this.getClass().getName());
		System.out.println(this.getClass().getName() + ",operate=" + operate + ",id=" + id + ",pn=" + pn + ",ps=" + ps
				+ ",kw=" + kw + ",clrkw=" + clrkw);
		mv.addObject("navitem", "Experiment_record");// 菜单项显示当前项
		String pagename = "test/experiment_record";
		// 新增和编辑，列表页面筛选也需要使用，页面部分都有一些预先读取的内容
		if (StringUtils.isBlank(operate) || operate.equals("add") || operate.equals("edit")) {
			// 新建、编辑、列表的条件筛选
			// 用于制作彩色的标签
			mv.addObject("tagpostfixlist", Common.tagPostfix);
			mv.addObject("studentlist", svcb.listStudentOrderByAsc(Student.ID));
			mv.addObject("studentmap", svcb.mapStudent());
			mv.addObject("experimentlist", svcb.listExperimentOrderByAsc(Experiment.ID));
			mv.addObject("experimentmap", svcb.mapExperiment());
		}
		// 新增和编辑，列表页面筛选也需要使用，页面部分都有一些预先读取的内容
		if (!StringUtils.isBlank(operate)) {
			// 操作不为空，增删改
			mv.addObject("operate", operate);
			switch (operate) {
			case "add": {
				mv.addObject("pagetitle", "管理实验记录");
				mv.addObject("subtitle", "新增实验记录");
				mv.addObject("formtitle", "新增实验记录");
				mv.addObject("pagename", pagename);
				// 默认作者是当前用户
				UserShiro userShiro = (UserShiro) SecurityUtils.getSubject().getPrincipal();
				mv.addObject("author", userShiro.getLogin_name());
				// 默认置顶3天
				Calendar calendar = Calendar.getInstance();
				calendar.add(Calendar.DATE, 3);
				SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
				String toptill_date = sdf.format(new Date(calendar.getTimeInMillis()));
				mv.addObject("toptill_date", toptill_date);
				// 默认头像
				mv.addObject("wechat_headimgurl", Common.userheadimgurl);
				mv.setViewName(pagename);
			}
				break;
			case "edit": {

				mv.addObject("pagetitle", "管理实验记录");
				mv.addObject("subtitle", "修改实验记录");
				mv.addObject("formtitle", "修改实验记录");
				mv.addObject("pagename", pagename);
				mv.addObject("referer", Common.getRefererUrl());

				// 读取当前已有信息
				Experiment_record it = svcb.getExperiment_recordById(id);
				// 修正信息：如默认头像
				mv.addObject("it", it);
				mv.setViewName(pagename);
			}
				break;
			case "delete": {

				boolean rtv = false;
				try {
					rtv = svcb.removeExperiment_recordById(id);
				} catch (Exception e) {
					e.printStackTrace();
				}
				if (rtv) {

					mv.addObject("message", "信息已经删除！");
					mv.addObject("jumpto", Common.getRefererUrl());
					mv.setViewName("jumper");
				} else {

					mv.addObject("message", "删除操作被外星人强行终止！");
					mv.addObject("jumpto", Common.getRefererUrl());
					mv.setViewName("jumperclick");
				}
			}
				break;
			case "hideitem":
			case "showitem": {
				UserShiro userShiro = (UserShiro) SecurityUtils.getSubject().getPrincipal();
				// svcb.updateExperiment_recordById(operate, id);
				mv.addObject("jumpto", Common.getRefererUrl());
				mv.setViewName("jumperatonce");
			}
				break;

			default: {

			}
				break;
			}
		} else {
			// 操作为空,默认为搜索,显示列表
			String qs = "";
			Integer pagenumber = Common.recordToSession(session, "pagenumber", pn + "", 1);
			Integer pagesize = Common.recordToSession(session, "pagesize", ps + "", 10);
			String keyword = Util.replaceSqlChar(kw);
			keyword = Common.recordToSession(session, "keyword_experiment_record", keyword, "");
			// 清除搜索条件
			if (!StringUtils.isBlank(clrkw)) {
				session.removeAttribute("keyword_experiment_record");
				keyword = null;
			}

			// 读取url中是否包含筛选条件
			Map<String, String> sqlin = new HashMap<String, String>();

			if (!StringUtils.isBlank(request.getParameter("student_id"))) {
				sqlin.put(Experiment_record.STUDENT_ID + "_id", request.getParameter("student_id"));
				mv.addObject(Experiment_record.STUDENT_ID + "_map",
						Util.splitToInteger(request.getParameter("student_id"), ","));
				qs += Experiment_record.STUDENT_ID + "=" + request.getParameter("student_id") + "&";
			}

			if (!StringUtils.isBlank(request.getParameter("experiment_id"))) {
				sqlin.put(Experiment_record.EXPERIMENT_ID + "_id", request.getParameter("experiment_id"));
				mv.addObject(Experiment_record.EXPERIMENT_ID + "_map",
						Util.splitToInteger(request.getParameter("experiment_id"), ","));
				qs += Experiment_record.EXPERIMENT_ID + "=" + request.getParameter("experiment_id") + "&";
			}

			mv.addObject("pagetitle", "管理实验记录");
			mv.addObject("subtitle", "分页列表");
			mv.addObject("tabletitle", "管理");
			mv.addObject("pagename", pagename);// 当前页面的url

			if (!StringUtils.isBlank(keyword)) {
				mv.addObject("kw", keyword);
				qs += "kw=" + keyword + "&";
			}
			mv.addObject("qs", qs);

			// 在列表中需要筛选的条件
			Map<String, Object> params = new HashMap<String, Object>();
			// params.put(Experiment_record.ID, 0);
			// params.put(Experiment_record.STUDENT_ID, 0);// 筛选条件1
			List<KeyAndValue> ordlist = new ArrayList<KeyAndValue>();
			ordlist.add(new KeyAndValue(Experiment_record.ID, "desc"));
			PagerList<Experiment_record> pagerlist = svcb.pagerListExperiment_record(pagenumber, pagesize, keyword,
					sqlin, params, ordlist);
			if (pagerlist.getPager().getRecordsSize() == 0 && pagerlist.getPager().getPages() != 0
					&& pagerlist.getPager().getCurrent() > pagerlist.getPager().getPages()) {
				String url = Common.getBasePath() + pagename + "?" + qs + "pn=" + pagerlist.getPager().getPages();
				mv.addObject("jumpto", url);
				// System.out.println("Test.Experiment_recordGET()url=" + url);
				mv.setViewName("jumperatonce");
			} else {
				// Pager<Experiment_record> pager = new Pager<Experiment_record>(page);
				// System.out.println("Test.Experiment_recordGET()pager=" + pager.toString());
				mv.addObject("qs", qs);
				mv.addObject("pager", pagerlist.getPager());
				mv.addObject("list", pagerlist.getList());
				mv.setViewName(pagename);
			}
		}

		return mv;

	}

	// TODO: POST-experiment_record
	@RequestMapping(value = { "/experiment_record", "/experiment_record/",
			"/experiment_record/index.html" }, method = RequestMethod.POST)
	public ModelAndView experiment_recordPOST(ModelAndView mv, HttpServletRequest request, HttpSession session)
			throws Exception {

		System.out.println(this.getClass().getName() + "POST");
		String pagename = "admin/experiment_record";
		UserShiro userShiro = (UserShiro) SecurityUtils.getSubject().getPrincipal();
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		String operate = request.getParameter("operate");
		// --------编辑修改共有的部分---------
		Integer student_id = 0;
		if (!StringUtils.isBlank(request.getParameter("student_id"))) {
			student_id = Integer.parseInt(request.getParameter("student_id"));
		}
		String sno = "";
		if (!StringUtils.isBlank(request.getParameter("sno"))) {
			sno = request.getParameter("sno");
		}
		sno = Util.restrictLength(sno, 10);
		Integer experiment_id = 0;
		if (!StringUtils.isBlank(request.getParameter("experiment_id"))) {
			experiment_id = Integer.parseInt(request.getParameter("experiment_id"));
		}
		String comment = "";
		if (!StringUtils.isBlank(request.getParameter("comment"))) {
			comment = request.getParameter("comment");
		}
		comment = Util.restrictLength(comment, 100);
		
		
		String mainflow = "";
		if (!StringUtils.isBlank(request.getParameter("mainflow"))) {
			mainflow = request.getParameter("mainflow");
		}
		
		//mainflow = Util.restrictLength(mainflow, 4294967295);
		
		String report = "";
		if (!StringUtils.isBlank(request.getParameter("report"))) {
			report = request.getParameter("report");
		}
		report = Util.restrictLength(report, 65535);
		String result = "";
		if (!StringUtils.isBlank(request.getParameter("result"))) {
			result = request.getParameter("result");
		}
		result = Util.restrictLength(result, 65535);
		Integer score = 0;
		if (!StringUtils.isBlank(request.getParameter("score"))) {
			score = Integer.parseInt(request.getParameter("score"));
		}
		Long submit = sdf.parse(request.getParameter("submit_date")).getTime();
		submit = submit > 0 ? submit : 0;
		String scorescript = "";
		if (!StringUtils.isBlank(request.getParameter("scorescript"))) {
			scorescript = request.getParameter("scorescript");
		}
		scorescript = Util.restrictLength(scorescript, 45);
		Integer reviewstate = 0;
		if (!StringUtils.isBlank(request.getParameter("reviewstate"))) {
			reviewstate = Integer.parseInt(request.getParameter("reviewstate"));
		}
		// --------编辑修改共有的部分-结束---------
		// Integer create_userid = userShiro.getId();
		// 来源页面
		String referer = request.getParameter("referer");
		switch (operate) {
		case "addform": {

			// String password_digest = DigestUtils.md5Hex(password);
			// Integer sortid = (int)
			// Math.round(svcb.maxExperiment_record(Experiment_record.SORTID)) + 1;
			Experiment_record it = new Experiment_record(student_id, sno, experiment_id, comment, mainflow, report,
					result, score, submit, scorescript, reviewstate);

			// ----------保存前检查逻辑问题---------------
			// 如：用户名必须唯一，手机号必须唯一
			Map<String, Object> params = new HashMap<String, Object>();
			// params.put(Experiment_record.ID, id);
			List<Experiment_record> list = svcb.listExperiment_recordByMap(params);
			if (StringUtils.isBlank("") || StringUtils.isBlank("")) {

				mv.addObject("message", "你输入的信息没有通过星际外交部的严格审核，请重新输入！");
				mv.addObject("jumpto", pagename);
				mv.setViewName("jumperback");
				return mv;
			} else if (list.size() > 0) {

				// 输入内容中，有些内容要求值唯一！
				mv.addObject("message", "你输入的信息已经被外星人抢先注册！");
				mv.addObject("jumpto", pagename);
				mv.setViewName("jumperback");
				return mv;
			} else {

				svcb.saveExperiment_record(it);
			}
			// ----------保存前检查逻辑问题结束------------

			mv.addObject("message", "信息已经保存！");
		}
			break;
		case "editform": {
			Integer id = 0;
			if (!StringUtils.isBlank(request.getParameter("id"))) {
				id = Integer.parseInt(request.getParameter("id"));
			}
			// update_gmt = sdf.parse(request.getParameter("update_gmt_date")).getTime();
			// String password_digest = DigestUtils.md5Hex(password);

			// ----------保存前检查逻辑上是否有冲突---------------
			// 如：用户名必须唯一，手机号必须唯一
			Map<String, Object> params = new HashMap<String, Object>();
			params.put(Experiment_record.ID, id);
			List<Experiment_record> list = svcb.listExperiment_recordByMap(params);
			if (list.size() > 1 || (list.size() == 1 && list.get(0).getId() != id)) {

				mv.addObject("message", "你输入的手机号码已经被外星人抢先注册！");
				mv.addObject("jumpto", pagename);
				mv.setViewName("jumperback");
				return mv;
			} else {
				svcb.updateExperiment_recordById(student_id, sno, experiment_id, comment, mainflow, report, result,
						score, submit, scorescript, reviewstate, new Date().getTime(), id);

			}
			// ----------保存前检查逻辑问题结束------------

			mv.addObject("message", "信息已经修改！");

		}
			break;

		default:
			System.out.println(this.getClass().getName() + "没有对应的operate=" + operate);
			break;
		}

		mv.addObject("jumpto", referer);
		mv.setViewName("jumper");

		return mv;
	}

	// TODO: GET-link_experiment_curriculum
	@RequestMapping(value = { "/link_experiment_curriculum", "/link_experiment_curriculum/",
			"/link_experiment_curriculum/index.html" }, method = RequestMethod.GET)
	public ModelAndView link_experiment_curriculumGET(ModelAndView mv,
			@RequestParam(value = "kw", required = false) String kw,
			@RequestParam(value = "clrkw", required = false) String clrkw,
			@RequestParam(value = "operate", required = false) String operate,
			@RequestParam(value = "pn", required = false) Integer pn,
			@RequestParam(value = "ps", required = false) Integer ps,
			@RequestParam(value = "id", required = false) Integer id, HttpServletRequest request, HttpSession session) {
		logger.info(this.getClass().getName());
		System.out.println(this.getClass().getName() + ",operate=" + operate + ",id=" + id + ",pn=" + pn + ",ps=" + ps
				+ ",kw=" + kw + ",clrkw=" + clrkw);
		mv.addObject("navitem", "Link_experiment_curriculum");// 菜单项显示当前项
		String pagename = "test/link_experiment_curriculum";
		// 新增和编辑，列表页面筛选也需要使用，页面部分都有一些预先读取的内容
		if (StringUtils.isBlank(operate) || operate.equals("add") || operate.equals("edit")) {
			// 新建、编辑、列表的条件筛选
			// 用于制作彩色的标签
			mv.addObject("tagpostfixlist", Common.tagPostfix);
			mv.addObject("experimentlist", svcb.listExperimentOrderByAsc(Experiment.ID));
			mv.addObject("experimentmap", svcb.mapExperiment());
			mv.addObject("curriculumlist", svcb.listCurriculumOrderByAsc(Curriculum.ID));
			mv.addObject("curriculummap", svcb.mapCurriculum());
			mv.addObject("subjectlist", svcb.listSubjectOrderByAsc(Subject.ID));
			mv.addObject("subjectmap", svcb.mapSubject());
		}
		// 新增和编辑，列表页面筛选也需要使用，页面部分都有一些预先读取的内容
		if (!StringUtils.isBlank(operate)) {
			// 操作不为空，增删改
			mv.addObject("operate", operate);
			switch (operate) {
			case "add": {
				mv.addObject("pagetitle", "管理实验对应到课程");
				mv.addObject("subtitle", "新增实验对应到课程");
				mv.addObject("formtitle", "新增实验对应到课程");
				mv.addObject("pagename", pagename);
				// 默认作者是当前用户
				UserShiro userShiro = (UserShiro) SecurityUtils.getSubject().getPrincipal();
				mv.addObject("author", userShiro.getLogin_name());
				// 默认置顶3天
				Calendar calendar = Calendar.getInstance();
				calendar.add(Calendar.DATE, 3);
				SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
				String toptill_date = sdf.format(new Date(calendar.getTimeInMillis()));
				mv.addObject("toptill_date", toptill_date);
				// 默认头像
				mv.addObject("wechat_headimgurl", Common.userheadimgurl);
				mv.setViewName(pagename);
			}
				break;
			case "edit": {

				mv.addObject("pagetitle", "管理实验对应到课程");
				mv.addObject("subtitle", "修改实验对应到课程");
				mv.addObject("formtitle", "修改实验对应到课程");
				mv.addObject("pagename", pagename);
				mv.addObject("referer", Common.getRefererUrl());

				// 读取当前已有信息
				Link_experiment_curriculum it = svcb.getLink_experiment_curriculumById(id);
				// 修正信息：如默认头像
				mv.addObject("it", it);
				mv.setViewName(pagename);
			}
				break;
			case "delete": {

				boolean rtv = false;
				try {
					rtv = svcb.removeLink_experiment_curriculumById(id);
				} catch (Exception e) {
					e.printStackTrace();
				}
				if (rtv) {

					mv.addObject("message", "信息已经删除！");
					mv.addObject("jumpto", Common.getRefererUrl());
					mv.setViewName("jumper");
				} else {

					mv.addObject("message", "删除操作被外星人强行终止！");
					mv.addObject("jumpto", Common.getRefererUrl());
					mv.setViewName("jumperclick");
				}
			}
				break;
			case "hideitem":
			case "showitem": {
				UserShiro userShiro = (UserShiro) SecurityUtils.getSubject().getPrincipal();
				// svcb.updateLink_experiment_curriculumById(operate, id);
				mv.addObject("jumpto", Common.getRefererUrl());
				mv.setViewName("jumperatonce");
			}
				break;
			case "moveup":
			case "movedown": {
				if (!svcb.moveLink_experiment_curriculum(operate, "movedown", id, Link_experiment_curriculum.SORTID)) {

					mv.addObject("message", "移动操作被外星人强行终止！");
					mv.addObject("jumpto", Common.getRefererUrl());
					mv.setViewName("jumperclick");
				} else {

					mv.addObject("jumpto", Common.getRefererUrl());
					mv.setViewName("jumperatonce");

				}
			}
				break;

			default: {

			}
				break;
			}
		} else {
			// 操作为空,默认为搜索,显示列表
			String qs = "";
			Integer pagenumber = Common.recordToSession(session, "pagenumber", pn + "", 1);
			Integer pagesize = Common.recordToSession(session, "pagesize", ps + "", 10);
			String keyword = Util.replaceSqlChar(kw);
			keyword = Common.recordToSession(session, "keyword_link_experiment_curriculum", keyword, "");
			// 清除搜索条件
			if (!StringUtils.isBlank(clrkw)) {
				session.removeAttribute("keyword_link_experiment_curriculum");
				keyword = null;
			}

			// 读取url中是否包含筛选条件
			Map<String, String> sqlin = new HashMap<String, String>();

			if (!StringUtils.isBlank(request.getParameter("experiment_id"))) {
				sqlin.put(Link_experiment_curriculum.EXPERIMENT_ID + "_id", request.getParameter("experiment_id"));
				mv.addObject(Link_experiment_curriculum.EXPERIMENT_ID + "_map",
						Util.splitToInteger(request.getParameter("experiment_id"), ","));
				qs += Link_experiment_curriculum.EXPERIMENT_ID + "=" + request.getParameter("experiment_id") + "&";
			}

			if (!StringUtils.isBlank(request.getParameter("curriculum_id"))) {
				sqlin.put(Link_experiment_curriculum.CURRICULUM_ID + "_id", request.getParameter("curriculum_id"));
				mv.addObject(Link_experiment_curriculum.CURRICULUM_ID + "_map",
						Util.splitToInteger(request.getParameter("curriculum_id"), ","));
				qs += Link_experiment_curriculum.CURRICULUM_ID + "=" + request.getParameter("curriculum_id") + "&";
			}

			if (!StringUtils.isBlank(request.getParameter("subject_id"))) {
				sqlin.put(Link_experiment_curriculum.SUBJECT_ID + "_id", request.getParameter("subject_id"));
				mv.addObject(Link_experiment_curriculum.SUBJECT_ID + "_map",
						Util.splitToInteger(request.getParameter("subject_id"), ","));
				qs += Link_experiment_curriculum.SUBJECT_ID + "=" + request.getParameter("subject_id") + "&";
			}

			mv.addObject("pagetitle", "管理实验对应到课程");
			mv.addObject("subtitle", "分页列表");
			mv.addObject("tabletitle", "管理");
			mv.addObject("pagename", pagename);// 当前页面的url

			if (!StringUtils.isBlank(keyword)) {
				mv.addObject("kw", keyword);
				qs += "kw=" + keyword + "&";
			}
			mv.addObject("qs", qs);

			// 在列表中需要筛选的条件
			Map<String, Object> params = new HashMap<String, Object>();
			// params.put(Link_experiment_curriculum.ID, 0);
			// params.put(Link_experiment_curriculum.EXPERIMENT_ID, 0);// 筛选条件1
			List<KeyAndValue> ordlist = new ArrayList<KeyAndValue>();
			ordlist.add(new KeyAndValue(Link_experiment_curriculum.ID, "desc"));
			PagerList<Link_experiment_curriculum> pagerlist = svcb.pagerListLink_experiment_curriculum(pagenumber,
					pagesize, keyword, sqlin, params, ordlist);
			if (pagerlist.getPager().getRecordsSize() == 0 && pagerlist.getPager().getPages() != 0
					&& pagerlist.getPager().getCurrent() > pagerlist.getPager().getPages()) {
				String url = Common.getBasePath() + pagename + "?" + qs + "pn=" + pagerlist.getPager().getPages();
				mv.addObject("jumpto", url);
				// System.out.println("Test.Link_experiment_curriculumGET()url=" + url);
				mv.setViewName("jumperatonce");
			} else {
				// Pager<Link_experiment_curriculum> pager = new
				// Pager<Link_experiment_curriculum>(page);
				// System.out.println("Test.Link_experiment_curriculumGET()pager=" +
				// pager.toString());
				mv.addObject("qs", qs);
				mv.addObject("pager", pagerlist.getPager());
				mv.addObject("list", pagerlist.getList());
				mv.setViewName(pagename);
			}
		}

		return mv;

	}

	// TODO: POST-link_experiment_curriculum
	@RequestMapping(value = { "/link_experiment_curriculum", "/link_experiment_curriculum/",
			"/link_experiment_curriculum/index.html" }, method = RequestMethod.POST)
	public ModelAndView link_experiment_curriculumPOST(ModelAndView mv, HttpServletRequest request, HttpSession session)
			throws Exception {

		System.out.println(this.getClass().getName() + "POST");
		String pagename = "admin/link_experiment_curriculum";
		UserShiro userShiro = (UserShiro) SecurityUtils.getSubject().getPrincipal();
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		String operate = request.getParameter("operate");
		// --------编辑修改共有的部分---------
		Integer experiment_id = 0;
		if (!StringUtils.isBlank(request.getParameter("experiment_id"))) {
			experiment_id = Integer.parseInt(request.getParameter("experiment_id"));
		}
		Integer curriculum_id = 0;
		if (!StringUtils.isBlank(request.getParameter("curriculum_id"))) {
			curriculum_id = Integer.parseInt(request.getParameter("curriculum_id"));
		}
		Integer subject_id = 0;
		if (!StringUtils.isBlank(request.getParameter("subject_id"))) {
			subject_id = Integer.parseInt(request.getParameter("subject_id"));
		}
		Long opening_gmt = sdf.parse(request.getParameter("opening_gmt_date")).getTime();
		opening_gmt = opening_gmt > 0 ? opening_gmt : 0;
		Long closing_gmt = sdf.parse(request.getParameter("closing_gmt_date")).getTime();
		closing_gmt = closing_gmt > 0 ? closing_gmt : 0;
		Integer sortid = 0;
		if (!StringUtils.isBlank(request.getParameter("sortid"))) {
			sortid = Integer.parseInt(request.getParameter("sortid"));
		}
		Boolean is_actived = StringUtils.isBlank(request.getParameter("is_actived")) ? false : true;
		// --------编辑修改共有的部分-结束---------
		// Integer create_userid = userShiro.getId();
		// 来源页面
		String referer = request.getParameter("referer");
		switch (operate) {
		case "addform": {

			// String password_digest = DigestUtils.md5Hex(password);
			// Integer sortid = (int)
			// Math.round(svcb.maxLink_experiment_curriculum(Link_experiment_curriculum.SORTID))
			// + 1;
			Link_experiment_curriculum it = new Link_experiment_curriculum(experiment_id, curriculum_id, subject_id,
					opening_gmt, closing_gmt, sortid, is_actived);

			// ----------保存前检查逻辑问题---------------
			// 如：用户名必须唯一，手机号必须唯一
			Map<String, Object> params = new HashMap<String, Object>();
			// params.put(Link_experiment_curriculum.ID, id);
			List<Link_experiment_curriculum> list = svcb.listLink_experiment_curriculumByMap(params);
			if (StringUtils.isBlank("") || StringUtils.isBlank("")) {

				mv.addObject("message", "你输入的信息没有通过星际外交部的严格审核，请重新输入！");
				mv.addObject("jumpto", pagename);
				mv.setViewName("jumperback");
				return mv;
			} else if (list.size() > 0) {

				// 输入内容中，有些内容要求值唯一！
				mv.addObject("message", "你输入的信息已经被外星人抢先注册！");
				mv.addObject("jumpto", pagename);
				mv.setViewName("jumperback");
				return mv;
			} else {

				svcb.saveLink_experiment_curriculum(it);
			}
			// ----------保存前检查逻辑问题结束------------

			mv.addObject("message", "信息已经保存！");
		}
			break;
		case "editform": {
			Integer id = 0;
			if (!StringUtils.isBlank(request.getParameter("id"))) {
				id = Integer.parseInt(request.getParameter("id"));
			}
			// update_gmt = sdf.parse(request.getParameter("update_gmt_date")).getTime();
			// String password_digest = DigestUtils.md5Hex(password);

			// ----------保存前检查逻辑上是否有冲突---------------
			// 如：用户名必须唯一，手机号必须唯一
			Map<String, Object> params = new HashMap<String, Object>();
			params.put(Link_experiment_curriculum.ID, id);
			List<Link_experiment_curriculum> list = svcb.listLink_experiment_curriculumByMap(params);
			if (list.size() > 1 || (list.size() == 1 && list.get(0).getId() != id)) {

				mv.addObject("message", "你输入的手机号码已经被外星人抢先注册！");
				mv.addObject("jumpto", pagename);
				mv.setViewName("jumperback");
				return mv;
			} else {
				svcb.updateLink_experiment_curriculumById(experiment_id, curriculum_id, subject_id, opening_gmt,
						closing_gmt, sortid, is_actived, new Date().getTime(), id);

			}
			// ----------保存前检查逻辑问题结束------------

			mv.addObject("message", "信息已经修改！");

		}
			break;

		default:
			System.out.println(this.getClass().getName() + "没有对应的operate=" + operate);
			break;
		}

		mv.addObject("jumpto", referer);
		mv.setViewName("jumper");

		return mv;
	}

	// TODO: GET-link_role_permit
	@RequestMapping(value = { "/link_role_permit", "/link_role_permit/",
			"/link_role_permit/index.html" }, method = RequestMethod.GET)
	public ModelAndView link_role_permitGET(ModelAndView mv, @RequestParam(value = "kw", required = false) String kw,
			@RequestParam(value = "clrkw", required = false) String clrkw,
			@RequestParam(value = "operate", required = false) String operate,
			@RequestParam(value = "pn", required = false) Integer pn,
			@RequestParam(value = "ps", required = false) Integer ps,
			@RequestParam(value = "id", required = false) Integer id, HttpServletRequest request, HttpSession session) {
		logger.info(this.getClass().getName());
		System.out.println(this.getClass().getName() + ",operate=" + operate + ",id=" + id + ",pn=" + pn + ",ps=" + ps
				+ ",kw=" + kw + ",clrkw=" + clrkw);
		mv.addObject("navitem", "Link_role_permit");// 菜单项显示当前项
		String pagename = "test/link_role_permit";
		// 新增和编辑，列表页面筛选也需要使用，页面部分都有一些预先读取的内容
		if (StringUtils.isBlank(operate) || operate.equals("add") || operate.equals("edit")) {
			// 新建、编辑、列表的条件筛选
			// 用于制作彩色的标签
			mv.addObject("tagpostfixlist", Common.tagPostfix);
			mv.addObject("rolelist", svcb.listRoleOrderByAsc(Role.ID));
			mv.addObject("rolemap", svcb.mapRole());
			mv.addObject("permitlist", svcb.listPermitOrderByAsc(Permit.ID));
			mv.addObject("permitmap", svcb.mapPermit());
		}
		// 新增和编辑，列表页面筛选也需要使用，页面部分都有一些预先读取的内容
		if (!StringUtils.isBlank(operate)) {
			// 操作不为空，增删改
			mv.addObject("operate", operate);
			switch (operate) {
			case "add": {
				mv.addObject("pagetitle", "管理角色权限关联表");
				mv.addObject("subtitle", "新增角色权限关联表");
				mv.addObject("formtitle", "新增角色权限关联表");
				mv.addObject("pagename", pagename);
				// 默认作者是当前用户
				UserShiro userShiro = (UserShiro) SecurityUtils.getSubject().getPrincipal();
				mv.addObject("author", userShiro.getLogin_name());
				// 默认置顶3天
				Calendar calendar = Calendar.getInstance();
				calendar.add(Calendar.DATE, 3);
				SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
				String toptill_date = sdf.format(new Date(calendar.getTimeInMillis()));
				mv.addObject("toptill_date", toptill_date);
				// 默认头像
				mv.addObject("wechat_headimgurl", Common.userheadimgurl);
				mv.setViewName(pagename);
			}
				break;
			case "edit": {

				mv.addObject("pagetitle", "管理角色权限关联表");
				mv.addObject("subtitle", "修改角色权限关联表");
				mv.addObject("formtitle", "修改角色权限关联表");
				mv.addObject("pagename", pagename);
				mv.addObject("referer", Common.getRefererUrl());

				// 读取当前已有信息
				Link_role_permit it = svcb.getLink_role_permitById(id);
				// 修正信息：如默认头像
				mv.addObject("it", it);
				mv.setViewName(pagename);
			}
				break;
			case "delete": {

				boolean rtv = false;
				try {
					rtv = svcb.removeLink_role_permitById(id);
				} catch (Exception e) {
					e.printStackTrace();
				}
				if (rtv) {

					mv.addObject("message", "信息已经删除！");
					mv.addObject("jumpto", Common.getRefererUrl());
					mv.setViewName("jumper");
				} else {

					mv.addObject("message", "删除操作被外星人强行终止！");
					mv.addObject("jumpto", Common.getRefererUrl());
					mv.setViewName("jumperclick");
				}
			}
				break;
			case "hideitem":
			case "showitem": {
				UserShiro userShiro = (UserShiro) SecurityUtils.getSubject().getPrincipal();
				// svcb.updateLink_role_permitById(operate, id);
				mv.addObject("jumpto", Common.getRefererUrl());
				mv.setViewName("jumperatonce");
			}
				break;

			default: {

			}
				break;
			}
		} else {
			// 操作为空,默认为搜索,显示列表
			String qs = "";
			Integer pagenumber = Common.recordToSession(session, "pagenumber", pn + "", 1);
			Integer pagesize = Common.recordToSession(session, "pagesize", ps + "", 10);
			String keyword = Util.replaceSqlChar(kw);
			keyword = Common.recordToSession(session, "keyword_link_role_permit", keyword, "");
			// 清除搜索条件
			if (!StringUtils.isBlank(clrkw)) {
				session.removeAttribute("keyword_link_role_permit");
				keyword = null;
			}

			// 读取url中是否包含筛选条件
			Map<String, String> sqlin = new HashMap<String, String>();

			if (!StringUtils.isBlank(request.getParameter("role_id"))) {
				sqlin.put(Link_role_permit.ROLE_ID + "_id", request.getParameter("role_id"));
				mv.addObject(Link_role_permit.ROLE_ID + "_map",
						Util.splitToInteger(request.getParameter("role_id"), ","));
				qs += Link_role_permit.ROLE_ID + "=" + request.getParameter("role_id") + "&";
			}

			if (!StringUtils.isBlank(request.getParameter("permit_id"))) {
				sqlin.put(Link_role_permit.PERMIT_ID + "_id", request.getParameter("permit_id"));
				mv.addObject(Link_role_permit.PERMIT_ID + "_map",
						Util.splitToInteger(request.getParameter("permit_id"), ","));
				qs += Link_role_permit.PERMIT_ID + "=" + request.getParameter("permit_id") + "&";
			}

			mv.addObject("pagetitle", "管理角色权限关联表");
			mv.addObject("subtitle", "分页列表");
			mv.addObject("tabletitle", "管理");
			mv.addObject("pagename", pagename);// 当前页面的url

			if (!StringUtils.isBlank(keyword)) {
				mv.addObject("kw", keyword);
				qs += "kw=" + keyword + "&";
			}
			mv.addObject("qs", qs);

			// 在列表中需要筛选的条件
			Map<String, Object> params = new HashMap<String, Object>();
			// params.put(Link_role_permit.ID, 0);
			// params.put(Link_role_permit.ROLE_ID, 0);// 筛选条件1
			List<KeyAndValue> ordlist = new ArrayList<KeyAndValue>();
			ordlist.add(new KeyAndValue(Link_role_permit.ID, "desc"));
			PagerList<Link_role_permit> pagerlist = svcb.pagerListLink_role_permit(pagenumber, pagesize, keyword, sqlin,
					params, ordlist);
			if (pagerlist.getPager().getRecordsSize() == 0 && pagerlist.getPager().getPages() != 0
					&& pagerlist.getPager().getCurrent() > pagerlist.getPager().getPages()) {
				String url = Common.getBasePath() + pagename + "?" + qs + "pn=" + pagerlist.getPager().getPages();
				mv.addObject("jumpto", url);
				// System.out.println("Test.Link_role_permitGET()url=" + url);
				mv.setViewName("jumperatonce");
			} else {
				// Pager<Link_role_permit> pager = new Pager<Link_role_permit>(page);
				// System.out.println("Test.Link_role_permitGET()pager=" + pager.toString());
				mv.addObject("qs", qs);
				mv.addObject("pager", pagerlist.getPager());
				mv.addObject("list", pagerlist.getList());
				mv.setViewName(pagename);
			}
		}

		return mv;

	}

	// TODO: POST-link_role_permit
	@RequestMapping(value = { "/link_role_permit", "/link_role_permit/",
			"/link_role_permit/index.html" }, method = RequestMethod.POST)
	public ModelAndView link_role_permitPOST(ModelAndView mv, HttpServletRequest request, HttpSession session)
			throws Exception {

		System.out.println(this.getClass().getName() + "POST");
		String pagename = "admin/link_role_permit";
		UserShiro userShiro = (UserShiro) SecurityUtils.getSubject().getPrincipal();
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		String operate = request.getParameter("operate");
		// --------编辑修改共有的部分---------
		Integer role_id = 0;
		if (!StringUtils.isBlank(request.getParameter("role_id"))) {
			role_id = Integer.parseInt(request.getParameter("role_id"));
		}
		Integer permit_id = 0;
		if (!StringUtils.isBlank(request.getParameter("permit_id"))) {
			permit_id = Integer.parseInt(request.getParameter("permit_id"));
		}
		// --------编辑修改共有的部分-结束---------
		// Integer create_userid = userShiro.getId();
		// 来源页面
		String referer = request.getParameter("referer");
		switch (operate) {
		case "addform": {

			// String password_digest = DigestUtils.md5Hex(password);
			// Integer sortid = (int)
			// Math.round(svcb.maxLink_role_permit(Link_role_permit.SORTID)) + 1;
			Link_role_permit it = new Link_role_permit(role_id, permit_id, userShiro.getId(), 0);

			// ----------保存前检查逻辑问题---------------
			// 如：用户名必须唯一，手机号必须唯一
			Map<String, Object> params = new HashMap<String, Object>();
			// params.put(Link_role_permit.ID, id);
			List<Link_role_permit> list = svcb.listLink_role_permitByMap(params);
			if (StringUtils.isBlank("") || StringUtils.isBlank("")) {

				mv.addObject("message", "你输入的信息没有通过星际外交部的严格审核，请重新输入！");
				mv.addObject("jumpto", pagename);
				mv.setViewName("jumperback");
				return mv;
			} else if (list.size() > 0) {

				// 输入内容中，有些内容要求值唯一！
				mv.addObject("message", "你输入的信息已经被外星人抢先注册！");
				mv.addObject("jumpto", pagename);
				mv.setViewName("jumperback");
				return mv;
			} else {

				svcb.saveLink_role_permit(it);
			}
			// ----------保存前检查逻辑问题结束------------

			mv.addObject("message", "信息已经保存！");
		}
			break;
		case "editform": {
			Integer id = 0;
			if (!StringUtils.isBlank(request.getParameter("id"))) {
				id = Integer.parseInt(request.getParameter("id"));
			}
			// update_gmt = sdf.parse(request.getParameter("update_gmt_date")).getTime();
			// String password_digest = DigestUtils.md5Hex(password);

			// ----------保存前检查逻辑上是否有冲突---------------
			// 如：用户名必须唯一，手机号必须唯一
			Map<String, Object> params = new HashMap<String, Object>();
			params.put(Link_role_permit.ID, id);
			List<Link_role_permit> list = svcb.listLink_role_permitByMap(params);
			if (list.size() > 1 || (list.size() == 1 && list.get(0).getId() != id)) {

				mv.addObject("message", "你输入的手机号码已经被外星人抢先注册！");
				mv.addObject("jumpto", pagename);
				mv.setViewName("jumperback");
				return mv;
			} else {
				svcb.updateLink_role_permitById(role_id, permit_id, userShiro.getId(), new Date().getTime(), id);

			}
			// ----------保存前检查逻辑问题结束------------

			mv.addObject("message", "信息已经修改！");

		}
			break;

		default:
			System.out.println(this.getClass().getName() + "没有对应的operate=" + operate);
			break;
		}

		mv.addObject("jumpto", referer);
		mv.setViewName("jumper");

		return mv;
	}

	// TODO: GET-link_student2group
	@RequestMapping(value = { "/link_student2group", "/link_student2group/",
			"/link_student2group/index.html" }, method = RequestMethod.GET)
	public ModelAndView link_student2groupGET(ModelAndView mv, @RequestParam(value = "kw", required = false) String kw,
			@RequestParam(value = "clrkw", required = false) String clrkw,
			@RequestParam(value = "operate", required = false) String operate,
			@RequestParam(value = "pn", required = false) Integer pn,
			@RequestParam(value = "ps", required = false) Integer ps,
			@RequestParam(value = "id", required = false) Integer id, HttpServletRequest request, HttpSession session) {
		logger.info(this.getClass().getName());
		System.out.println(this.getClass().getName() + ",operate=" + operate + ",id=" + id + ",pn=" + pn + ",ps=" + ps
				+ ",kw=" + kw + ",clrkw=" + clrkw);
		mv.addObject("navitem", "Link_student2group");// 菜单项显示当前项
		String pagename = "test/link_student2group";
		// 新增和编辑，列表页面筛选也需要使用，页面部分都有一些预先读取的内容
		if (StringUtils.isBlank(operate) || operate.equals("add") || operate.equals("edit")) {
			// 新建、编辑、列表的条件筛选
			// 用于制作彩色的标签
			mv.addObject("tagpostfixlist", Common.tagPostfix);
			mv.addObject("studentlist", svcb.listStudentOrderByAsc(Student.ID));
			mv.addObject("studentmap", svcb.mapStudent());
			mv.addObject("student_grouplist", svcb.listStudent_groupOrderByAsc(Student_group.ID));
			mv.addObject("student_groupmap", svcb.mapStudent_group());
		}
		// 新增和编辑，列表页面筛选也需要使用，页面部分都有一些预先读取的内容
		if (!StringUtils.isBlank(operate)) {
			// 操作不为空，增删改
			mv.addObject("operate", operate);
			switch (operate) {
			case "add": {
				mv.addObject("pagetitle", "管理学生分组信息/分班信息");
				mv.addObject("subtitle", "新增学生分组信息/分班信息");
				mv.addObject("formtitle", "新增学生分组信息/分班信息");
				mv.addObject("pagename", pagename);
				// 默认作者是当前用户
				UserShiro userShiro = (UserShiro) SecurityUtils.getSubject().getPrincipal();
				mv.addObject("author", userShiro.getLogin_name());
				// 默认置顶3天
				Calendar calendar = Calendar.getInstance();
				calendar.add(Calendar.DATE, 3);
				SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
				String toptill_date = sdf.format(new Date(calendar.getTimeInMillis()));
				mv.addObject("toptill_date", toptill_date);
				// 默认头像
				mv.addObject("wechat_headimgurl", Common.userheadimgurl);
				mv.setViewName(pagename);
			}
				break;
			case "edit": {

				mv.addObject("pagetitle", "管理学生分组信息/分班信息");
				mv.addObject("subtitle", "修改学生分组信息/分班信息");
				mv.addObject("formtitle", "修改学生分组信息/分班信息");
				mv.addObject("pagename", pagename);
				mv.addObject("referer", Common.getRefererUrl());

				// 读取当前已有信息
				Link_student2group it = svcb.getLink_student2groupById(id);
				// 修正信息：如默认头像
				mv.addObject("it", it);
				mv.setViewName(pagename);
			}
				break;
			case "delete": {

				boolean rtv = false;
				try {
					rtv = svcb.removeLink_student2groupById(id);
				} catch (Exception e) {
					e.printStackTrace();
				}
				if (rtv) {

					mv.addObject("message", "信息已经删除！");
					mv.addObject("jumpto", Common.getRefererUrl());
					mv.setViewName("jumper");
				} else {

					mv.addObject("message", "删除操作被外星人强行终止！");
					mv.addObject("jumpto", Common.getRefererUrl());
					mv.setViewName("jumperclick");
				}
			}
				break;
			case "hideitem":
			case "showitem": {
				UserShiro userShiro = (UserShiro) SecurityUtils.getSubject().getPrincipal();
				// svcb.updateLink_student2groupById(operate, id);
				mv.addObject("jumpto", Common.getRefererUrl());
				mv.setViewName("jumperatonce");
			}
				break;

			default: {

			}
				break;
			}
		} else {
			// 操作为空,默认为搜索,显示列表
			String qs = "";
			Integer pagenumber = Common.recordToSession(session, "pagenumber", pn + "", 1);
			Integer pagesize = Common.recordToSession(session, "pagesize", ps + "", 10);
			String keyword = Util.replaceSqlChar(kw);
			keyword = Common.recordToSession(session, "keyword_link_student2group", keyword, "");
			// 清除搜索条件
			if (!StringUtils.isBlank(clrkw)) {
				session.removeAttribute("keyword_link_student2group");
				keyword = null;
			}

			// 读取url中是否包含筛选条件
			Map<String, String> sqlin = new HashMap<String, String>();

			if (!StringUtils.isBlank(request.getParameter("student_id"))) {
				sqlin.put(Link_student2group.STUDENT_ID + "_id", request.getParameter("student_id"));
				mv.addObject(Link_student2group.STUDENT_ID + "_map",
						Util.splitToInteger(request.getParameter("student_id"), ","));
				qs += Link_student2group.STUDENT_ID + "=" + request.getParameter("student_id") + "&";
			}

			if (!StringUtils.isBlank(request.getParameter("student_group_id"))) {
				sqlin.put(Link_student2group.STUDENT_GROUP_ID + "_id", request.getParameter("student_group_id"));
				mv.addObject(Link_student2group.STUDENT_GROUP_ID + "_map",
						Util.splitToInteger(request.getParameter("student_group_id"), ","));
				qs += Link_student2group.STUDENT_GROUP_ID + "=" + request.getParameter("student_group_id") + "&";
			}

			mv.addObject("pagetitle", "管理学生分组信息/分班信息");
			mv.addObject("subtitle", "分页列表");
			mv.addObject("tabletitle", "管理");
			mv.addObject("pagename", pagename);// 当前页面的url

			if (!StringUtils.isBlank(keyword)) {
				mv.addObject("kw", keyword);
				qs += "kw=" + keyword + "&";
			}
			mv.addObject("qs", qs);

			// 在列表中需要筛选的条件
			Map<String, Object> params = new HashMap<String, Object>();
			// params.put(Link_student2group.ID, 0);
			// params.put(Link_student2group.STUDENT_ID, 0);// 筛选条件1
			List<KeyAndValue> ordlist = new ArrayList<KeyAndValue>();
			ordlist.add(new KeyAndValue(Link_student2group.ID, "desc"));
			PagerList<Link_student2group> pagerlist = svcb.pagerListLink_student2group(pagenumber, pagesize, keyword,
					sqlin, params, ordlist);
			if (pagerlist.getPager().getRecordsSize() == 0 && pagerlist.getPager().getPages() != 0
					&& pagerlist.getPager().getCurrent() > pagerlist.getPager().getPages()) {
				String url = Common.getBasePath() + pagename + "?" + qs + "pn=" + pagerlist.getPager().getPages();
				mv.addObject("jumpto", url);
				// System.out.println("Test.Link_student2groupGET()url=" + url);
				mv.setViewName("jumperatonce");
			} else {
				// Pager<Link_student2group> pager = new Pager<Link_student2group>(page);
				// System.out.println("Test.Link_student2groupGET()pager=" + pager.toString());
				mv.addObject("qs", qs);
				mv.addObject("pager", pagerlist.getPager());
				mv.addObject("list", pagerlist.getList());
				mv.setViewName(pagename);
			}
		}

		return mv;

	}

	// TODO: POST-link_student2group
	@RequestMapping(value = { "/link_student2group", "/link_student2group/",
			"/link_student2group/index.html" }, method = RequestMethod.POST)
	public ModelAndView link_student2groupPOST(ModelAndView mv, HttpServletRequest request, HttpSession session)
			throws Exception {

		System.out.println(this.getClass().getName() + "POST");
		String pagename = "admin/link_student2group";
		UserShiro userShiro = (UserShiro) SecurityUtils.getSubject().getPrincipal();
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		String operate = request.getParameter("operate");
		// --------编辑修改共有的部分---------
		Integer student_id = 0;
		if (!StringUtils.isBlank(request.getParameter("student_id"))) {
			student_id = Integer.parseInt(request.getParameter("student_id"));
		}
		Integer student_group_id = 0;
		if (!StringUtils.isBlank(request.getParameter("student_group_id"))) {
			student_group_id = Integer.parseInt(request.getParameter("student_group_id"));
		}
		// --------编辑修改共有的部分-结束---------
		// Integer create_userid = userShiro.getId();
		// 来源页面
		String referer = request.getParameter("referer");
		switch (operate) {
		case "addform": {

			// String password_digest = DigestUtils.md5Hex(password);
			// Integer sortid = (int)
			// Math.round(svcb.maxLink_student2group(Link_student2group.SORTID)) + 1;
			Link_student2group it = new Link_student2group(student_id, student_group_id);

			// ----------保存前检查逻辑问题---------------
			// 如：用户名必须唯一，手机号必须唯一
			Map<String, Object> params = new HashMap<String, Object>();
			// params.put(Link_student2group.ID, id);
			List<Link_student2group> list = svcb.listLink_student2groupByMap(params);
			if (StringUtils.isBlank("") || StringUtils.isBlank("")) {

				mv.addObject("message", "你输入的信息没有通过星际外交部的严格审核，请重新输入！");
				mv.addObject("jumpto", pagename);
				mv.setViewName("jumperback");
				return mv;
			} else if (list.size() > 0) {

				// 输入内容中，有些内容要求值唯一！
				mv.addObject("message", "你输入的信息已经被外星人抢先注册！");
				mv.addObject("jumpto", pagename);
				mv.setViewName("jumperback");
				return mv;
			} else {

				svcb.saveLink_student2group(it);
			}
			// ----------保存前检查逻辑问题结束------------

			mv.addObject("message", "信息已经保存！");
		}
			break;
		case "editform": {
			Integer id = 0;
			if (!StringUtils.isBlank(request.getParameter("id"))) {
				id = Integer.parseInt(request.getParameter("id"));
			}
			// update_gmt = sdf.parse(request.getParameter("update_gmt_date")).getTime();
			// String password_digest = DigestUtils.md5Hex(password);

			// ----------保存前检查逻辑上是否有冲突---------------
			// 如：用户名必须唯一，手机号必须唯一
			Map<String, Object> params = new HashMap<String, Object>();
			params.put(Link_student2group.ID, id);
			List<Link_student2group> list = svcb.listLink_student2groupByMap(params);
			if (list.size() > 1 || (list.size() == 1 && list.get(0).getId() != id)) {

				mv.addObject("message", "你输入的手机号码已经被外星人抢先注册！");
				mv.addObject("jumpto", pagename);
				mv.setViewName("jumperback");
				return mv;
			} else {
				svcb.updateLink_student2groupById(student_id, student_group_id, new Date().getTime(), id);

			}
			// ----------保存前检查逻辑问题结束------------

			mv.addObject("message", "信息已经修改！");

		}
			break;

		default:
			System.out.println(this.getClass().getName() + "没有对应的operate=" + operate);
			break;
		}

		mv.addObject("jumpto", referer);
		mv.setViewName("jumper");

		return mv;
	}

	// TODO: GET-link_user_role
	@RequestMapping(value = { "/link_user_role", "/link_user_role/",
			"/link_user_role/index.html" }, method = RequestMethod.GET)
	public ModelAndView link_user_roleGET(ModelAndView mv, @RequestParam(value = "kw", required = false) String kw,
			@RequestParam(value = "clrkw", required = false) String clrkw,
			@RequestParam(value = "operate", required = false) String operate,
			@RequestParam(value = "pn", required = false) Integer pn,
			@RequestParam(value = "ps", required = false) Integer ps,
			@RequestParam(value = "id", required = false) Integer id, HttpServletRequest request, HttpSession session) {
		logger.info(this.getClass().getName());
		System.out.println(this.getClass().getName() + ",operate=" + operate + ",id=" + id + ",pn=" + pn + ",ps=" + ps
				+ ",kw=" + kw + ",clrkw=" + clrkw);
		mv.addObject("navitem", "Link_user_role");// 菜单项显示当前项
		String pagename = "test/link_user_role";
		// 新增和编辑，列表页面筛选也需要使用，页面部分都有一些预先读取的内容
		if (StringUtils.isBlank(operate) || operate.equals("add") || operate.equals("edit")) {
			// 新建、编辑、列表的条件筛选
			// 用于制作彩色的标签
			mv.addObject("tagpostfixlist", Common.tagPostfix);
			mv.addObject("userlist", svcb.listUserOrderByAsc(User.ID));
			mv.addObject("usermap", svcb.mapUser());
			mv.addObject("rolelist", svcb.listRoleOrderByAsc(Role.ID));
			mv.addObject("rolemap", svcb.mapRole());
		}
		// 新增和编辑，列表页面筛选也需要使用，页面部分都有一些预先读取的内容
		if (!StringUtils.isBlank(operate)) {
			// 操作不为空，增删改
			mv.addObject("operate", operate);
			switch (operate) {
			case "add": {
				mv.addObject("pagetitle", "管理");
				mv.addObject("subtitle", "新增");
				mv.addObject("formtitle", "新增");
				mv.addObject("pagename", pagename);
				// 默认作者是当前用户
				UserShiro userShiro = (UserShiro) SecurityUtils.getSubject().getPrincipal();
				mv.addObject("author", userShiro.getLogin_name());
				// 默认置顶3天
				Calendar calendar = Calendar.getInstance();
				calendar.add(Calendar.DATE, 3);
				SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
				String toptill_date = sdf.format(new Date(calendar.getTimeInMillis()));
				mv.addObject("toptill_date", toptill_date);
				// 默认头像
				mv.addObject("wechat_headimgurl", Common.userheadimgurl);
				mv.setViewName(pagename);
			}
				break;
			case "edit": {

				mv.addObject("pagetitle", "管理");
				mv.addObject("subtitle", "修改");
				mv.addObject("formtitle", "修改");
				mv.addObject("pagename", pagename);
				mv.addObject("referer", Common.getRefererUrl());

				// 读取当前已有信息
				Link_user_role it = svcb.getLink_user_roleById(id);
				// 修正信息：如默认头像
				mv.addObject("it", it);
				mv.setViewName(pagename);
			}
				break;
			case "delete": {

				boolean rtv = false;
				try {
					rtv = svcb.removeLink_user_roleById(id);
				} catch (Exception e) {
					e.printStackTrace();
				}
				if (rtv) {

					mv.addObject("message", "信息已经删除！");
					mv.addObject("jumpto", Common.getRefererUrl());
					mv.setViewName("jumper");
				} else {

					mv.addObject("message", "删除操作被外星人强行终止！");
					mv.addObject("jumpto", Common.getRefererUrl());
					mv.setViewName("jumperclick");
				}
			}
				break;
			case "hideitem":
			case "showitem": {
				UserShiro userShiro = (UserShiro) SecurityUtils.getSubject().getPrincipal();
				// svcb.updateLink_user_roleById(operate, id);
				mv.addObject("jumpto", Common.getRefererUrl());
				mv.setViewName("jumperatonce");
			}
				break;

			default: {

			}
				break;
			}
		} else {
			// 操作为空,默认为搜索,显示列表
			String qs = "";
			Integer pagenumber = Common.recordToSession(session, "pagenumber", pn + "", 1);
			Integer pagesize = Common.recordToSession(session, "pagesize", ps + "", 10);
			String keyword = Util.replaceSqlChar(kw);
			keyword = Common.recordToSession(session, "keyword_link_user_role", keyword, "");
			// 清除搜索条件
			if (!StringUtils.isBlank(clrkw)) {
				session.removeAttribute("keyword_link_user_role");
				keyword = null;
			}

			// 读取url中是否包含筛选条件
			Map<String, String> sqlin = new HashMap<String, String>();

			if (!StringUtils.isBlank(request.getParameter("user_id"))) {
				sqlin.put(Link_user_role.USER_ID + "_id", request.getParameter("user_id"));
				mv.addObject(Link_user_role.USER_ID + "_map",
						Util.splitToInteger(request.getParameter("user_id"), ","));
				qs += Link_user_role.USER_ID + "=" + request.getParameter("user_id") + "&";
			}

			if (!StringUtils.isBlank(request.getParameter("role_id"))) {
				sqlin.put(Link_user_role.ROLE_ID + "_id", request.getParameter("role_id"));
				mv.addObject(Link_user_role.ROLE_ID + "_map",
						Util.splitToInteger(request.getParameter("role_id"), ","));
				qs += Link_user_role.ROLE_ID + "=" + request.getParameter("role_id") + "&";
			}

			mv.addObject("pagetitle", "管理");
			mv.addObject("subtitle", "分页列表");
			mv.addObject("tabletitle", "管理");
			mv.addObject("pagename", pagename);// 当前页面的url

			if (!StringUtils.isBlank(keyword)) {
				mv.addObject("kw", keyword);
				qs += "kw=" + keyword + "&";
			}
			mv.addObject("qs", qs);

			// 在列表中需要筛选的条件
			Map<String, Object> params = new HashMap<String, Object>();
			// params.put(Link_user_role.ID, 0);
			// params.put(Link_user_role.USER_ID, 0);// 筛选条件1
			List<KeyAndValue> ordlist = new ArrayList<KeyAndValue>();
			ordlist.add(new KeyAndValue(Link_user_role.ID, "desc"));
			PagerList<Link_user_role> pagerlist = svcb.pagerListLink_user_role(pagenumber, pagesize, keyword, sqlin,
					params, ordlist);
			if (pagerlist.getPager().getRecordsSize() == 0 && pagerlist.getPager().getPages() != 0
					&& pagerlist.getPager().getCurrent() > pagerlist.getPager().getPages()) {
				String url = Common.getBasePath() + pagename + "?" + qs + "pn=" + pagerlist.getPager().getPages();
				mv.addObject("jumpto", url);
				// System.out.println("Test.Link_user_roleGET()url=" + url);
				mv.setViewName("jumperatonce");
			} else {
				// Pager<Link_user_role> pager = new Pager<Link_user_role>(page);
				// System.out.println("Test.Link_user_roleGET()pager=" + pager.toString());
				mv.addObject("qs", qs);
				mv.addObject("pager", pagerlist.getPager());
				mv.addObject("list", pagerlist.getList());
				mv.setViewName(pagename);
			}
		}

		return mv;

	}

	// TODO: POST-link_user_role
	@RequestMapping(value = { "/link_user_role", "/link_user_role/",
			"/link_user_role/index.html" }, method = RequestMethod.POST)
	public ModelAndView link_user_rolePOST(ModelAndView mv, HttpServletRequest request, HttpSession session)
			throws Exception {

		System.out.println(this.getClass().getName() + "POST");
		String pagename = "admin/link_user_role";
		UserShiro userShiro = (UserShiro) SecurityUtils.getSubject().getPrincipal();
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		String operate = request.getParameter("operate");
		// --------编辑修改共有的部分---------
		Integer user_id = 0;
		if (!StringUtils.isBlank(request.getParameter("user_id"))) {
			user_id = Integer.parseInt(request.getParameter("user_id"));
		}
		Integer role_id = 0;
		if (!StringUtils.isBlank(request.getParameter("role_id"))) {
			role_id = Integer.parseInt(request.getParameter("role_id"));
		}
		// --------编辑修改共有的部分-结束---------
		// Integer create_userid = userShiro.getId();
		// 来源页面
		String referer = request.getParameter("referer");
		switch (operate) {
		case "addform": {

			// String password_digest = DigestUtils.md5Hex(password);
			// Integer sortid = (int)
			// Math.round(svcb.maxLink_user_role(Link_user_role.SORTID)) + 1;
			Link_user_role it = new Link_user_role(user_id, role_id, userShiro.getId(), 0);

			// ----------保存前检查逻辑问题---------------
			// 如：用户名必须唯一，手机号必须唯一
			Map<String, Object> params = new HashMap<String, Object>();
			// params.put(Link_user_role.ID, id);
			List<Link_user_role> list = svcb.listLink_user_roleByMap(params);
			if (StringUtils.isBlank("") || StringUtils.isBlank("")) {

				mv.addObject("message", "你输入的信息没有通过星际外交部的严格审核，请重新输入！");
				mv.addObject("jumpto", pagename);
				mv.setViewName("jumperback");
				return mv;
			} else if (list.size() > 0) {

				// 输入内容中，有些内容要求值唯一！
				mv.addObject("message", "你输入的信息已经被外星人抢先注册！");
				mv.addObject("jumpto", pagename);
				mv.setViewName("jumperback");
				return mv;
			} else {

				svcb.saveLink_user_role(it);
			}
			// ----------保存前检查逻辑问题结束------------

			mv.addObject("message", "信息已经保存！");
		}
			break;
		case "editform": {
			Integer id = 0;
			if (!StringUtils.isBlank(request.getParameter("id"))) {
				id = Integer.parseInt(request.getParameter("id"));
			}
			// update_gmt = sdf.parse(request.getParameter("update_gmt_date")).getTime();
			// String password_digest = DigestUtils.md5Hex(password);

			// ----------保存前检查逻辑上是否有冲突---------------
			// 如：用户名必须唯一，手机号必须唯一
			Map<String, Object> params = new HashMap<String, Object>();
			params.put(Link_user_role.ID, id);
			List<Link_user_role> list = svcb.listLink_user_roleByMap(params);
			if (list.size() > 1 || (list.size() == 1 && list.get(0).getId() != id)) {

				mv.addObject("message", "你输入的手机号码已经被外星人抢先注册！");
				mv.addObject("jumpto", pagename);
				mv.setViewName("jumperback");
				return mv;
			} else {
				svcb.updateLink_user_roleById(user_id, role_id, userShiro.getId(), new Date().getTime(), id);

			}
			// ----------保存前检查逻辑问题结束------------

			mv.addObject("message", "信息已经修改！");

		}
			break;

		default:
			System.out.println(this.getClass().getName() + "没有对应的operate=" + operate);
			break;
		}

		mv.addObject("jumpto", referer);
		mv.setViewName("jumper");

		return mv;
	}

	// TODO: GET-message
	@RequestMapping(value = { "/message", "/message/", "/message/index.html" }, method = RequestMethod.GET)
	public ModelAndView messageGET(ModelAndView mv, @RequestParam(value = "kw", required = false) String kw,
			@RequestParam(value = "clrkw", required = false) String clrkw,
			@RequestParam(value = "operate", required = false) String operate,
			@RequestParam(value = "pn", required = false) Integer pn,
			@RequestParam(value = "ps", required = false) Integer ps,
			@RequestParam(value = "id", required = false) Integer id, HttpServletRequest request, HttpSession session) {
		logger.info(this.getClass().getName());
		System.out.println(this.getClass().getName() + ",operate=" + operate + ",id=" + id + ",pn=" + pn + ",ps=" + ps
				+ ",kw=" + kw + ",clrkw=" + clrkw);
		mv.addObject("navitem", "Message");// 菜单项显示当前项
		String pagename = "test/message";
		// 新增和编辑，列表页面筛选也需要使用，页面部分都有一些预先读取的内容
		if (StringUtils.isBlank(operate) || operate.equals("add") || operate.equals("edit")) {
			// 新建、编辑、列表的条件筛选
			// 用于制作彩色的标签
			mv.addObject("tagpostfixlist", Common.tagPostfix);
		}
		// 新增和编辑，列表页面筛选也需要使用，页面部分都有一些预先读取的内容
		if (!StringUtils.isBlank(operate)) {
			// 操作不为空，增删改
			mv.addObject("operate", operate);
			switch (operate) {
			case "add": {
				mv.addObject("pagetitle", "管理留言信箱");
				mv.addObject("subtitle", "新增留言信箱");
				mv.addObject("formtitle", "新增留言信箱");
				mv.addObject("pagename", pagename);
				// 默认作者是当前用户
				UserShiro userShiro = (UserShiro) SecurityUtils.getSubject().getPrincipal();
				mv.addObject("author", userShiro.getLogin_name());
				// 默认置顶3天
				Calendar calendar = Calendar.getInstance();
				calendar.add(Calendar.DATE, 3);
				SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
				String toptill_date = sdf.format(new Date(calendar.getTimeInMillis()));
				mv.addObject("toptill_date", toptill_date);
				// 默认头像
				mv.addObject("wechat_headimgurl", Common.userheadimgurl);
				mv.setViewName(pagename);
			}
				break;
			case "edit": {

				mv.addObject("pagetitle", "管理留言信箱");
				mv.addObject("subtitle", "修改留言信箱");
				mv.addObject("formtitle", "修改留言信箱");
				mv.addObject("pagename", pagename);
				mv.addObject("referer", Common.getRefererUrl());

				// 读取当前已有信息
				Message it = svcb.getMessageById(id);
				// 修正信息：如默认头像
				mv.addObject("it", it);
				mv.setViewName(pagename);
			}
				break;
			case "delete": {

				boolean rtv = false;
				try {
					rtv = svcb.removeMessageById(id);
				} catch (Exception e) {
					e.printStackTrace();
				}
				if (rtv) {

					mv.addObject("message", "信息已经删除！");
					mv.addObject("jumpto", Common.getRefererUrl());
					mv.setViewName("jumper");
				} else {

					mv.addObject("message", "删除操作被外星人强行终止！");
					mv.addObject("jumpto", Common.getRefererUrl());
					mv.setViewName("jumperclick");
				}
			}
				break;
			case "hideitem":
			case "showitem": {
				UserShiro userShiro = (UserShiro) SecurityUtils.getSubject().getPrincipal();
				// svcb.updateMessageById(operate, id);
				mv.addObject("jumpto", Common.getRefererUrl());
				mv.setViewName("jumperatonce");
			}
				break;

			default: {

			}
				break;
			}
		} else {
			// 操作为空,默认为搜索,显示列表
			String qs = "";
			Integer pagenumber = Common.recordToSession(session, "pagenumber", pn + "", 1);
			Integer pagesize = Common.recordToSession(session, "pagesize", ps + "", 10);
			String keyword = Util.replaceSqlChar(kw);
			keyword = Common.recordToSession(session, "keyword_message", keyword, "");
			// 清除搜索条件
			if (!StringUtils.isBlank(clrkw)) {
				session.removeAttribute("keyword_message");
				keyword = null;
			}

			// 读取url中是否包含筛选条件
			Map<String, String> sqlin = new HashMap<String, String>();

			mv.addObject("pagetitle", "管理留言信箱");
			mv.addObject("subtitle", "分页列表");
			mv.addObject("tabletitle", "管理");
			mv.addObject("pagename", pagename);// 当前页面的url

			if (!StringUtils.isBlank(keyword)) {
				mv.addObject("kw", keyword);
				qs += "kw=" + keyword + "&";
			}
			mv.addObject("qs", qs);

			// 在列表中需要筛选的条件
			Map<String, Object> params = new HashMap<String, Object>();
			// params.put(Message.ID, 0);
			// params.put(Message.FROM, 0);// 筛选条件1
			List<KeyAndValue> ordlist = new ArrayList<KeyAndValue>();
			ordlist.add(new KeyAndValue(Message.ID, "desc"));
			PagerList<Message> pagerlist = svcb.pagerListMessage(pagenumber, pagesize, keyword, sqlin, params, ordlist);
			if (pagerlist.getPager().getRecordsSize() == 0 && pagerlist.getPager().getPages() != 0
					&& pagerlist.getPager().getCurrent() > pagerlist.getPager().getPages()) {
				String url = Common.getBasePath() + pagename + "?" + qs + "pn=" + pagerlist.getPager().getPages();
				mv.addObject("jumpto", url);
				// System.out.println("Test.MessageGET()url=" + url);
				mv.setViewName("jumperatonce");
			} else {
				// Pager<Message> pager = new Pager<Message>(page);
				// System.out.println("Test.MessageGET()pager=" + pager.toString());
				mv.addObject("qs", qs);
				mv.addObject("pager", pagerlist.getPager());
				mv.addObject("list", pagerlist.getList());
				mv.setViewName(pagename);
			}
		}

		return mv;

	}

	// TODO: POST-message
	@RequestMapping(value = { "/message", "/message/", "/message/index.html" }, method = RequestMethod.POST)
	public ModelAndView messagePOST(ModelAndView mv, HttpServletRequest request, HttpSession session) throws Exception {

		System.out.println(this.getClass().getName() + "POST");
		String pagename = "admin/message";
		UserShiro userShiro = (UserShiro) SecurityUtils.getSubject().getPrincipal();
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		String operate = request.getParameter("operate");
		// --------编辑修改共有的部分---------
		String from = "";
		if (!StringUtils.isBlank(request.getParameter("from"))) {
			from = request.getParameter("from");
		}
		from = Util.restrictLength(from, 45);
		String to = "";
		if (!StringUtils.isBlank(request.getParameter("to"))) {
			to = request.getParameter("to");
		}
		to = Util.restrictLength(to, 45);
		String username = "";
		if (!StringUtils.isBlank(request.getParameter("username"))) {
			username = request.getParameter("username");
		}
		username = Util.restrictLength(username, 45);
		String email = "";
		if (!StringUtils.isBlank(request.getParameter("email"))) {
			email = request.getParameter("email");
		}
		email = Util.restrictLength(email, 45);
		String msg = "";
		if (!StringUtils.isBlank(request.getParameter("msg"))) {
			msg = request.getParameter("msg");
		}
		msg = Util.restrictLength(msg, 255);
		// --------编辑修改共有的部分-结束---------
		// Integer create_userid = userShiro.getId();
		// 来源页面
		String referer = request.getParameter("referer");
		switch (operate) {
		case "addform": {

			// String password_digest = DigestUtils.md5Hex(password);
			// Integer sortid = (int) Math.round(svcb.maxMessage(Message.SORTID)) + 1;
			Message it = new Message(from, to, username, email, msg);

			// ----------保存前检查逻辑问题---------------
			// 如：用户名必须唯一，手机号必须唯一
			Map<String, Object> params = new HashMap<String, Object>();
			// params.put(Message.ID, id);
			List<Message> list = svcb.listMessageByMap(params);
			if (StringUtils.isBlank("") || StringUtils.isBlank("")) {

				mv.addObject("message", "你输入的信息没有通过星际外交部的严格审核，请重新输入！");
				mv.addObject("jumpto", pagename);
				mv.setViewName("jumperback");
				return mv;
			} else if (list.size() > 0) {

				// 输入内容中，有些内容要求值唯一！
				mv.addObject("message", "你输入的信息已经被外星人抢先注册！");
				mv.addObject("jumpto", pagename);
				mv.setViewName("jumperback");
				return mv;
			} else {

				svcb.saveMessage(it);
			}
			// ----------保存前检查逻辑问题结束------------

			mv.addObject("message", "信息已经保存！");
		}
			break;
		case "editform": {
			Integer id = 0;
			if (!StringUtils.isBlank(request.getParameter("id"))) {
				id = Integer.parseInt(request.getParameter("id"));
			}
			// update_gmt = sdf.parse(request.getParameter("update_gmt_date")).getTime();
			// String password_digest = DigestUtils.md5Hex(password);

			// ----------保存前检查逻辑上是否有冲突---------------
			// 如：用户名必须唯一，手机号必须唯一
			Map<String, Object> params = new HashMap<String, Object>();
			params.put(Message.ID, id);
			List<Message> list = svcb.listMessageByMap(params);
			if (list.size() > 1 || (list.size() == 1 && list.get(0).getId() != id)) {

				mv.addObject("message", "你输入的手机号码已经被外星人抢先注册！");
				mv.addObject("jumpto", pagename);
				mv.setViewName("jumperback");
				return mv;
			} else {
				svcb.updateMessageById(from, to, username, email, msg, new Date().getTime(), id);

			}
			// ----------保存前检查逻辑问题结束------------

			mv.addObject("message", "信息已经修改！");

		}
			break;

		default:
			System.out.println(this.getClass().getName() + "没有对应的operate=" + operate);
			break;
		}

		mv.addObject("jumpto", referer);
		mv.setViewName("jumper");

		return mv;
	}

	// TODO: GET-permit
	@RequestMapping(value = { "/permit", "/permit/", "/permit/index.html" }, method = RequestMethod.GET)
	public ModelAndView permitGET(ModelAndView mv, @RequestParam(value = "kw", required = false) String kw,
			@RequestParam(value = "clrkw", required = false) String clrkw,
			@RequestParam(value = "operate", required = false) String operate,
			@RequestParam(value = "pn", required = false) Integer pn,
			@RequestParam(value = "ps", required = false) Integer ps,
			@RequestParam(value = "id", required = false) Integer id, HttpServletRequest request, HttpSession session) {
		logger.info(this.getClass().getName());
		System.out.println(this.getClass().getName() + ",operate=" + operate + ",id=" + id + ",pn=" + pn + ",ps=" + ps
				+ ",kw=" + kw + ",clrkw=" + clrkw);
		mv.addObject("navitem", "Permit");// 菜单项显示当前项
		String pagename = "test/permit";
		// 新增和编辑，列表页面筛选也需要使用，页面部分都有一些预先读取的内容
		if (StringUtils.isBlank(operate) || operate.equals("add") || operate.equals("edit")) {
			// 新建、编辑、列表的条件筛选
			// 用于制作彩色的标签
			mv.addObject("tagpostfixlist", Common.tagPostfix);
		}
		// 新增和编辑，列表页面筛选也需要使用，页面部分都有一些预先读取的内容
		if (!StringUtils.isBlank(operate)) {
			// 操作不为空，增删改
			mv.addObject("operate", operate);
			switch (operate) {
			case "add": {
				mv.addObject("pagetitle", "管理许可");
				mv.addObject("subtitle", "新增许可");
				mv.addObject("formtitle", "新增许可");
				mv.addObject("pagename", pagename);
				// 默认作者是当前用户
				UserShiro userShiro = (UserShiro) SecurityUtils.getSubject().getPrincipal();
				mv.addObject("author", userShiro.getLogin_name());
				// 默认置顶3天
				Calendar calendar = Calendar.getInstance();
				calendar.add(Calendar.DATE, 3);
				SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
				String toptill_date = sdf.format(new Date(calendar.getTimeInMillis()));
				mv.addObject("toptill_date", toptill_date);
				// 默认头像
				mv.addObject("wechat_headimgurl", Common.userheadimgurl);
				mv.setViewName(pagename);
			}
				break;
			case "edit": {

				mv.addObject("pagetitle", "管理许可");
				mv.addObject("subtitle", "修改许可");
				mv.addObject("formtitle", "修改许可");
				mv.addObject("pagename", pagename);
				mv.addObject("referer", Common.getRefererUrl());

				// 读取当前已有信息
				Permit it = svcb.getPermitById(id);
				// 修正信息：如默认头像
				mv.addObject("it", it);
				mv.setViewName(pagename);
			}
				break;
			case "delete": {

				boolean rtv = false;
				try {
					rtv = svcb.removePermitById(id);
				} catch (Exception e) {
					e.printStackTrace();
				}
				if (rtv) {

					mv.addObject("message", "信息已经删除！");
					mv.addObject("jumpto", Common.getRefererUrl());
					mv.setViewName("jumper");
				} else {

					mv.addObject("message", "删除操作被外星人强行终止！");
					mv.addObject("jumpto", Common.getRefererUrl());
					mv.setViewName("jumperclick");
				}
			}
				break;
			case "hideitem":
			case "showitem": {
				UserShiro userShiro = (UserShiro) SecurityUtils.getSubject().getPrincipal();
				// svcb.updatePermitById(operate, id);
				mv.addObject("jumpto", Common.getRefererUrl());
				mv.setViewName("jumperatonce");
			}
				break;

			default: {

			}
				break;
			}
		} else {
			// 操作为空,默认为搜索,显示列表
			String qs = "";
			Integer pagenumber = Common.recordToSession(session, "pagenumber", pn + "", 1);
			Integer pagesize = Common.recordToSession(session, "pagesize", ps + "", 10);
			String keyword = Util.replaceSqlChar(kw);
			keyword = Common.recordToSession(session, "keyword_permit", keyword, "");
			// 清除搜索条件
			if (!StringUtils.isBlank(clrkw)) {
				session.removeAttribute("keyword_permit");
				keyword = null;
			}

			// 读取url中是否包含筛选条件
			Map<String, String> sqlin = new HashMap<String, String>();

			mv.addObject("pagetitle", "管理许可");
			mv.addObject("subtitle", "分页列表");
			mv.addObject("tabletitle", "管理");
			mv.addObject("pagename", pagename);// 当前页面的url

			if (!StringUtils.isBlank(keyword)) {
				mv.addObject("kw", keyword);
				qs += "kw=" + keyword + "&";
			}
			mv.addObject("qs", qs);

			// 在列表中需要筛选的条件
			Map<String, Object> params = new HashMap<String, Object>();
			// params.put(Permit.ID, 0);
			// params.put(Permit.TARGET, 0);// 筛选条件1
			List<KeyAndValue> ordlist = new ArrayList<KeyAndValue>();
			ordlist.add(new KeyAndValue(Permit.ID, "desc"));
			PagerList<Permit> pagerlist = svcb.pagerListPermit(pagenumber, pagesize, keyword, sqlin, params, ordlist);
			if (pagerlist.getPager().getRecordsSize() == 0 && pagerlist.getPager().getPages() != 0
					&& pagerlist.getPager().getCurrent() > pagerlist.getPager().getPages()) {
				String url = Common.getBasePath() + pagename + "?" + qs + "pn=" + pagerlist.getPager().getPages();
				mv.addObject("jumpto", url);
				// System.out.println("Test.PermitGET()url=" + url);
				mv.setViewName("jumperatonce");
			} else {
				// Pager<Permit> pager = new Pager<Permit>(page);
				// System.out.println("Test.PermitGET()pager=" + pager.toString());
				mv.addObject("qs", qs);
				mv.addObject("pager", pagerlist.getPager());
				mv.addObject("list", pagerlist.getList());
				mv.setViewName(pagename);
			}
		}

		return mv;

	}

	// TODO: POST-permit
	@RequestMapping(value = { "/permit", "/permit/", "/permit/index.html" }, method = RequestMethod.POST)
	public ModelAndView permitPOST(ModelAndView mv, HttpServletRequest request, HttpSession session) throws Exception {

		System.out.println(this.getClass().getName() + "POST");
		String pagename = "admin/permit";
		UserShiro userShiro = (UserShiro) SecurityUtils.getSubject().getPrincipal();
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		String operate = request.getParameter("operate");
		// --------编辑修改共有的部分---------
		String target = "";
		if (!StringUtils.isBlank(request.getParameter("target"))) {
			target = request.getParameter("target");
		}
		target = Util.restrictLength(target, 45);
		String operation = "";
		if (!StringUtils.isBlank(request.getParameter("operation"))) {
			operation = request.getParameter("operation");
		}
		operation = Util.restrictLength(operation, 45);
		String name = "";
		if (!StringUtils.isBlank(request.getParameter("name"))) {
			name = request.getParameter("name");
		}
		name = Util.restrictLength(name, 45);
		String code = "";
		if (!StringUtils.isBlank(request.getParameter("code"))) {
			code = request.getParameter("code");
		}
		code = Util.restrictLength(code, 45);
		// --------编辑修改共有的部分-结束---------
		// Integer create_userid = userShiro.getId();
		// 来源页面
		String referer = request.getParameter("referer");
		switch (operate) {
		case "addform": {

			// String password_digest = DigestUtils.md5Hex(password);
			// Integer sortid = (int) Math.round(svcb.maxPermit(Permit.SORTID)) + 1;
			Permit it = new Permit(target, operation, name, code, userShiro.getId(), 0);

			// ----------保存前检查逻辑问题---------------
			// 如：用户名必须唯一，手机号必须唯一
			Map<String, Object> params = new HashMap<String, Object>();
			// params.put(Permit.ID, id);
			List<Permit> list = svcb.listPermitByMap(params);
			if (StringUtils.isBlank("") || StringUtils.isBlank("")) {

				mv.addObject("message", "你输入的信息没有通过星际外交部的严格审核，请重新输入！");
				mv.addObject("jumpto", pagename);
				mv.setViewName("jumperback");
				return mv;
			} else if (list.size() > 0) {

				// 输入内容中，有些内容要求值唯一！
				mv.addObject("message", "你输入的信息已经被外星人抢先注册！");
				mv.addObject("jumpto", pagename);
				mv.setViewName("jumperback");
				return mv;
			} else {

				svcb.savePermit(it);
			}
			// ----------保存前检查逻辑问题结束------------

			mv.addObject("message", "信息已经保存！");
		}
			break;
		case "editform": {
			Integer id = 0;
			if (!StringUtils.isBlank(request.getParameter("id"))) {
				id = Integer.parseInt(request.getParameter("id"));
			}
			// update_gmt = sdf.parse(request.getParameter("update_gmt_date")).getTime();
			// String password_digest = DigestUtils.md5Hex(password);

			// ----------保存前检查逻辑上是否有冲突---------------
			// 如：用户名必须唯一，手机号必须唯一
			Map<String, Object> params = new HashMap<String, Object>();
			params.put(Permit.ID, id);
			List<Permit> list = svcb.listPermitByMap(params);
			if (list.size() > 1 || (list.size() == 1 && list.get(0).getId() != id)) {

				mv.addObject("message", "你输入的手机号码已经被外星人抢先注册！");
				mv.addObject("jumpto", pagename);
				mv.setViewName("jumperback");
				return mv;
			} else {
				svcb.updatePermitById(target, operation, name, code, userShiro.getId(), new Date().getTime(), id);

			}
			// ----------保存前检查逻辑问题结束------------

			mv.addObject("message", "信息已经修改！");

		}
			break;

		default:
			System.out.println(this.getClass().getName() + "没有对应的operate=" + operate);
			break;
		}

		mv.addObject("jumpto", referer);
		mv.setViewName("jumper");

		return mv;
	}

	// TODO: GET-role
	@RequestMapping(value = { "/role", "/role/", "/role/index.html" }, method = RequestMethod.GET)
	public ModelAndView roleGET(ModelAndView mv, @RequestParam(value = "kw", required = false) String kw,
			@RequestParam(value = "clrkw", required = false) String clrkw,
			@RequestParam(value = "operate", required = false) String operate,
			@RequestParam(value = "pn", required = false) Integer pn,
			@RequestParam(value = "ps", required = false) Integer ps,
			@RequestParam(value = "id", required = false) Integer id, HttpServletRequest request, HttpSession session) {
		logger.info(this.getClass().getName());
		System.out.println(this.getClass().getName() + ",operate=" + operate + ",id=" + id + ",pn=" + pn + ",ps=" + ps
				+ ",kw=" + kw + ",clrkw=" + clrkw);
		mv.addObject("navitem", "Role");// 菜单项显示当前项
		String pagename = "test/role";
		// 新增和编辑，列表页面筛选也需要使用，页面部分都有一些预先读取的内容
		if (StringUtils.isBlank(operate) || operate.equals("add") || operate.equals("edit")) {
			// 新建、编辑、列表的条件筛选
			// 用于制作彩色的标签
			mv.addObject("tagpostfixlist", Common.tagPostfix);
		}
		// 新增和编辑，列表页面筛选也需要使用，页面部分都有一些预先读取的内容
		if (!StringUtils.isBlank(operate)) {
			// 操作不为空，增删改
			mv.addObject("operate", operate);
			switch (operate) {
			case "add": {
				mv.addObject("pagetitle", "管理角色表");
				mv.addObject("subtitle", "新增角色表");
				mv.addObject("formtitle", "新增角色表");
				mv.addObject("pagename", pagename);
				// 默认作者是当前用户
				UserShiro userShiro = (UserShiro) SecurityUtils.getSubject().getPrincipal();
				mv.addObject("author", userShiro.getLogin_name());
				// 默认置顶3天
				Calendar calendar = Calendar.getInstance();
				calendar.add(Calendar.DATE, 3);
				SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
				String toptill_date = sdf.format(new Date(calendar.getTimeInMillis()));
				mv.addObject("toptill_date", toptill_date);
				// 默认头像
				mv.addObject("wechat_headimgurl", Common.userheadimgurl);
				mv.setViewName(pagename);
			}
				break;
			case "edit": {

				mv.addObject("pagetitle", "管理角色表");
				mv.addObject("subtitle", "修改角色表");
				mv.addObject("formtitle", "修改角色表");
				mv.addObject("pagename", pagename);
				mv.addObject("referer", Common.getRefererUrl());

				// 读取当前已有信息
				Role it = svcb.getRoleById(id);
				// 修正信息：如默认头像
				mv.addObject("it", it);
				mv.setViewName(pagename);
			}
				break;
			case "delete": {

				boolean rtv = false;
				try {
					rtv = svcb.removeRoleById(id);
				} catch (Exception e) {
					e.printStackTrace();
				}
				if (rtv) {

					mv.addObject("message", "信息已经删除！");
					mv.addObject("jumpto", Common.getRefererUrl());
					mv.setViewName("jumper");
				} else {

					mv.addObject("message", "删除操作被外星人强行终止！");
					mv.addObject("jumpto", Common.getRefererUrl());
					mv.setViewName("jumperclick");
				}
			}
				break;
			case "hideitem":
			case "showitem": {
				UserShiro userShiro = (UserShiro) SecurityUtils.getSubject().getPrincipal();
				// svcb.updateRoleById(operate, id);
				mv.addObject("jumpto", Common.getRefererUrl());
				mv.setViewName("jumperatonce");
			}
				break;

			default: {

			}
				break;
			}
		} else {
			// 操作为空,默认为搜索,显示列表
			String qs = "";
			Integer pagenumber = Common.recordToSession(session, "pagenumber", pn + "", 1);
			Integer pagesize = Common.recordToSession(session, "pagesize", ps + "", 10);
			String keyword = Util.replaceSqlChar(kw);
			keyword = Common.recordToSession(session, "keyword_role", keyword, "");
			// 清除搜索条件
			if (!StringUtils.isBlank(clrkw)) {
				session.removeAttribute("keyword_role");
				keyword = null;
			}

			// 读取url中是否包含筛选条件
			Map<String, String> sqlin = new HashMap<String, String>();

			mv.addObject("pagetitle", "管理角色表");
			mv.addObject("subtitle", "分页列表");
			mv.addObject("tabletitle", "管理");
			mv.addObject("pagename", pagename);// 当前页面的url

			if (!StringUtils.isBlank(keyword)) {
				mv.addObject("kw", keyword);
				qs += "kw=" + keyword + "&";
			}
			mv.addObject("qs", qs);

			// 在列表中需要筛选的条件
			Map<String, Object> params = new HashMap<String, Object>();
			// params.put(Role.ID, 0);
			// params.put(Role.NAME, 0);// 筛选条件1
			List<KeyAndValue> ordlist = new ArrayList<KeyAndValue>();
			ordlist.add(new KeyAndValue(Role.ID, "desc"));
			PagerList<Role> pagerlist = svcb.pagerListRole(pagenumber, pagesize, keyword, sqlin, params, ordlist);
			if (pagerlist.getPager().getRecordsSize() == 0 && pagerlist.getPager().getPages() != 0
					&& pagerlist.getPager().getCurrent() > pagerlist.getPager().getPages()) {
				String url = Common.getBasePath() + pagename + "?" + qs + "pn=" + pagerlist.getPager().getPages();
				mv.addObject("jumpto", url);
				// System.out.println("Test.RoleGET()url=" + url);
				mv.setViewName("jumperatonce");
			} else {
				// Pager<Role> pager = new Pager<Role>(page);
				// System.out.println("Test.RoleGET()pager=" + pager.toString());
				mv.addObject("qs", qs);
				mv.addObject("pager", pagerlist.getPager());
				mv.addObject("list", pagerlist.getList());
				mv.setViewName(pagename);
			}
		}

		return mv;

	}

	// TODO: POST-role
	@RequestMapping(value = { "/role", "/role/", "/role/index.html" }, method = RequestMethod.POST)
	public ModelAndView rolePOST(ModelAndView mv, HttpServletRequest request, HttpSession session) throws Exception {

		System.out.println(this.getClass().getName() + "POST");
		String pagename = "admin/role";
		UserShiro userShiro = (UserShiro) SecurityUtils.getSubject().getPrincipal();
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		String operate = request.getParameter("operate");
		// --------编辑修改共有的部分---------
		String name = "";
		if (!StringUtils.isBlank(request.getParameter("name"))) {
			name = request.getParameter("name");
		}
		name = Util.restrictLength(name, 64);
		String alias = "";
		if (!StringUtils.isBlank(request.getParameter("alias"))) {
			alias = request.getParameter("alias");
		}
		alias = Util.restrictLength(alias, 64);
		Boolean is_system = StringUtils.isBlank(request.getParameter("is_system")) ? false : true;
		Boolean is_actived = StringUtils.isBlank(request.getParameter("is_actived")) ? false : true;
		String remark = "";
		if (!StringUtils.isBlank(request.getParameter("remark"))) {
			remark = request.getParameter("remark");
		}
		remark = Util.restrictLength(remark, 255);
		// --------编辑修改共有的部分-结束---------
		// Integer create_userid = userShiro.getId();
		// 来源页面
		String referer = request.getParameter("referer");
		switch (operate) {
		case "addform": {

			// String password_digest = DigestUtils.md5Hex(password);
			// Integer sortid = (int) Math.round(svcb.maxRole(Role.SORTID)) + 1;
			Role it = new Role(name, alias, is_system, is_actived, remark, userShiro.getId(), 0);

			// ----------保存前检查逻辑问题---------------
			// 如：用户名必须唯一，手机号必须唯一
			Map<String, Object> params = new HashMap<String, Object>();
			// params.put(Role.ID, id);
			List<Role> list = svcb.listRoleByMap(params);
			if (StringUtils.isBlank("") || StringUtils.isBlank("")) {

				mv.addObject("message", "你输入的信息没有通过星际外交部的严格审核，请重新输入！");
				mv.addObject("jumpto", pagename);
				mv.setViewName("jumperback");
				return mv;
			} else if (list.size() > 0) {

				// 输入内容中，有些内容要求值唯一！
				mv.addObject("message", "你输入的信息已经被外星人抢先注册！");
				mv.addObject("jumpto", pagename);
				mv.setViewName("jumperback");
				return mv;
			} else {

				svcb.saveRole(it);
			}
			// ----------保存前检查逻辑问题结束------------

			mv.addObject("message", "信息已经保存！");
		}
			break;
		case "editform": {
			Integer id = 0;
			if (!StringUtils.isBlank(request.getParameter("id"))) {
				id = Integer.parseInt(request.getParameter("id"));
			}
			// update_gmt = sdf.parse(request.getParameter("update_gmt_date")).getTime();
			// String password_digest = DigestUtils.md5Hex(password);

			// ----------保存前检查逻辑上是否有冲突---------------
			// 如：用户名必须唯一，手机号必须唯一
			Map<String, Object> params = new HashMap<String, Object>();
			params.put(Role.ID, id);
			List<Role> list = svcb.listRoleByMap(params);
			if (list.size() > 1 || (list.size() == 1 && list.get(0).getId() != id)) {

				mv.addObject("message", "你输入的手机号码已经被外星人抢先注册！");
				mv.addObject("jumpto", pagename);
				mv.setViewName("jumperback");
				return mv;
			} else {
				svcb.updateRoleById(name, alias, is_system, is_actived, remark, userShiro.getId(), new Date().getTime(),
						id);

			}
			// ----------保存前检查逻辑问题结束------------

			mv.addObject("message", "信息已经修改！");

		}
			break;

		default:
			System.out.println(this.getClass().getName() + "没有对应的operate=" + operate);
			break;
		}

		mv.addObject("jumpto", referer);
		mv.setViewName("jumper");

		return mv;
	}

	// TODO: GET-statistic
	@RequestMapping(value = { "/statistic", "/statistic/", "/statistic/index.html" }, method = RequestMethod.GET)
	public ModelAndView statisticGET(ModelAndView mv, @RequestParam(value = "kw", required = false) String kw,
			@RequestParam(value = "clrkw", required = false) String clrkw,
			@RequestParam(value = "operate", required = false) String operate,
			@RequestParam(value = "pn", required = false) Integer pn,
			@RequestParam(value = "ps", required = false) Integer ps,
			@RequestParam(value = "id", required = false) Integer id, HttpServletRequest request, HttpSession session) {
		logger.info(this.getClass().getName());
		System.out.println(this.getClass().getName() + ",operate=" + operate + ",id=" + id + ",pn=" + pn + ",ps=" + ps
				+ ",kw=" + kw + ",clrkw=" + clrkw);
		mv.addObject("navitem", "Statistic");// 菜单项显示当前项
		String pagename = "test/statistic";
		// 新增和编辑，列表页面筛选也需要使用，页面部分都有一些预先读取的内容
		if (StringUtils.isBlank(operate) || operate.equals("add") || operate.equals("edit")) {
			// 新建、编辑、列表的条件筛选
			// 用于制作彩色的标签
			mv.addObject("tagpostfixlist", Common.tagPostfix);
		}
		// 新增和编辑，列表页面筛选也需要使用，页面部分都有一些预先读取的内容
		if (!StringUtils.isBlank(operate)) {
			// 操作不为空，增删改
			mv.addObject("operate", operate);
			switch (operate) {
			case "add": {
				mv.addObject("pagetitle", "管理");
				mv.addObject("subtitle", "新增");
				mv.addObject("formtitle", "新增");
				mv.addObject("pagename", pagename);
				// 默认作者是当前用户
				UserShiro userShiro = (UserShiro) SecurityUtils.getSubject().getPrincipal();
				mv.addObject("author", userShiro.getLogin_name());
				// 默认置顶3天
				Calendar calendar = Calendar.getInstance();
				calendar.add(Calendar.DATE, 3);
				SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
				String toptill_date = sdf.format(new Date(calendar.getTimeInMillis()));
				mv.addObject("toptill_date", toptill_date);
				// 默认头像
				mv.addObject("wechat_headimgurl", Common.userheadimgurl);
				mv.setViewName(pagename);
			}
				break;
			case "edit": {

				mv.addObject("pagetitle", "管理");
				mv.addObject("subtitle", "修改");
				mv.addObject("formtitle", "修改");
				mv.addObject("pagename", pagename);
				mv.addObject("referer", Common.getRefererUrl());

				// 读取当前已有信息
				Statistic it = svcb.getStatisticById(id);
				// 修正信息：如默认头像
				mv.addObject("it", it);
				mv.setViewName(pagename);
			}
				break;
			case "delete": {

				boolean rtv = false;
				try {
					rtv = svcb.removeStatisticById(id);
				} catch (Exception e) {
					e.printStackTrace();
				}
				if (rtv) {

					mv.addObject("message", "信息已经删除！");
					mv.addObject("jumpto", Common.getRefererUrl());
					mv.setViewName("jumper");
				} else {

					mv.addObject("message", "删除操作被外星人强行终止！");
					mv.addObject("jumpto", Common.getRefererUrl());
					mv.setViewName("jumperclick");
				}
			}
				break;
			case "hideitem":
			case "showitem": {
				UserShiro userShiro = (UserShiro) SecurityUtils.getSubject().getPrincipal();
				// svcb.updateStatisticById(operate, id);
				mv.addObject("jumpto", Common.getRefererUrl());
				mv.setViewName("jumperatonce");
			}
				break;

			default: {

			}
				break;
			}
		} else {
			// 操作为空,默认为搜索,显示列表
			String qs = "";
			Integer pagenumber = Common.recordToSession(session, "pagenumber", pn + "", 1);
			Integer pagesize = Common.recordToSession(session, "pagesize", ps + "", 10);
			String keyword = Util.replaceSqlChar(kw);
			keyword = Common.recordToSession(session, "keyword_statistic", keyword, "");
			// 清除搜索条件
			if (!StringUtils.isBlank(clrkw)) {
				session.removeAttribute("keyword_statistic");
				keyword = null;
			}

			// 读取url中是否包含筛选条件
			Map<String, String> sqlin = new HashMap<String, String>();

			mv.addObject("pagetitle", "管理");
			mv.addObject("subtitle", "分页列表");
			mv.addObject("tabletitle", "管理");
			mv.addObject("pagename", pagename);// 当前页面的url

			if (!StringUtils.isBlank(keyword)) {
				mv.addObject("kw", keyword);
				qs += "kw=" + keyword + "&";
			}
			mv.addObject("qs", qs);

			// 在列表中需要筛选的条件
			Map<String, Object> params = new HashMap<String, Object>();
			// params.put(Statistic.ID, 0);
			// params.put(Statistic.ST_DATE, 0);// 筛选条件1
			List<KeyAndValue> ordlist = new ArrayList<KeyAndValue>();
			ordlist.add(new KeyAndValue(Statistic.ID, "desc"));
			PagerList<Statistic> pagerlist = svcb.pagerListStatistic(pagenumber, pagesize, keyword, sqlin, params,
					ordlist);
			if (pagerlist.getPager().getRecordsSize() == 0 && pagerlist.getPager().getPages() != 0
					&& pagerlist.getPager().getCurrent() > pagerlist.getPager().getPages()) {
				String url = Common.getBasePath() + pagename + "?" + qs + "pn=" + pagerlist.getPager().getPages();
				mv.addObject("jumpto", url);
				// System.out.println("Test.StatisticGET()url=" + url);
				mv.setViewName("jumperatonce");
			} else {
				// Pager<Statistic> pager = new Pager<Statistic>(page);
				// System.out.println("Test.StatisticGET()pager=" + pager.toString());
				mv.addObject("qs", qs);
				mv.addObject("pager", pagerlist.getPager());
				mv.addObject("list", pagerlist.getList());
				mv.setViewName(pagename);
			}
		}

		return mv;

	}

	// TODO: POST-statistic
	@RequestMapping(value = { "/statistic", "/statistic/", "/statistic/index.html" }, method = RequestMethod.POST)
	public ModelAndView statisticPOST(ModelAndView mv, HttpServletRequest request, HttpSession session)
			throws Exception {

		System.out.println(this.getClass().getName() + "POST");
		String pagename = "admin/statistic";
		UserShiro userShiro = (UserShiro) SecurityUtils.getSubject().getPrincipal();
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		String operate = request.getParameter("operate");
		// --------编辑修改共有的部分---------
		String st_date = "";
		if (!StringUtils.isBlank(request.getParameter("st_date"))) {
			st_date = request.getParameter("st_date");
		}
		st_date = Util.restrictLength(st_date, 8);
		Integer st_total = 0;
		if (!StringUtils.isBlank(request.getParameter("st_total"))) {
			st_total = Integer.parseInt(request.getParameter("st_total"));
		}
		Integer st_today = 0;
		if (!StringUtils.isBlank(request.getParameter("st_today"))) {
			st_today = Integer.parseInt(request.getParameter("st_today"));
		}
		// --------编辑修改共有的部分-结束---------
		// Integer create_userid = userShiro.getId();
		// 来源页面
		String referer = request.getParameter("referer");
		switch (operate) {
		case "addform": {

			// String password_digest = DigestUtils.md5Hex(password);
			// Integer sortid = (int) Math.round(svcb.maxStatistic(Statistic.SORTID)) + 1;
			Statistic it = new Statistic(st_date, st_total, st_today);

			// ----------保存前检查逻辑问题---------------
			// 如：用户名必须唯一，手机号必须唯一
			Map<String, Object> params = new HashMap<String, Object>();
			// params.put(Statistic.ID, id);
			List<Statistic> list = svcb.listStatisticByMap(params);
			if (StringUtils.isBlank("") || StringUtils.isBlank("")) {

				mv.addObject("message", "你输入的信息没有通过星际外交部的严格审核，请重新输入！");
				mv.addObject("jumpto", pagename);
				mv.setViewName("jumperback");
				return mv;
			} else if (list.size() > 0) {

				// 输入内容中，有些内容要求值唯一！
				mv.addObject("message", "你输入的信息已经被外星人抢先注册！");
				mv.addObject("jumpto", pagename);
				mv.setViewName("jumperback");
				return mv;
			} else {

				svcb.saveStatistic(it);
			}
			// ----------保存前检查逻辑问题结束------------

			mv.addObject("message", "信息已经保存！");
		}
			break;
		case "editform": {
			Integer id = 0;
			if (!StringUtils.isBlank(request.getParameter("id"))) {
				id = Integer.parseInt(request.getParameter("id"));
			}
			// update_gmt = sdf.parse(request.getParameter("update_gmt_date")).getTime();
			// String password_digest = DigestUtils.md5Hex(password);

			// ----------保存前检查逻辑上是否有冲突---------------
			// 如：用户名必须唯一，手机号必须唯一
			Map<String, Object> params = new HashMap<String, Object>();
			params.put(Statistic.ID, id);
			List<Statistic> list = svcb.listStatisticByMap(params);
			if (list.size() > 1 || (list.size() == 1 && list.get(0).getId() != id)) {

				mv.addObject("message", "你输入的手机号码已经被外星人抢先注册！");
				mv.addObject("jumpto", pagename);
				mv.setViewName("jumperback");
				return mv;
			} else {
				svcb.updateStatisticById(st_date, st_total, st_today, id);

			}
			// ----------保存前检查逻辑问题结束------------

			mv.addObject("message", "信息已经修改！");

		}
			break;

		default:
			System.out.println(this.getClass().getName() + "没有对应的operate=" + operate);
			break;
		}

		mv.addObject("jumpto", referer);
		mv.setViewName("jumper");

		return mv;
	}

	// TODO: GET-student
	@RequestMapping(value = { "/student", "/student/", "/student/index.html" }, method = RequestMethod.GET)
	public ModelAndView studentGET(ModelAndView mv, @RequestParam(value = "kw", required = false) String kw,
			@RequestParam(value = "clrkw", required = false) String clrkw,
			@RequestParam(value = "operate", required = false) String operate,
			@RequestParam(value = "pn", required = false) Integer pn,
			@RequestParam(value = "ps", required = false) Integer ps,
			@RequestParam(value = "id", required = false) Integer id, HttpServletRequest request, HttpSession session) {
		logger.info(this.getClass().getName());
		System.out.println(this.getClass().getName() + ",operate=" + operate + ",id=" + id + ",pn=" + pn + ",ps=" + ps
				+ ",kw=" + kw + ",clrkw=" + clrkw);
		mv.addObject("navitem", "Student");// 菜单项显示当前项
		String pagename = "test/student";
		// 新增和编辑，列表页面筛选也需要使用，页面部分都有一些预先读取的内容
		if (StringUtils.isBlank(operate) || operate.equals("add") || operate.equals("edit")) {
			// 新建、编辑、列表的条件筛选
			// 用于制作彩色的标签
			mv.addObject("tagpostfixlist", Common.tagPostfix);
		}
		// 新增和编辑，列表页面筛选也需要使用，页面部分都有一些预先读取的内容
		if (!StringUtils.isBlank(operate)) {
			// 操作不为空，增删改
			mv.addObject("operate", operate);
			switch (operate) {
			case "add": {
				mv.addObject("pagetitle", "管理普通用户/学生");
				mv.addObject("subtitle", "新增普通用户/学生");
				mv.addObject("formtitle", "新增普通用户/学生");
				mv.addObject("pagename", pagename);
				// 默认作者是当前用户
				UserShiro userShiro = (UserShiro) SecurityUtils.getSubject().getPrincipal();
				mv.addObject("author", userShiro.getLogin_name());
				// 默认置顶3天
				Calendar calendar = Calendar.getInstance();
				calendar.add(Calendar.DATE, 3);
				SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
				String toptill_date = sdf.format(new Date(calendar.getTimeInMillis()));
				mv.addObject("toptill_date", toptill_date);
				// 默认头像
				mv.addObject("wechat_headimgurl", Common.userheadimgurl);
				mv.setViewName(pagename);
			}
				break;
			case "edit": {

				mv.addObject("pagetitle", "管理普通用户/学生");
				mv.addObject("subtitle", "修改普通用户/学生");
				mv.addObject("formtitle", "修改普通用户/学生");
				mv.addObject("pagename", pagename);
				mv.addObject("referer", Common.getRefererUrl());

				// 读取当前已有信息
				Student it = svcb.getStudentById(id);
				// 修正信息：如默认头像
				mv.addObject("it", it);
				mv.setViewName(pagename);
			}
				break;
			case "delete": {

				boolean rtv = false;
				try {
					rtv = svcb.removeStudentById(id);
				} catch (Exception e) {
					e.printStackTrace();
				}
				if (rtv) {

					mv.addObject("message", "信息已经删除！");
					mv.addObject("jumpto", Common.getRefererUrl());
					mv.setViewName("jumper");
				} else {

					mv.addObject("message", "删除操作被外星人强行终止！");
					mv.addObject("jumpto", Common.getRefererUrl());
					mv.setViewName("jumperclick");
				}
			}
				break;
			case "hideitem":
			case "showitem": {
				UserShiro userShiro = (UserShiro) SecurityUtils.getSubject().getPrincipal();
				// svcb.updateStudentById(operate, id);
				mv.addObject("jumpto", Common.getRefererUrl());
				mv.setViewName("jumperatonce");
			}
				break;

			default: {

			}
				break;
			}
		} else {
			// 操作为空,默认为搜索,显示列表
			String qs = "";
			Integer pagenumber = Common.recordToSession(session, "pagenumber", pn + "", 1);
			Integer pagesize = Common.recordToSession(session, "pagesize", ps + "", 10);
			String keyword = Util.replaceSqlChar(kw);
			keyword = Common.recordToSession(session, "keyword_student", keyword, "");
			// 清除搜索条件
			if (!StringUtils.isBlank(clrkw)) {
				session.removeAttribute("keyword_student");
				keyword = null;
			}

			// 读取url中是否包含筛选条件
			Map<String, String> sqlin = new HashMap<String, String>();

			mv.addObject("pagetitle", "管理普通用户/学生");
			mv.addObject("subtitle", "分页列表");
			mv.addObject("tabletitle", "管理");
			mv.addObject("pagename", pagename);// 当前页面的url

			if (!StringUtils.isBlank(keyword)) {
				mv.addObject("kw", keyword);
				qs += "kw=" + keyword + "&";
			}
			mv.addObject("qs", qs);

			// 在列表中需要筛选的条件
			Map<String, Object> params = new HashMap<String, Object>();
			// params.put(Student.ID, 0);
			// params.put(Student.SNO, 0);// 筛选条件1
			List<KeyAndValue> ordlist = new ArrayList<KeyAndValue>();
			ordlist.add(new KeyAndValue(Student.ID, "desc"));
			PagerList<Student> pagerlist = svcb.pagerListStudent(pagenumber, pagesize, keyword, sqlin, params, ordlist);
			if (pagerlist.getPager().getRecordsSize() == 0 && pagerlist.getPager().getPages() != 0
					&& pagerlist.getPager().getCurrent() > pagerlist.getPager().getPages()) {
				String url = Common.getBasePath() + pagename + "?" + qs + "pn=" + pagerlist.getPager().getPages();
				mv.addObject("jumpto", url);
				// System.out.println("Test.StudentGET()url=" + url);
				mv.setViewName("jumperatonce");
			} else {
				// Pager<Student> pager = new Pager<Student>(page);
				// System.out.println("Test.StudentGET()pager=" + pager.toString());
				mv.addObject("qs", qs);
				mv.addObject("pager", pagerlist.getPager());
				mv.addObject("list", pagerlist.getList());
				mv.setViewName(pagename);
			}
		}

		return mv;

	}

	// TODO: POST-student
	@RequestMapping(value = { "/student", "/student/", "/student/index.html" }, method = RequestMethod.POST)
	public ModelAndView studentPOST(ModelAndView mv, HttpServletRequest request, HttpSession session) throws Exception {

		System.out.println(this.getClass().getName() + "POST");
		String pagename = "admin/student";
		UserShiro userShiro = (UserShiro) SecurityUtils.getSubject().getPrincipal();
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		String operate = request.getParameter("operate");
		// --------编辑修改共有的部分---------
		String sno = "";
		if (!StringUtils.isBlank(request.getParameter("sno"))) {
			sno = request.getParameter("sno");
		}
		sno = Util.restrictLength(sno, 10);
		String login_name = "";
		if (!StringUtils.isBlank(request.getParameter("login_name"))) {
			login_name = request.getParameter("login_name");
		}
		login_name = Util.restrictLength(login_name, 45);
		String login_name_digest = "";
		if (!StringUtils.isBlank(request.getParameter("login_name_digest"))) {
			login_name_digest = request.getParameter("login_name_digest");
		}
		login_name_digest = Util.restrictLength(login_name_digest, 50);
		String login_password = "";
		if (!StringUtils.isBlank(request.getParameter("login_password"))) {
			login_password = request.getParameter("login_password");
		}
		login_password = Util.restrictLength(login_password, 50);
		String login_password_digest = "";
		if (!StringUtils.isBlank(request.getParameter("login_password_digest"))) {
			login_password_digest = request.getParameter("login_password_digest");
		}
		login_password_digest = Util.restrictLength(login_password_digest, 50);
		String name = "";
		if (!StringUtils.isBlank(request.getParameter("name"))) {
			name = request.getParameter("name");
		}
		name = Util.restrictLength(name, 20);
		String email = "";
		if (!StringUtils.isBlank(request.getParameter("email"))) {
			email = request.getParameter("email");
		}
		email = Util.restrictLength(email, 50);
		Boolean is_actived = StringUtils.isBlank(request.getParameter("is_actived")) ? false : true;
		String mobile = "";
		if (!StringUtils.isBlank(request.getParameter("mobile"))) {
			mobile = request.getParameter("mobile");
		}
		mobile = Util.restrictLength(mobile, 50);
		String qq = "";
		if (!StringUtils.isBlank(request.getParameter("qq"))) {
			qq = request.getParameter("qq");
		}
		qq = Util.restrictLength(qq, 50);
		String wechat_openid = "";
		if (!StringUtils.isBlank(request.getParameter("wechat_openid"))) {
			wechat_openid = request.getParameter("wechat_openid");
		}
		wechat_openid = Util.restrictLength(wechat_openid, 45);
		String wechat_nickname = "";
		if (!StringUtils.isBlank(request.getParameter("wechat_nickname"))) {
			wechat_nickname = request.getParameter("wechat_nickname");
		}
		wechat_nickname = Util.restrictLength(wechat_nickname, 45);
		String wechat_headimgurl = "";
		if (!StringUtils.isBlank(request.getParameter("wechat_headimgurl"))) {
			wechat_headimgurl = request.getParameter("wechat_headimgurl");
		}
		wechat_headimgurl = Util.restrictLength(wechat_headimgurl, 200);
		Integer login_method = 0;
		if (!StringUtils.isBlank(request.getParameter("login_method"))) {
			login_method = Integer.parseInt(request.getParameter("login_method"));
		}
		String classcode = "";
		if (!StringUtils.isBlank(request.getParameter("classcode"))) {
			classcode = request.getParameter("classcode");
		}
		classcode = Util.restrictLength(classcode, 8);
		// --------编辑修改共有的部分-结束---------
		// Integer create_userid = userShiro.getId();
		// 来源页面
		String referer = request.getParameter("referer");
		switch (operate) {
		case "addform": {

			// String password_digest = DigestUtils.md5Hex(password);
			// Integer sortid = (int) Math.round(svcb.maxStudent(Student.SORTID)) + 1;
			Student it = new Student(sno, login_name, login_name_digest, login_password, login_password_digest, name,
					email, is_actived, mobile, qq, wechat_openid, wechat_nickname, wechat_headimgurl, login_method,
					classcode);

			// ----------保存前检查逻辑问题---------------
			// 如：用户名必须唯一，手机号必须唯一
			Map<String, Object> params = new HashMap<String, Object>();
			// params.put(Student.ID, id);
			List<Student> list = svcb.listStudentByMap(params);
			if (StringUtils.isBlank("") || StringUtils.isBlank("")) {

				mv.addObject("message", "你输入的信息没有通过星际外交部的严格审核，请重新输入！");
				mv.addObject("jumpto", pagename);
				mv.setViewName("jumperback");
				return mv;
			} else if (list.size() > 0) {

				// 输入内容中，有些内容要求值唯一！
				mv.addObject("message", "你输入的信息已经被外星人抢先注册！");
				mv.addObject("jumpto", pagename);
				mv.setViewName("jumperback");
				return mv;
			} else {

				svcb.saveStudent(it);
			}
			// ----------保存前检查逻辑问题结束------------

			mv.addObject("message", "信息已经保存！");
		}
			break;
		case "editform": {
			Integer id = 0;
			if (!StringUtils.isBlank(request.getParameter("id"))) {
				id = Integer.parseInt(request.getParameter("id"));
			}
			// update_gmt = sdf.parse(request.getParameter("update_gmt_date")).getTime();
			// String password_digest = DigestUtils.md5Hex(password);

			// ----------保存前检查逻辑上是否有冲突---------------
			// 如：用户名必须唯一，手机号必须唯一
			Map<String, Object> params = new HashMap<String, Object>();
			params.put(Student.ID, id);
			List<Student> list = svcb.listStudentByMap(params);
			if (list.size() > 1 || (list.size() == 1 && list.get(0).getId() != id)) {

				mv.addObject("message", "你输入的手机号码已经被外星人抢先注册！");
				mv.addObject("jumpto", pagename);
				mv.setViewName("jumperback");
				return mv;
			} else {
				svcb.updateStudentById(sno, login_name, login_name_digest, login_password, login_password_digest, name,
						email, is_actived, mobile, qq, wechat_openid, wechat_nickname, wechat_headimgurl, login_method,
						classcode, new Date().getTime(), id);

			}
			// ----------保存前检查逻辑问题结束------------

			mv.addObject("message", "信息已经修改！");

		}
			break;

		default:
			System.out.println(this.getClass().getName() + "没有对应的operate=" + operate);
			break;
		}

		mv.addObject("jumpto", referer);
		mv.setViewName("jumper");

		return mv;
	}

	// TODO: GET-student_group
	@RequestMapping(value = { "/student_group", "/student_group/",
			"/student_group/index.html" }, method = RequestMethod.GET)
	public ModelAndView student_groupGET(ModelAndView mv, @RequestParam(value = "kw", required = false) String kw,
			@RequestParam(value = "clrkw", required = false) String clrkw,
			@RequestParam(value = "operate", required = false) String operate,
			@RequestParam(value = "pn", required = false) Integer pn,
			@RequestParam(value = "ps", required = false) Integer ps,
			@RequestParam(value = "id", required = false) Integer id, HttpServletRequest request, HttpSession session) {
		logger.info(this.getClass().getName());
		System.out.println(this.getClass().getName() + ",operate=" + operate + ",id=" + id + ",pn=" + pn + ",ps=" + ps
				+ ",kw=" + kw + ",clrkw=" + clrkw);
		mv.addObject("navitem", "Student_group");// 菜单项显示当前项
		String pagename = "test/student_group";
		// 新增和编辑，列表页面筛选也需要使用，页面部分都有一些预先读取的内容
		if (StringUtils.isBlank(operate) || operate.equals("add") || operate.equals("edit")) {
			// 新建、编辑、列表的条件筛选
			// 用于制作彩色的标签
			mv.addObject("tagpostfixlist", Common.tagPostfix);
		}
		// 新增和编辑，列表页面筛选也需要使用，页面部分都有一些预先读取的内容
		if (!StringUtils.isBlank(operate)) {
			// 操作不为空，增删改
			mv.addObject("operate", operate);
			switch (operate) {
			case "add": {
				mv.addObject("pagetitle", "管理学生分组信息，可以按学校分班，也可以相同班级合并");
				mv.addObject("subtitle", "新增学生分组信息，可以按学校分班，也可以相同班级合并");
				mv.addObject("formtitle", "新增学生分组信息，可以按学校分班，也可以相同班级合并");
				mv.addObject("pagename", pagename);
				// 默认作者是当前用户
				UserShiro userShiro = (UserShiro) SecurityUtils.getSubject().getPrincipal();
				mv.addObject("author", userShiro.getLogin_name());
				// 默认置顶3天
				Calendar calendar = Calendar.getInstance();
				calendar.add(Calendar.DATE, 3);
				SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
				String toptill_date = sdf.format(new Date(calendar.getTimeInMillis()));
				mv.addObject("toptill_date", toptill_date);
				// 默认头像
				mv.addObject("wechat_headimgurl", Common.userheadimgurl);
				mv.setViewName(pagename);
			}
				break;
			case "edit": {

				mv.addObject("pagetitle", "管理学生分组信息，可以按学校分班，也可以相同班级合并");
				mv.addObject("subtitle", "修改学生分组信息，可以按学校分班，也可以相同班级合并");
				mv.addObject("formtitle", "修改学生分组信息，可以按学校分班，也可以相同班级合并");
				mv.addObject("pagename", pagename);
				mv.addObject("referer", Common.getRefererUrl());

				// 读取当前已有信息
				Student_group it = svcb.getStudent_groupById(id);
				// 修正信息：如默认头像
				mv.addObject("it", it);
				mv.setViewName(pagename);
			}
				break;
			case "delete": {

				boolean rtv = false;
				try {
					rtv = svcb.removeStudent_groupById(id);
				} catch (Exception e) {
					e.printStackTrace();
				}
				if (rtv) {

					mv.addObject("message", "信息已经删除！");
					mv.addObject("jumpto", Common.getRefererUrl());
					mv.setViewName("jumper");
				} else {

					mv.addObject("message", "删除操作被外星人强行终止！");
					mv.addObject("jumpto", Common.getRefererUrl());
					mv.setViewName("jumperclick");
				}
			}
				break;
			case "hideitem":
			case "showitem": {
				UserShiro userShiro = (UserShiro) SecurityUtils.getSubject().getPrincipal();
				// svcb.updateStudent_groupById(operate, id);
				mv.addObject("jumpto", Common.getRefererUrl());
				mv.setViewName("jumperatonce");
			}
				break;

			default: {

			}
				break;
			}
		} else {
			// 操作为空,默认为搜索,显示列表
			String qs = "";
			Integer pagenumber = Common.recordToSession(session, "pagenumber", pn + "", 1);
			Integer pagesize = Common.recordToSession(session, "pagesize", ps + "", 10);
			String keyword = Util.replaceSqlChar(kw);
			keyword = Common.recordToSession(session, "keyword_student_group", keyword, "");
			// 清除搜索条件
			if (!StringUtils.isBlank(clrkw)) {
				session.removeAttribute("keyword_student_group");
				keyword = null;
			}

			// 读取url中是否包含筛选条件
			Map<String, String> sqlin = new HashMap<String, String>();

			mv.addObject("pagetitle", "管理学生分组信息，可以按学校分班，也可以相同班级合并");
			mv.addObject("subtitle", "分页列表");
			mv.addObject("tabletitle", "管理");
			mv.addObject("pagename", pagename);// 当前页面的url

			if (!StringUtils.isBlank(keyword)) {
				mv.addObject("kw", keyword);
				qs += "kw=" + keyword + "&";
			}
			mv.addObject("qs", qs);

			// 在列表中需要筛选的条件
			Map<String, Object> params = new HashMap<String, Object>();
			// params.put(Student_group.ID, 0);
			// params.put(Student_group.IS_ACTIVED, 0);// 筛选条件1
			List<KeyAndValue> ordlist = new ArrayList<KeyAndValue>();
			ordlist.add(new KeyAndValue(Student_group.ID, "desc"));
			PagerList<Student_group> pagerlist = svcb.pagerListStudent_group(pagenumber, pagesize, keyword, sqlin,
					params, ordlist);
			if (pagerlist.getPager().getRecordsSize() == 0 && pagerlist.getPager().getPages() != 0
					&& pagerlist.getPager().getCurrent() > pagerlist.getPager().getPages()) {
				String url = Common.getBasePath() + pagename + "?" + qs + "pn=" + pagerlist.getPager().getPages();
				mv.addObject("jumpto", url);
				// System.out.println("Test.Student_groupGET()url=" + url);
				mv.setViewName("jumperatonce");
			} else {
				// Pager<Student_group> pager = new Pager<Student_group>(page);
				// System.out.println("Test.Student_groupGET()pager=" + pager.toString());
				mv.addObject("qs", qs);
				mv.addObject("pager", pagerlist.getPager());
				mv.addObject("list", pagerlist.getList());
				mv.setViewName(pagename);
			}
		}

		return mv;

	}

	// TODO: POST-student_group
	@RequestMapping(value = { "/student_group", "/student_group/",
			"/student_group/index.html" }, method = RequestMethod.POST)
	public ModelAndView student_groupPOST(ModelAndView mv, HttpServletRequest request, HttpSession session)
			throws Exception {

		System.out.println(this.getClass().getName() + "POST");
		String pagename = "admin/student_group";
		UserShiro userShiro = (UserShiro) SecurityUtils.getSubject().getPrincipal();
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		String operate = request.getParameter("operate");
		// --------编辑修改共有的部分---------
		Boolean is_actived = StringUtils.isBlank(request.getParameter("is_actived")) ? false : true;
		String code = "";
		if (!StringUtils.isBlank(request.getParameter("code"))) {
			code = request.getParameter("code");
		}
		code = Util.restrictLength(code, 8);
		String name = "";
		if (!StringUtils.isBlank(request.getParameter("name"))) {
			name = request.getParameter("name");
		}
		name = Util.restrictLength(name, 45);
		// --------编辑修改共有的部分-结束---------
		// Integer create_userid = userShiro.getId();
		// 来源页面
		String referer = request.getParameter("referer");
		switch (operate) {
		case "addform": {

			// String password_digest = DigestUtils.md5Hex(password);
			// Integer sortid = (int)
			// Math.round(svcb.maxStudent_group(Student_group.SORTID)) + 1;
			Student_group it = new Student_group(is_actived, code, name);

			// ----------保存前检查逻辑问题---------------
			// 如：用户名必须唯一，手机号必须唯一
			Map<String, Object> params = new HashMap<String, Object>();
			// params.put(Student_group.ID, id);
			List<Student_group> list = svcb.listStudent_groupByMap(params);
			if (StringUtils.isBlank("") || StringUtils.isBlank("")) {

				mv.addObject("message", "你输入的信息没有通过星际外交部的严格审核，请重新输入！");
				mv.addObject("jumpto", pagename);
				mv.setViewName("jumperback");
				return mv;
			} else if (list.size() > 0) {

				// 输入内容中，有些内容要求值唯一！
				mv.addObject("message", "你输入的信息已经被外星人抢先注册！");
				mv.addObject("jumpto", pagename);
				mv.setViewName("jumperback");
				return mv;
			} else {

				svcb.saveStudent_group(it);
			}
			// ----------保存前检查逻辑问题结束------------

			mv.addObject("message", "信息已经保存！");
		}
			break;
		case "editform": {
			Integer id = 0;
			if (!StringUtils.isBlank(request.getParameter("id"))) {
				id = Integer.parseInt(request.getParameter("id"));
			}
			// update_gmt = sdf.parse(request.getParameter("update_gmt_date")).getTime();
			// String password_digest = DigestUtils.md5Hex(password);

			// ----------保存前检查逻辑上是否有冲突---------------
			// 如：用户名必须唯一，手机号必须唯一
			Map<String, Object> params = new HashMap<String, Object>();
			params.put(Student_group.ID, id);
			List<Student_group> list = svcb.listStudent_groupByMap(params);
			if (list.size() > 1 || (list.size() == 1 && list.get(0).getId() != id)) {

				mv.addObject("message", "你输入的手机号码已经被外星人抢先注册！");
				mv.addObject("jumpto", pagename);
				mv.setViewName("jumperback");
				return mv;
			} else {
				svcb.updateStudent_groupById(is_actived, code, name, new Date().getTime(), id);

			}
			// ----------保存前检查逻辑问题结束------------

			mv.addObject("message", "信息已经修改！");

		}
			break;

		default:
			System.out.println(this.getClass().getName() + "没有对应的operate=" + operate);
			break;
		}

		mv.addObject("jumpto", referer);
		mv.setViewName("jumper");

		return mv;
	}

	// TODO: GET-subject
	@RequestMapping(value = { "/subject", "/subject/", "/subject/index.html" }, method = RequestMethod.GET)
	public ModelAndView subjectGET(ModelAndView mv, @RequestParam(value = "kw", required = false) String kw,
			@RequestParam(value = "clrkw", required = false) String clrkw,
			@RequestParam(value = "operate", required = false) String operate,
			@RequestParam(value = "pn", required = false) Integer pn,
			@RequestParam(value = "ps", required = false) Integer ps,
			@RequestParam(value = "id", required = false) Integer id, HttpServletRequest request, HttpSession session) {
		logger.info(this.getClass().getName());
		System.out.println(this.getClass().getName() + ",operate=" + operate + ",id=" + id + ",pn=" + pn + ",ps=" + ps
				+ ",kw=" + kw + ",clrkw=" + clrkw);
		mv.addObject("navitem", "Subject");// 菜单项显示当前项
		String pagename = "test/subject";
		// 新增和编辑，列表页面筛选也需要使用，页面部分都有一些预先读取的内容
		if (StringUtils.isBlank(operate) || operate.equals("add") || operate.equals("edit")) {
			// 新建、编辑、列表的条件筛选
			// 用于制作彩色的标签
			mv.addObject("tagpostfixlist", Common.tagPostfix);
		}
		// 新增和编辑，列表页面筛选也需要使用，页面部分都有一些预先读取的内容
		if (!StringUtils.isBlank(operate)) {
			// 操作不为空，增删改
			mv.addObject("operate", operate);
			switch (operate) {
			case "add": {
				mv.addObject("pagetitle", "管理科目");
				mv.addObject("subtitle", "新增科目");
				mv.addObject("formtitle", "新增科目");
				mv.addObject("pagename", pagename);
				// 默认作者是当前用户
				UserShiro userShiro = (UserShiro) SecurityUtils.getSubject().getPrincipal();
				mv.addObject("author", userShiro.getLogin_name());
				// 默认置顶3天
				Calendar calendar = Calendar.getInstance();
				calendar.add(Calendar.DATE, 3);
				SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
				String toptill_date = sdf.format(new Date(calendar.getTimeInMillis()));
				mv.addObject("toptill_date", toptill_date);
				// 默认头像
				mv.addObject("wechat_headimgurl", Common.userheadimgurl);
				mv.setViewName(pagename);
			}
				break;
			case "edit": {

				mv.addObject("pagetitle", "管理科目");
				mv.addObject("subtitle", "修改科目");
				mv.addObject("formtitle", "修改科目");
				mv.addObject("pagename", pagename);
				mv.addObject("referer", Common.getRefererUrl());

				// 读取当前已有信息
				Subject it = svcb.getSubjectById(id);
				// 修正信息：如默认头像
				mv.addObject("it", it);
				mv.setViewName(pagename);
			}
				break;
			case "delete": {

				boolean rtv = false;
				try {
					rtv = svcb.removeSubjectById(id);
				} catch (Exception e) {
					e.printStackTrace();
				}
				if (rtv) {

					mv.addObject("message", "信息已经删除！");
					mv.addObject("jumpto", Common.getRefererUrl());
					mv.setViewName("jumper");
				} else {

					mv.addObject("message", "删除操作被外星人强行终止！");
					mv.addObject("jumpto", Common.getRefererUrl());
					mv.setViewName("jumperclick");
				}
			}
				break;
			case "hideitem":
			case "showitem": {
				UserShiro userShiro = (UserShiro) SecurityUtils.getSubject().getPrincipal();
				// svcb.updateSubjectById(operate, id);
				mv.addObject("jumpto", Common.getRefererUrl());
				mv.setViewName("jumperatonce");
			}
				break;
			case "moveup":
			case "movedown": {
				if (!svcb.moveSubject(operate, "movedown", id, Subject.SORTID)) {

					mv.addObject("message", "移动操作被外星人强行终止！");
					mv.addObject("jumpto", Common.getRefererUrl());
					mv.setViewName("jumperclick");
				} else {

					mv.addObject("jumpto", Common.getRefererUrl());
					mv.setViewName("jumperatonce");

				}
			}
				break;

			default: {

			}
				break;
			}
		} else {
			// 操作为空,默认为搜索,显示列表
			String qs = "";
			Integer pagenumber = Common.recordToSession(session, "pagenumber", pn + "", 1);
			Integer pagesize = Common.recordToSession(session, "pagesize", ps + "", 10);
			String keyword = Util.replaceSqlChar(kw);
			keyword = Common.recordToSession(session, "keyword_subject", keyword, "");
			// 清除搜索条件
			if (!StringUtils.isBlank(clrkw)) {
				session.removeAttribute("keyword_subject");
				keyword = null;
			}

			// 读取url中是否包含筛选条件
			Map<String, String> sqlin = new HashMap<String, String>();

			mv.addObject("pagetitle", "管理科目");
			mv.addObject("subtitle", "分页列表");
			mv.addObject("tabletitle", "管理");
			mv.addObject("pagename", pagename);// 当前页面的url

			if (!StringUtils.isBlank(keyword)) {
				mv.addObject("kw", keyword);
				qs += "kw=" + keyword + "&";
			}
			mv.addObject("qs", qs);

			// 在列表中需要筛选的条件
			Map<String, Object> params = new HashMap<String, Object>();
			// params.put(Subject.ID, 0);
			// params.put(Subject.IS_ACTIVED, 0);// 筛选条件1
			List<KeyAndValue> ordlist = new ArrayList<KeyAndValue>();
			ordlist.add(new KeyAndValue(Subject.ID, "desc"));
			PagerList<Subject> pagerlist = svcb.pagerListSubject(pagenumber, pagesize, keyword, sqlin, params, ordlist);
			if (pagerlist.getPager().getRecordsSize() == 0 && pagerlist.getPager().getPages() != 0
					&& pagerlist.getPager().getCurrent() > pagerlist.getPager().getPages()) {
				String url = Common.getBasePath() + pagename + "?" + qs + "pn=" + pagerlist.getPager().getPages();
				mv.addObject("jumpto", url);
				// System.out.println("Test.SubjectGET()url=" + url);
				mv.setViewName("jumperatonce");
			} else {
				// Pager<Subject> pager = new Pager<Subject>(page);
				// System.out.println("Test.SubjectGET()pager=" + pager.toString());
				mv.addObject("qs", qs);
				mv.addObject("pager", pagerlist.getPager());
				mv.addObject("list", pagerlist.getList());
				mv.setViewName(pagename);
			}
		}

		return mv;

	}

	// TODO: POST-subject
	@RequestMapping(value = { "/subject", "/subject/", "/subject/index.html" }, method = RequestMethod.POST)
	public ModelAndView subjectPOST(ModelAndView mv, HttpServletRequest request, HttpSession session) throws Exception {

		System.out.println(this.getClass().getName() + "POST");
		String pagename = "admin/subject";
		UserShiro userShiro = (UserShiro) SecurityUtils.getSubject().getPrincipal();
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		String operate = request.getParameter("operate");
		// --------编辑修改共有的部分---------
		Boolean is_actived = StringUtils.isBlank(request.getParameter("is_actived")) ? false : true;
		Integer sortid = 0;
		if (!StringUtils.isBlank(request.getParameter("sortid"))) {
			sortid = Integer.parseInt(request.getParameter("sortid"));
		}
		String intro = "";
		if (!StringUtils.isBlank(request.getParameter("intro"))) {
			intro = request.getParameter("intro");
		}
		intro = Util.restrictLength(intro, 255);
		String name = "";
		if (!StringUtils.isBlank(request.getParameter("name"))) {
			name = request.getParameter("name");
		}
		name = Util.restrictLength(name, 45);
		String illustration = "";
		if (!StringUtils.isBlank(request.getParameter("illustration"))) {
			illustration = request.getParameter("illustration");
		}
		illustration = Util.restrictLength(illustration, 45);
		// --------编辑修改共有的部分-结束---------
		// Integer create_userid = userShiro.getId();
		// 来源页面
		String referer = request.getParameter("referer");
		switch (operate) {
		case "addform": {

			// String password_digest = DigestUtils.md5Hex(password);
			// Integer sortid = (int) Math.round(svcb.maxSubject(Subject.SORTID)) + 1;
			Subject it = new Subject(is_actived, sortid, intro, name, illustration);

			// ----------保存前检查逻辑问题---------------
			// 如：用户名必须唯一，手机号必须唯一
			Map<String, Object> params = new HashMap<String, Object>();
			// params.put(Subject.ID, id);
			List<Subject> list = svcb.listSubjectByMap(params);
			if (StringUtils.isBlank("") || StringUtils.isBlank("")) {

				mv.addObject("message", "你输入的信息没有通过星际外交部的严格审核，请重新输入！");
				mv.addObject("jumpto", pagename);
				mv.setViewName("jumperback");
				return mv;
			} else if (list.size() > 0) {

				// 输入内容中，有些内容要求值唯一！
				mv.addObject("message", "你输入的信息已经被外星人抢先注册！");
				mv.addObject("jumpto", pagename);
				mv.setViewName("jumperback");
				return mv;
			} else {

				svcb.saveSubject(it);
			}
			// ----------保存前检查逻辑问题结束------------

			mv.addObject("message", "信息已经保存！");
		}
			break;
		case "editform": {
			Integer id = 0;
			if (!StringUtils.isBlank(request.getParameter("id"))) {
				id = Integer.parseInt(request.getParameter("id"));
			}
			// update_gmt = sdf.parse(request.getParameter("update_gmt_date")).getTime();
			// String password_digest = DigestUtils.md5Hex(password);

			// ----------保存前检查逻辑上是否有冲突---------------
			// 如：用户名必须唯一，手机号必须唯一
			Map<String, Object> params = new HashMap<String, Object>();
			params.put(Subject.ID, id);
			List<Subject> list = svcb.listSubjectByMap(params);
			if (list.size() > 1 || (list.size() == 1 && list.get(0).getId() != id)) {

				mv.addObject("message", "你输入的手机号码已经被外星人抢先注册！");
				mv.addObject("jumpto", pagename);
				mv.setViewName("jumperback");
				return mv;
			} else {
				svcb.updateSubjectById(is_actived, sortid, intro, name, illustration, new Date().getTime(), id);

			}
			// ----------保存前检查逻辑问题结束------------

			mv.addObject("message", "信息已经修改！");

		}
			break;

		default:
			System.out.println(this.getClass().getName() + "没有对应的operate=" + operate);
			break;
		}

		mv.addObject("jumpto", referer);
		mv.setViewName("jumper");

		return mv;
	}

	// TODO: GET-syslog
	@RequestMapping(value = { "/syslog", "/syslog/", "/syslog/index.html" }, method = RequestMethod.GET)
	public ModelAndView syslogGET(ModelAndView mv, @RequestParam(value = "kw", required = false) String kw,
			@RequestParam(value = "clrkw", required = false) String clrkw,
			@RequestParam(value = "operate", required = false) String operate,
			@RequestParam(value = "pn", required = false) Integer pn,
			@RequestParam(value = "ps", required = false) Integer ps,
			@RequestParam(value = "id", required = false) Integer id, HttpServletRequest request, HttpSession session) {
		logger.info(this.getClass().getName());
		System.out.println(this.getClass().getName() + ",operate=" + operate + ",id=" + id + ",pn=" + pn + ",ps=" + ps
				+ ",kw=" + kw + ",clrkw=" + clrkw);
		mv.addObject("navitem", "Syslog");// 菜单项显示当前项
		String pagename = "test/syslog";
		// 新增和编辑，列表页面筛选也需要使用，页面部分都有一些预先读取的内容
		if (StringUtils.isBlank(operate) || operate.equals("add") || operate.equals("edit")) {
			// 新建、编辑、列表的条件筛选
			// 用于制作彩色的标签
			mv.addObject("tagpostfixlist", Common.tagPostfix);
			mv.addObject("userlist", svcb.listUserOrderByAsc(User.ID));
			mv.addObject("usermap", svcb.mapUser());
		}
		// 新增和编辑，列表页面筛选也需要使用，页面部分都有一些预先读取的内容
		if (!StringUtils.isBlank(operate)) {
			// 操作不为空，增删改
			mv.addObject("operate", operate);
			switch (operate) {
			case "add": {
				mv.addObject("pagetitle", "管理日志记录表");
				mv.addObject("subtitle", "新增日志记录表");
				mv.addObject("formtitle", "新增日志记录表");
				mv.addObject("pagename", pagename);
				// 默认作者是当前用户
				UserShiro userShiro = (UserShiro) SecurityUtils.getSubject().getPrincipal();
				mv.addObject("author", userShiro.getLogin_name());
				// 默认置顶3天
				Calendar calendar = Calendar.getInstance();
				calendar.add(Calendar.DATE, 3);
				SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
				String toptill_date = sdf.format(new Date(calendar.getTimeInMillis()));
				mv.addObject("toptill_date", toptill_date);
				// 默认头像
				mv.addObject("wechat_headimgurl", Common.userheadimgurl);
				mv.setViewName(pagename);
			}
				break;
			case "edit": {

				mv.addObject("pagetitle", "管理日志记录表");
				mv.addObject("subtitle", "修改日志记录表");
				mv.addObject("formtitle", "修改日志记录表");
				mv.addObject("pagename", pagename);
				mv.addObject("referer", Common.getRefererUrl());

				// 读取当前已有信息
				Syslog it = svcb.getSyslogById(id);
				// 修正信息：如默认头像
				mv.addObject("it", it);
				mv.setViewName(pagename);
			}
				break;
			case "delete": {

				boolean rtv = false;
				try {
					rtv = svcb.removeSyslogById(id);
				} catch (Exception e) {
					e.printStackTrace();
				}
				if (rtv) {

					mv.addObject("message", "信息已经删除！");
					mv.addObject("jumpto", Common.getRefererUrl());
					mv.setViewName("jumper");
				} else {

					mv.addObject("message", "删除操作被外星人强行终止！");
					mv.addObject("jumpto", Common.getRefererUrl());
					mv.setViewName("jumperclick");
				}
			}
				break;
			case "hideitem":
			case "showitem": {
				UserShiro userShiro = (UserShiro) SecurityUtils.getSubject().getPrincipal();
				// svcb.updateSyslogById(operate, id);
				mv.addObject("jumpto", Common.getRefererUrl());
				mv.setViewName("jumperatonce");
			}
				break;

			default: {

			}
				break;
			}
		} else {
			// 操作为空,默认为搜索,显示列表
			String qs = "";
			Integer pagenumber = Common.recordToSession(session, "pagenumber", pn + "", 1);
			Integer pagesize = Common.recordToSession(session, "pagesize", ps + "", 10);
			String keyword = Util.replaceSqlChar(kw);
			keyword = Common.recordToSession(session, "keyword_syslog", keyword, "");
			// 清除搜索条件
			if (!StringUtils.isBlank(clrkw)) {
				session.removeAttribute("keyword_syslog");
				keyword = null;
			}

			// 读取url中是否包含筛选条件
			Map<String, String> sqlin = new HashMap<String, String>();

			if (!StringUtils.isBlank(request.getParameter("user_id"))) {
				sqlin.put(Syslog.USER_ID + "_id", request.getParameter("user_id"));
				mv.addObject(Syslog.USER_ID + "_map", Util.splitToInteger(request.getParameter("user_id"), ","));
				qs += Syslog.USER_ID + "=" + request.getParameter("user_id") + "&";
			}

			mv.addObject("pagetitle", "管理日志记录表");
			mv.addObject("subtitle", "分页列表");
			mv.addObject("tabletitle", "管理");
			mv.addObject("pagename", pagename);// 当前页面的url

			if (!StringUtils.isBlank(keyword)) {
				mv.addObject("kw", keyword);
				qs += "kw=" + keyword + "&";
			}
			mv.addObject("qs", qs);

			// 在列表中需要筛选的条件
			Map<String, Object> params = new HashMap<String, Object>();
			// params.put(Syslog.ID, 0);
			// params.put(Syslog.USER_ID, 0);// 筛选条件1
			List<KeyAndValue> ordlist = new ArrayList<KeyAndValue>();
			ordlist.add(new KeyAndValue(Syslog.ID, "desc"));
			PagerList<Syslog> pagerlist = svcb.pagerListSyslog(pagenumber, pagesize, keyword, sqlin, params, ordlist);
			if (pagerlist.getPager().getRecordsSize() == 0 && pagerlist.getPager().getPages() != 0
					&& pagerlist.getPager().getCurrent() > pagerlist.getPager().getPages()) {
				String url = Common.getBasePath() + pagename + "?" + qs + "pn=" + pagerlist.getPager().getPages();
				mv.addObject("jumpto", url);
				// System.out.println("Test.SyslogGET()url=" + url);
				mv.setViewName("jumperatonce");
			} else {
				// Pager<Syslog> pager = new Pager<Syslog>(page);
				// System.out.println("Test.SyslogGET()pager=" + pager.toString());
				mv.addObject("qs", qs);
				mv.addObject("pager", pagerlist.getPager());
				mv.addObject("list", pagerlist.getList());
				mv.setViewName(pagename);
			}
		}

		return mv;

	}

	// TODO: POST-syslog
	@RequestMapping(value = { "/syslog", "/syslog/", "/syslog/index.html" }, method = RequestMethod.POST)
	public ModelAndView syslogPOST(ModelAndView mv, HttpServletRequest request, HttpSession session) throws Exception {

		System.out.println(this.getClass().getName() + "POST");
		String pagename = "admin/syslog";
		UserShiro userShiro = (UserShiro) SecurityUtils.getSubject().getPrincipal();
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		String operate = request.getParameter("operate");
		// --------编辑修改共有的部分---------
		Integer user_id = 0;
		if (!StringUtils.isBlank(request.getParameter("user_id"))) {
			user_id = Integer.parseInt(request.getParameter("user_id"));
		}
		String user_info = "";
		if (!StringUtils.isBlank(request.getParameter("user_info"))) {
			user_info = request.getParameter("user_info");
		}
		user_info = Util.restrictLength(user_info, 255);
		String user_ip = "";
		if (!StringUtils.isBlank(request.getParameter("user_ip"))) {
			user_ip = request.getParameter("user_ip");
		}
		user_ip = Util.restrictLength(user_ip, 64);
		Integer spend_time = 0;
		if (!StringUtils.isBlank(request.getParameter("spend_time"))) {
			spend_time = Integer.parseInt(request.getParameter("spend_time"));
		}
		String request_content = "";
		if (!StringUtils.isBlank(request.getParameter("request_content"))) {
			request_content = request.getParameter("request_content");
		}
		request_content = Util.restrictLength(request_content, 255);
		String url = "";
		if (!StringUtils.isBlank(request.getParameter("url"))) {
			url = request.getParameter("url");
		}
		url = Util.restrictLength(url, 255);
		Boolean is_attack = StringUtils.isBlank(request.getParameter("is_attack")) ? false : true;
		// --------编辑修改共有的部分-结束---------
		// Integer create_userid = userShiro.getId();
		// 来源页面
		String referer = request.getParameter("referer");
		switch (operate) {
		case "addform": {

			// String password_digest = DigestUtils.md5Hex(password);
			// Integer sortid = (int) Math.round(svcb.maxSyslog(Syslog.SORTID)) + 1;
			Syslog it = new Syslog(user_id, user_info, user_ip, spend_time, request_content, url, is_attack);

			// ----------保存前检查逻辑问题---------------
			// 如：用户名必须唯一，手机号必须唯一
			Map<String, Object> params = new HashMap<String, Object>();
			// params.put(Syslog.ID, id);
			List<Syslog> list = svcb.listSyslogByMap(params);
			if (StringUtils.isBlank("") || StringUtils.isBlank("")) {

				mv.addObject("message", "你输入的信息没有通过星际外交部的严格审核，请重新输入！");
				mv.addObject("jumpto", pagename);
				mv.setViewName("jumperback");
				return mv;
			} else if (list.size() > 0) {

				// 输入内容中，有些内容要求值唯一！
				mv.addObject("message", "你输入的信息已经被外星人抢先注册！");
				mv.addObject("jumpto", pagename);
				mv.setViewName("jumperback");
				return mv;
			} else {

				svcb.saveSyslog(it);
			}
			// ----------保存前检查逻辑问题结束------------

			mv.addObject("message", "信息已经保存！");
		}
			break;
		case "editform": {
			Integer id = 0;
			if (!StringUtils.isBlank(request.getParameter("id"))) {
				id = Integer.parseInt(request.getParameter("id"));
			}
			// update_gmt = sdf.parse(request.getParameter("update_gmt_date")).getTime();
			// String password_digest = DigestUtils.md5Hex(password);

			// ----------保存前检查逻辑上是否有冲突---------------
			// 如：用户名必须唯一，手机号必须唯一
			Map<String, Object> params = new HashMap<String, Object>();
			params.put(Syslog.ID, id);
			List<Syslog> list = svcb.listSyslogByMap(params);
			if (list.size() > 1 || (list.size() == 1 && list.get(0).getId() != id)) {

				mv.addObject("message", "你输入的手机号码已经被外星人抢先注册！");
				mv.addObject("jumpto", pagename);
				mv.setViewName("jumperback");
				return mv;
			} else {
				svcb.updateSyslogById(user_id, user_info, user_ip, spend_time, request_content, url, is_attack, id);

			}
			// ----------保存前检查逻辑问题结束------------

			mv.addObject("message", "信息已经修改！");

		}
			break;

		default:
			System.out.println(this.getClass().getName() + "没有对应的operate=" + operate);
			break;
		}

		mv.addObject("jumpto", referer);
		mv.setViewName("jumper");

		return mv;
	}

	// TODO: GET-user
	@RequestMapping(value = { "/user", "/user/", "/user/index.html" }, method = RequestMethod.GET)
	public ModelAndView userGET(ModelAndView mv, @RequestParam(value = "kw", required = false) String kw,
			@RequestParam(value = "clrkw", required = false) String clrkw,
			@RequestParam(value = "operate", required = false) String operate,
			@RequestParam(value = "pn", required = false) Integer pn,
			@RequestParam(value = "ps", required = false) Integer ps,
			@RequestParam(value = "id", required = false) Integer id, HttpServletRequest request, HttpSession session) {
		logger.info(this.getClass().getName());
		System.out.println(this.getClass().getName() + ",operate=" + operate + ",id=" + id + ",pn=" + pn + ",ps=" + ps
				+ ",kw=" + kw + ",clrkw=" + clrkw);
		mv.addObject("navitem", "User");// 菜单项显示当前项
		String pagename = "test/user";
		// 新增和编辑，列表页面筛选也需要使用，页面部分都有一些预先读取的内容
		if (StringUtils.isBlank(operate) || operate.equals("add") || operate.equals("edit")) {
			// 新建、编辑、列表的条件筛选
			// 用于制作彩色的标签
			mv.addObject("tagpostfixlist", Common.tagPostfix);
		}
		// 新增和编辑，列表页面筛选也需要使用，页面部分都有一些预先读取的内容
		if (!StringUtils.isBlank(operate)) {
			// 操作不为空，增删改
			mv.addObject("operate", operate);
			switch (operate) {
			case "add": {
				mv.addObject("pagetitle", "管理用户/教师");
				mv.addObject("subtitle", "新增用户/教师");
				mv.addObject("formtitle", "新增用户/教师");
				mv.addObject("pagename", pagename);
				// 默认作者是当前用户
				UserShiro userShiro = (UserShiro) SecurityUtils.getSubject().getPrincipal();
				mv.addObject("author", userShiro.getLogin_name());
				// 默认置顶3天
				Calendar calendar = Calendar.getInstance();
				calendar.add(Calendar.DATE, 3);
				SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
				String toptill_date = sdf.format(new Date(calendar.getTimeInMillis()));
				mv.addObject("toptill_date", toptill_date);
				// 默认头像
				mv.addObject("wechat_headimgurl", Common.userheadimgurl);
				mv.setViewName(pagename);
			}
				break;
			case "edit": {

				mv.addObject("pagetitle", "管理用户/教师");
				mv.addObject("subtitle", "修改用户/教师");
				mv.addObject("formtitle", "修改用户/教师");
				mv.addObject("pagename", pagename);
				mv.addObject("referer", Common.getRefererUrl());

				// 读取当前已有信息
				User it = svcb.getUserById(id);
				// 修正信息：如默认头像
				mv.addObject("it", it);
				mv.setViewName(pagename);
			}
				break;
			case "delete": {

				boolean rtv = false;
				try {
					rtv = svcb.removeUserById(id);
				} catch (Exception e) {
					e.printStackTrace();
				}
				if (rtv) {

					mv.addObject("message", "信息已经删除！");
					mv.addObject("jumpto", Common.getRefererUrl());
					mv.setViewName("jumper");
				} else {

					mv.addObject("message", "删除操作被外星人强行终止！");
					mv.addObject("jumpto", Common.getRefererUrl());
					mv.setViewName("jumperclick");
				}
			}
				break;
			case "hideitem":
			case "showitem": {
				UserShiro userShiro = (UserShiro) SecurityUtils.getSubject().getPrincipal();
				// svcb.updateUserById(operate, id);
				mv.addObject("jumpto", Common.getRefererUrl());
				mv.setViewName("jumperatonce");
			}
				break;

			default: {

			}
				break;
			}
		} else {
			// 操作为空,默认为搜索,显示列表
			String qs = "";
			Integer pagenumber = Common.recordToSession(session, "pagenumber", pn + "", 1);
			Integer pagesize = Common.recordToSession(session, "pagesize", ps + "", 10);
			String keyword = Util.replaceSqlChar(kw);
			keyword = Common.recordToSession(session, "keyword_user", keyword, "");
			// 清除搜索条件
			if (!StringUtils.isBlank(clrkw)) {
				session.removeAttribute("keyword_user");
				keyword = null;
			}

			// 读取url中是否包含筛选条件
			Map<String, String> sqlin = new HashMap<String, String>();

			mv.addObject("pagetitle", "管理用户/教师");
			mv.addObject("subtitle", "分页列表");
			mv.addObject("tabletitle", "管理");
			mv.addObject("pagename", pagename);// 当前页面的url

			if (!StringUtils.isBlank(keyword)) {
				mv.addObject("kw", keyword);
				qs += "kw=" + keyword + "&";
			}
			mv.addObject("qs", qs);

			// 在列表中需要筛选的条件
			Map<String, Object> params = new HashMap<String, Object>();
			// params.put(User.ID, 0);
			// params.put(User.NAME, 0);// 筛选条件1
			List<KeyAndValue> ordlist = new ArrayList<KeyAndValue>();
			ordlist.add(new KeyAndValue(User.ID, "desc"));
			PagerList<User> pagerlist = svcb.pagerListUser(pagenumber, pagesize, keyword, sqlin, params, ordlist);
			if (pagerlist.getPager().getRecordsSize() == 0 && pagerlist.getPager().getPages() != 0
					&& pagerlist.getPager().getCurrent() > pagerlist.getPager().getPages()) {
				String url = Common.getBasePath() + pagename + "?" + qs + "pn=" + pagerlist.getPager().getPages();
				mv.addObject("jumpto", url);
				// System.out.println("Test.UserGET()url=" + url);
				mv.setViewName("jumperatonce");
			} else {
				// Pager<User> pager = new Pager<User>(page);
				// System.out.println("Test.UserGET()pager=" + pager.toString());
				mv.addObject("qs", qs);
				mv.addObject("pager", pagerlist.getPager());
				mv.addObject("list", pagerlist.getList());
				mv.setViewName(pagename);
			}
		}

		return mv;

	}

	// TODO: POST-user
	@RequestMapping(value = { "/user", "/user/", "/user/index.html" }, method = RequestMethod.POST)
	public ModelAndView userPOST(ModelAndView mv, HttpServletRequest request, HttpSession session) throws Exception {

		System.out.println(this.getClass().getName() + "POST");
		String pagename = "admin/user";
		UserShiro userShiro = (UserShiro) SecurityUtils.getSubject().getPrincipal();
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		String operate = request.getParameter("operate");
		// --------编辑修改共有的部分---------
		String name = "";
		if (!StringUtils.isBlank(request.getParameter("name"))) {
			name = request.getParameter("name");
		}
		name = Util.restrictLength(name, 20);
		String login_name = "";
		if (!StringUtils.isBlank(request.getParameter("login_name"))) {
			login_name = request.getParameter("login_name");
		}
		login_name = Util.restrictLength(login_name, 10);
		String login_name_digest = "";
		if (!StringUtils.isBlank(request.getParameter("login_name_digest"))) {
			login_name_digest = request.getParameter("login_name_digest");
		}
		login_name_digest = Util.restrictLength(login_name_digest, 50);
		String login_password = "";
		if (!StringUtils.isBlank(request.getParameter("login_password"))) {
			login_password = request.getParameter("login_password");
		}
		login_password = Util.restrictLength(login_password, 50);
		String login_password_digest = "";
		if (!StringUtils.isBlank(request.getParameter("login_password_digest"))) {
			login_password_digest = request.getParameter("login_password_digest");
		}
		login_password_digest = Util.restrictLength(login_password_digest, 50);
		String email = "";
		if (!StringUtils.isBlank(request.getParameter("email"))) {
			email = request.getParameter("email");
		}
		email = Util.restrictLength(email, 50);
		Boolean is_actived = StringUtils.isBlank(request.getParameter("is_actived")) ? false : true;
		String telephone = "";
		if (!StringUtils.isBlank(request.getParameter("telephone"))) {
			telephone = request.getParameter("telephone");
		}
		telephone = Util.restrictLength(telephone, 50);
		String qq = "";
		if (!StringUtils.isBlank(request.getParameter("qq"))) {
			qq = request.getParameter("qq");
		}
		qq = Util.restrictLength(qq, 50);
		String wechat_openid = "";
		if (!StringUtils.isBlank(request.getParameter("wechat_openid"))) {
			wechat_openid = request.getParameter("wechat_openid");
		}
		wechat_openid = Util.restrictLength(wechat_openid, 45);
		String wechat_nickname = "";
		if (!StringUtils.isBlank(request.getParameter("wechat_nickname"))) {
			wechat_nickname = request.getParameter("wechat_nickname");
		}
		wechat_nickname = Util.restrictLength(wechat_nickname, 45);
		String wechat_headimgurl = "";
		if (!StringUtils.isBlank(request.getParameter("wechat_headimgurl"))) {
			wechat_headimgurl = request.getParameter("wechat_headimgurl");
		}
		wechat_headimgurl = Util.restrictLength(wechat_headimgurl, 200);
		Integer login_method = 0;
		if (!StringUtils.isBlank(request.getParameter("login_method"))) {
			login_method = Integer.parseInt(request.getParameter("login_method"));
		}
		// --------编辑修改共有的部分-结束---------
		// Integer create_userid = userShiro.getId();
		// 来源页面
		String referer = request.getParameter("referer");
		switch (operate) {
		case "addform": {

			// String password_digest = DigestUtils.md5Hex(password);
			// Integer sortid = (int) Math.round(svcb.maxUser(User.SORTID)) + 1;
			User it = new User(name, login_name, login_name_digest, login_password, login_password_digest, email,
					is_actived, telephone, qq, wechat_openid, wechat_nickname, wechat_headimgurl, login_method,
					userShiro.getId(), 0);

			// ----------保存前检查逻辑问题---------------
			// 如：用户名必须唯一，手机号必须唯一
			Map<String, Object> params = new HashMap<String, Object>();
			// params.put(User.ID, id);
			List<User> list = svcb.listUserByMap(params);
			if (StringUtils.isBlank("") || StringUtils.isBlank("")) {

				mv.addObject("message", "你输入的信息没有通过星际外交部的严格审核，请重新输入！");
				mv.addObject("jumpto", pagename);
				mv.setViewName("jumperback");
				return mv;
			} else if (list.size() > 0) {

				// 输入内容中，有些内容要求值唯一！
				mv.addObject("message", "你输入的信息已经被外星人抢先注册！");
				mv.addObject("jumpto", pagename);
				mv.setViewName("jumperback");
				return mv;
			} else {

				svcb.saveUser(it);
			}
			// ----------保存前检查逻辑问题结束------------

			mv.addObject("message", "信息已经保存！");
		}
			break;
		case "editform": {
			Integer id = 0;
			if (!StringUtils.isBlank(request.getParameter("id"))) {
				id = Integer.parseInt(request.getParameter("id"));
			}
			// update_gmt = sdf.parse(request.getParameter("update_gmt_date")).getTime();
			// String password_digest = DigestUtils.md5Hex(password);

			// ----------保存前检查逻辑上是否有冲突---------------
			// 如：用户名必须唯一，手机号必须唯一
			Map<String, Object> params = new HashMap<String, Object>();
			params.put(User.ID, id);
			List<User> list = svcb.listUserByMap(params);
			if (list.size() > 1 || (list.size() == 1 && list.get(0).getId() != id)) {

				mv.addObject("message", "你输入的手机号码已经被外星人抢先注册！");
				mv.addObject("jumpto", pagename);
				mv.setViewName("jumperback");
				return mv;
			} else {
				svcb.updateUserById(name, login_name, login_name_digest, login_password, login_password_digest, email,
						is_actived, telephone, qq, wechat_openid, wechat_nickname, wechat_headimgurl, login_method,
						userShiro.getId(), new Date().getTime(), id);

			}
			// ----------保存前检查逻辑问题结束------------

			mv.addObject("message", "信息已经修改！");

		}
			break;

		default:
			System.out.println(this.getClass().getName() + "没有对应的operate=" + operate);
			break;
		}

		mv.addObject("jumpto", referer);
		mv.setViewName("jumper");

		return mv;
	}

	//可以测试 -julius
	// TODO: GET-user_login_log
	@RequestMapping(value = { "/user_login_log", "/user_login_log/",
			"/user_login_log/index.html" }, method = RequestMethod.GET)
	public ModelAndView user_login_logGET(ModelAndView mv, @RequestParam(value = "kw", required = false) String kw,
			@RequestParam(value = "clrkw", required = false) String clrkw,
			@RequestParam(value = "operate", required = false) String operate,
			@RequestParam(value = "pn", required = false) Integer pn,
			@RequestParam(value = "ps", required = false) Integer ps,
			@RequestParam(value = "id", required = false) Integer id, HttpServletRequest request, HttpSession session) {
		logger.info(this.getClass().getName());
		System.out.println(this.getClass().getName() + ",operate=" + operate + ",id=" + id + ",pn=" + pn + ",ps=" + ps
				+ ",kw=" + kw + ",clrkw=" + clrkw);
		mv.addObject("navitem", "User_login_log");// 菜单项显示当前项
		String pagename = "test/user_login_log";
		// 新增和编辑，列表页面筛选也需要使用，页面部分都有一些预先读取的内容
		if (StringUtils.isBlank(operate) || operate.equals("add") || operate.equals("edit")) {
			// 新建、编辑、列表的条件筛选
			// 用于制作彩色的标签
			mv.addObject("tagpostfixlist", Common.tagPostfix);
			mv.addObject("userlist", svcb.listUserOrderByAsc(User.ID));
			mv.addObject("usermap", svcb.mapUser());
		}
		// 新增和编辑，列表页面筛选也需要使用，页面部分都有一些预先读取的内容
		if (!StringUtils.isBlank(operate)) {
			// 操作不为空，增删改
			mv.addObject("operate", operate);
			switch (operate) {
			case "add": {
				mv.addObject("pagetitle", "管理管理员登陆表");
				mv.addObject("subtitle", "新增管理员登陆表");
				mv.addObject("formtitle", "新增管理员登陆表");
				mv.addObject("pagename", pagename);
				// 默认作者是当前用户
				UserShiro userShiro = (UserShiro) SecurityUtils.getSubject().getPrincipal();
				mv.addObject("author", userShiro.getLogin_name());
				// 默认置顶3天
				Calendar calendar = Calendar.getInstance();
				calendar.add(Calendar.DATE, 3);
				SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
				String toptill_date = sdf.format(new Date(calendar.getTimeInMillis()));
				mv.addObject("toptill_date", toptill_date);
				// 默认头像
				mv.addObject("wechat_headimgurl", Common.userheadimgurl);
				mv.setViewName(pagename);
			}
				break;
			case "edit": {

				mv.addObject("pagetitle", "管理管理员登陆表");
				mv.addObject("subtitle", "修改管理员登陆表");
				mv.addObject("formtitle", "修改管理员登陆表");
				mv.addObject("pagename", pagename);
				mv.addObject("referer", Common.getRefererUrl());

				// 读取当前已有信息
				User_login_log it = svcb.getUser_login_logById(id);
				// 修正信息：如默认头像
				mv.addObject("it", it);
				mv.setViewName(pagename);
			}
				break;
			case "delete": {

				boolean rtv = false;
				try {
					rtv = svcb.removeUser_login_logById(id);
				} catch (Exception e) {
					e.printStackTrace();
				}
				if (rtv) {

					mv.addObject("message", "信息已经删除！");
					mv.addObject("jumpto", Common.getRefererUrl());
					mv.setViewName("jumper");
				} else {

					mv.addObject("message", "删除操作被外星人强行终止！");
					mv.addObject("jumpto", Common.getRefererUrl());
					mv.setViewName("jumperclick");
				}
			}
				break;
			case "hideitem":
			case "showitem": {
				UserShiro userShiro = (UserShiro) SecurityUtils.getSubject().getPrincipal();
				// svcb.updateUser_login_logById(operate, id);
				mv.addObject("jumpto", Common.getRefererUrl());
				mv.setViewName("jumperatonce");
			}
				break;

			default: {

			}
				break;
			}
		} else {
			// 操作为空,默认为搜索,显示列表
			String qs = "";
			Integer pagenumber = Common.recordToSession(session, "pagenumber", pn + "", 1);
			Integer pagesize = Common.recordToSession(session, "pagesize", ps + "", 10);
			String keyword = Util.replaceSqlChar(kw);
			keyword = Common.recordToSession(session, "keyword_user_login_log", keyword, "");
			// 清除搜索条件
			if (!StringUtils.isBlank(clrkw)) {
				session.removeAttribute("keyword_user_login_log");
				keyword = null;
			}

			// 读取url中是否包含筛选条件
			Map<String, String> sqlin = new HashMap<String, String>();

			if (!StringUtils.isBlank(request.getParameter("user_id"))) {
				sqlin.put(User_login_log.USER_ID + "_id", request.getParameter("user_id"));
				mv.addObject(User_login_log.USER_ID + "_map",
						Util.splitToInteger(request.getParameter("user_id"), ","));
				qs += User_login_log.USER_ID + "=" + request.getParameter("user_id") + "&";
			}

			mv.addObject("pagetitle", "管理管理员登陆表");
			mv.addObject("subtitle", "分页列表");
			mv.addObject("tabletitle", "管理");
			mv.addObject("pagename", pagename);// 当前页面的url

			if (!StringUtils.isBlank(keyword)) {
				mv.addObject("kw", keyword);
				qs += "kw=" + keyword + "&";
			}
			mv.addObject("qs", qs);

			// 在列表中需要筛选的条件
			Map<String, Object> params = new HashMap<String, Object>();
			// params.put(User_login_log.ID, 0);
			// params.put(User_login_log.LOGIN_GMT, 0);// 筛选条件1
			List<KeyAndValue> ordlist = new ArrayList<KeyAndValue>();
			ordlist.add(new KeyAndValue(User_login_log.ID, "desc"));
			PagerList<User_login_log> pagerlist = svcb.pagerListUser_login_log(pagenumber, pagesize, keyword, sqlin,
					params, ordlist);
			if (pagerlist.getPager().getRecordsSize() == 0 && pagerlist.getPager().getPages() != 0
					&& pagerlist.getPager().getCurrent() > pagerlist.getPager().getPages()) {
				String url = Common.getBasePath() + pagename + "?" + qs + "pn=" + pagerlist.getPager().getPages();
				mv.addObject("jumpto", url);
				// System.out.println("Test.User_login_logGET()url=" + url);
				mv.setViewName("jumperatonce");
			} else {
				// Pager<User_login_log> pager = new Pager<User_login_log>(page);
				// System.out.println("Test.User_login_logGET()pager=" + pager.toString());
				mv.addObject("qs", qs);
				mv.addObject("pager", pagerlist.getPager());
				mv.addObject("list", pagerlist.getList());
				mv.setViewName(pagename);
			}
		}

		return mv;

	}

	// TODO: POST-user_login_log
	@RequestMapping(value = { "/user_login_log", "/user_login_log/",
			"/user_login_log/index.html" }, method = RequestMethod.POST)
	public ModelAndView user_login_logPOST(ModelAndView mv, HttpServletRequest request, HttpSession session)
			throws Exception {

		System.out.println(this.getClass().getName() + "POST");
		String pagename = "admin/user_login_log";
		UserShiro userShiro = (UserShiro) SecurityUtils.getSubject().getPrincipal();
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		String operate = request.getParameter("operate");
		// --------编辑修改共有的部分---------
		Long login_gmt = Long.parseLong(request.getParameter("login_gmt"));
		String user_ip = "";
		if (!StringUtils.isBlank(request.getParameter("user_ip"))) {
			user_ip = request.getParameter("user_ip");
		}
		user_ip = Util.restrictLength(user_ip, 20);
		Integer user_id = 0;
		if (!StringUtils.isBlank(request.getParameter("user_id"))) {
			user_id = Integer.parseInt(request.getParameter("user_id"));
		}
		String operating_system = "";
		if (!StringUtils.isBlank(request.getParameter("operating_system"))) {
			operating_system = request.getParameter("operating_system");
		}
		operating_system = Util.restrictLength(operating_system, 50);
		String browser = "";
		if (!StringUtils.isBlank(request.getParameter("browser"))) {
			browser = request.getParameter("browser");
		}
		browser = Util.restrictLength(browser, 50);
		// --------编辑修改共有的部分-结束---------
		// Integer create_userid = userShiro.getId();
		// 来源页面
		String referer = request.getParameter("referer");
		switch (operate) {
		case "addform": {

			// String password_digest = DigestUtils.md5Hex(password);
			// Integer sortid = (int)
			// Math.round(svcb.maxUser_login_log(User_login_log.SORTID)) + 1;
			User_login_log it = new User_login_log(login_gmt, user_ip, user_id, operating_system, browser);

			// ----------保存前检查逻辑问题---------------
			// 如：用户名必须唯一，手机号必须唯一
			Map<String, Object> params = new HashMap<String, Object>();
			// params.put(User_login_log.ID, id);
			List<User_login_log> list = svcb.listUser_login_logByMap(params);
			if (StringUtils.isBlank("") || StringUtils.isBlank("")) {

				mv.addObject("message", "你输入的信息没有通过星际外交部的严格审核，请重新输入！");
				mv.addObject("jumpto", pagename);
				mv.setViewName("jumperback");
				return mv;
			} else if (list.size() > 0) {

				// 输入内容中，有些内容要求值唯一！
				mv.addObject("message", "你输入的信息已经被外星人抢先注册！");
				mv.addObject("jumpto", pagename);
				mv.setViewName("jumperback");
				return mv;
			} else {

				svcb.saveUser_login_log(it);
			}
			// ----------保存前检查逻辑问题结束------------

			mv.addObject("message", "信息已经保存！");
		}
			break;
		case "editform": {
			Integer id = 0;
			if (!StringUtils.isBlank(request.getParameter("id"))) {
				id = Integer.parseInt(request.getParameter("id"));
			}
			// update_gmt = sdf.parse(request.getParameter("update_gmt_date")).getTime();
			// String password_digest = DigestUtils.md5Hex(password);

			// ----------保存前检查逻辑上是否有冲突---------------
			// 如：用户名必须唯一，手机号必须唯一
			Map<String, Object> params = new HashMap<String, Object>();
			params.put(User_login_log.ID, id);
			List<User_login_log> list = svcb.listUser_login_logByMap(params);
			if (list.size() > 1 || (list.size() == 1 && list.get(0).getId() != id)) {

				mv.addObject("message", "你输入的手机号码已经被外星人抢先注册！");
				mv.addObject("jumpto", pagename);
				mv.setViewName("jumperback");
				return mv;
			} else {
				svcb.updateUser_login_logById(login_gmt, user_ip, user_id, operating_system, browser, id);

			}
			// ----------保存前检查逻辑问题结束------------

			mv.addObject("message", "信息已经修改！");

		}
			break;

		default:
			System.out.println(this.getClass().getName() + "没有对应的operate=" + operate);
			break;
		}

		mv.addObject("jumpto", referer);
		mv.setViewName("jumper");

		return mv;
	}

	// TODO: GET-vcurriculum
	@RequestMapping(value = { "/vcurriculum", "/vcurriculum/", "/vcurriculum/index.html" }, method = RequestMethod.GET)
	public ModelAndView vcurriculumGET(ModelAndView mv, @RequestParam(value = "kw", required = false) String kw,
			@RequestParam(value = "clrkw", required = false) String clrkw,
			@RequestParam(value = "operate", required = false) String operate,
			@RequestParam(value = "pn", required = false) Integer pn,
			@RequestParam(value = "ps", required = false) Integer ps,
			@RequestParam(value = "id", required = false) Integer id, HttpServletRequest request, HttpSession session) {
		logger.info(this.getClass().getName());
		System.out.println(this.getClass().getName() + ",operate=" + operate + ",id=" + id + ",pn=" + pn + ",ps=" + ps
				+ ",kw=" + kw + ",clrkw=" + clrkw);
		mv.addObject("navitem", "Vcurriculum");// 菜单项显示当前项
		String pagename = "test/vcurriculum";
		// 新增和编辑，列表页面筛选也需要使用，页面部分都有一些预先读取的内容
		if (StringUtils.isBlank(operate) || operate.equals("add") || operate.equals("edit")) {
			// 新建、编辑、列表的条件筛选
			// 用于制作彩色的标签
			mv.addObject("tagpostfixlist", Common.tagPostfix);
			mv.addObject("subjectlist", svcb.listSubjectOrderByAsc(Subject.ID));
			mv.addObject("subjectmap", svcb.mapSubject());
			mv.addObject("student_grouplist", svcb.listStudent_groupOrderByAsc(Student_group.ID));
			mv.addObject("student_groupmap", svcb.mapStudent_group());
			mv.addObject("userlist", svcb.listUserOrderByAsc(User.ID));
			mv.addObject("usermap", svcb.mapUser());
		}
		// 新增和编辑，列表页面筛选也需要使用，页面部分都有一些预先读取的内容
		if (!StringUtils.isBlank(operate)) {
			// 操作不为空，增删改
			mv.addObject("operate", operate);
			switch (operate) {
			case "add": {
				mv.addObject("pagetitle", "管理VIEW");
				mv.addObject("subtitle", "新增VIEW");
				mv.addObject("formtitle", "新增VIEW");
				mv.addObject("pagename", pagename);
				// 默认作者是当前用户
				UserShiro userShiro = (UserShiro) SecurityUtils.getSubject().getPrincipal();
				mv.addObject("author", userShiro.getLogin_name());
				// 默认置顶3天
				Calendar calendar = Calendar.getInstance();
				calendar.add(Calendar.DATE, 3);
				SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
				String toptill_date = sdf.format(new Date(calendar.getTimeInMillis()));
				mv.addObject("toptill_date", toptill_date);
				// 默认头像
				mv.addObject("wechat_headimgurl", Common.userheadimgurl);
				mv.setViewName(pagename);
			}
				break;
			case "edit": {

				mv.addObject("pagetitle", "管理VIEW");
				mv.addObject("subtitle", "修改VIEW");
				mv.addObject("formtitle", "修改VIEW");
				mv.addObject("pagename", pagename);
				mv.addObject("referer", Common.getRefererUrl());

				// 读取当前已有信息
				Vcurriculum it = svcb.getVcurriculumById(id);
				// 修正信息：如默认头像
				mv.addObject("it", it);
				mv.setViewName(pagename);
			}
				break;
			case "delete": {

				boolean rtv = false;
				try {
					// 视图需要定制删除方法！
					// rtv = svc.removeVcurriculumById(id);
				} catch (Exception e) {
					e.printStackTrace();
				}
				if (rtv) {

					mv.addObject("message", "信息已经删除！");
					mv.addObject("jumpto", Common.getRefererUrl());
					mv.setViewName("jumper");
				} else {

					mv.addObject("message", "删除操作被外星人强行终止！");
					mv.addObject("jumpto", Common.getRefererUrl());
					mv.setViewName("jumperclick");
				}
			}
				break;
			case "hideitem":
			case "showitem": {
				UserShiro userShiro = (UserShiro) SecurityUtils.getSubject().getPrincipal();
				// svcb.updateVcurriculumById(operate, id);
				mv.addObject("jumpto", Common.getRefererUrl());
				mv.setViewName("jumperatonce");
			}
				break;

			default: {

			}
				break;
			}
		} else {
			// 操作为空,默认为搜索,显示列表
			String qs = "";
			Integer pagenumber = Common.recordToSession(session, "pagenumber", pn + "", 1);
			Integer pagesize = Common.recordToSession(session, "pagesize", ps + "", 10);
			String keyword = Util.replaceSqlChar(kw);
			keyword = Common.recordToSession(session, "keyword_vcurriculum", keyword, "");
			// 清除搜索条件
			if (!StringUtils.isBlank(clrkw)) {
				session.removeAttribute("keyword_vcurriculum");
				keyword = null;
			}

			// 读取url中是否包含筛选条件
			Map<String, String> sqlin = new HashMap<String, String>();

			if (!StringUtils.isBlank(request.getParameter("subject_id"))) {
				sqlin.put(Vcurriculum.SUBJECT_ID + "_id", request.getParameter("subject_id"));
				mv.addObject(Vcurriculum.SUBJECT_ID + "_map",
						Util.splitToInteger(request.getParameter("subject_id"), ","));
				qs += Vcurriculum.SUBJECT_ID + "=" + request.getParameter("subject_id") + "&";
			}

			if (!StringUtils.isBlank(request.getParameter("student_group_id"))) {
				sqlin.put(Vcurriculum.STUDENT_GROUP_ID + "_id", request.getParameter("student_group_id"));
				mv.addObject(Vcurriculum.STUDENT_GROUP_ID + "_map",
						Util.splitToInteger(request.getParameter("student_group_id"), ","));
				qs += Vcurriculum.STUDENT_GROUP_ID + "=" + request.getParameter("student_group_id") + "&";
			}

			if (!StringUtils.isBlank(request.getParameter("user_id"))) {
				sqlin.put(Vcurriculum.USER_ID + "_id", request.getParameter("user_id"));
				mv.addObject(Vcurriculum.USER_ID + "_map", Util.splitToInteger(request.getParameter("user_id"), ","));
				qs += Vcurriculum.USER_ID + "=" + request.getParameter("user_id") + "&";
			}

			mv.addObject("pagetitle", "管理VIEW");
			mv.addObject("subtitle", "分页列表");
			mv.addObject("tabletitle", "管理");
			mv.addObject("pagename", pagename);// 当前页面的url

			if (!StringUtils.isBlank(keyword)) {
				mv.addObject("kw", keyword);
				qs += "kw=" + keyword + "&";
			}
			mv.addObject("qs", qs);

			// 在列表中需要筛选的条件
			Map<String, Object> params = new HashMap<String, Object>();
			// params.put(Vcurriculum.ID, 0);
			// params.put(Vcurriculum.SUBJECT_ID, 0);// 筛选条件1
			List<KeyAndValue> ordlist = new ArrayList<KeyAndValue>();
			ordlist.add(new KeyAndValue(Vcurriculum.ID, "desc"));
			PagerList<Vcurriculum> pagerlist = svcb.pagerListVcurriculum(pagenumber, pagesize, keyword, sqlin, params,
					ordlist);
			if (pagerlist.getPager().getRecordsSize() == 0 && pagerlist.getPager().getPages() != 0
					&& pagerlist.getPager().getCurrent() > pagerlist.getPager().getPages()) {
				String url = Common.getBasePath() + pagename + "?" + qs + "pn=" + pagerlist.getPager().getPages();
				mv.addObject("jumpto", url);
				// System.out.println("Test.VcurriculumGET()url=" + url);
				mv.setViewName("jumperatonce");
			} else {
				// Pager<Vcurriculum> pager = new Pager<Vcurriculum>(page);
				// System.out.println("Test.VcurriculumGET()pager=" + pager.toString());
				mv.addObject("qs", qs);
				mv.addObject("pager", pagerlist.getPager());
				mv.addObject("list", pagerlist.getList());
				mv.setViewName(pagename);
			}
		}

		return mv;

	}

	// TODO: POST-vcurriculum
	@RequestMapping(value = { "/vcurriculum", "/vcurriculum/", "/vcurriculum/index.html" }, method = RequestMethod.POST)
	public ModelAndView vcurriculumPOST(ModelAndView mv, HttpServletRequest request, HttpSession session)
			throws Exception {

		System.out.println(this.getClass().getName() + "POST");
		String pagename = "admin/vcurriculum";
		UserShiro userShiro = (UserShiro) SecurityUtils.getSubject().getPrincipal();
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		String operate = request.getParameter("operate");
		// --------编辑修改共有的部分---------
		Integer subject_id = 0;
		if (!StringUtils.isBlank(request.getParameter("subject_id"))) {
			subject_id = Integer.parseInt(request.getParameter("subject_id"));
		}
		Integer student_group_id = 0;
		if (!StringUtils.isBlank(request.getParameter("student_group_id"))) {
			student_group_id = Integer.parseInt(request.getParameter("student_group_id"));
		}
		Integer user_id = 0;
		if (!StringUtils.isBlank(request.getParameter("user_id"))) {
			user_id = Integer.parseInt(request.getParameter("user_id"));
		}
		String semester = "";
		if (!StringUtils.isBlank(request.getParameter("semester"))) {
			semester = request.getParameter("semester");
		}
		semester = Util.restrictLength(semester, 45);
		Boolean is_actived = StringUtils.isBlank(request.getParameter("is_actived")) ? false : true;
		String subject_name = "";
		if (!StringUtils.isBlank(request.getParameter("subject_name"))) {
			subject_name = request.getParameter("subject_name");
		}
		subject_name = Util.restrictLength(subject_name, 45);
		String student_group_name = "";
		if (!StringUtils.isBlank(request.getParameter("student_group_name"))) {
			student_group_name = request.getParameter("student_group_name");
		}
		student_group_name = Util.restrictLength(student_group_name, 45);
		String user_name = "";
		if (!StringUtils.isBlank(request.getParameter("user_name"))) {
			user_name = request.getParameter("user_name");
		}
		user_name = Util.restrictLength(user_name, 20);
		// --------编辑修改共有的部分-结束---------
		// Integer create_userid = userShiro.getId();
		// 来源页面
		String referer = request.getParameter("referer");
		switch (operate) {
		case "addform": {

			// String password_digest = DigestUtils.md5Hex(password);
			// Integer sortid = (int) Math.round(svcb.maxVcurriculum(Vcurriculum.SORTID)) +
			// 1;
			Vcurriculum it = new Vcurriculum(subject_id, student_group_id, user_id, semester, is_actived, subject_name,
					student_group_name, user_name);

			// ----------保存前检查逻辑问题---------------
			// 如：用户名必须唯一，手机号必须唯一
			Map<String, Object> params = new HashMap<String, Object>();
			// params.put(Vcurriculum.ID, id);
			List<Vcurriculum> list = svcb.listVcurriculumByMap(params);
			if (StringUtils.isBlank("") || StringUtils.isBlank("")) {

				mv.addObject("message", "你输入的信息没有通过星际外交部的严格审核，请重新输入！");
				mv.addObject("jumpto", pagename);
				mv.setViewName("jumperback");
				return mv;
			} else if (list.size() > 0) {

				// 输入内容中，有些内容要求值唯一！
				mv.addObject("message", "你输入的信息已经被外星人抢先注册！");
				mv.addObject("jumpto", pagename);
				mv.setViewName("jumperback");
				return mv;
			} else {

				// 视图需要定制新增方法！
				// svcb.saveVcurriculum(it);
			}
			// ----------保存前检查逻辑问题结束------------

			mv.addObject("message", "信息已经保存！");
		}
			break;
		case "editform": {
			Integer id = 0;
			if (!StringUtils.isBlank(request.getParameter("id"))) {
				id = Integer.parseInt(request.getParameter("id"));
			}
			// update_gmt = sdf.parse(request.getParameter("update_gmt_date")).getTime();
			// String password_digest = DigestUtils.md5Hex(password);

			// ----------保存前检查逻辑上是否有冲突---------------
			// 如：用户名必须唯一，手机号必须唯一
			Map<String, Object> params = new HashMap<String, Object>();
			params.put(Vcurriculum.ID, id);
			List<Vcurriculum> list = svcb.listVcurriculumByMap(params);
			if (list.size() > 1 || (list.size() == 1 && list.get(0).getId() != id)) {

				mv.addObject("message", "你输入的手机号码已经被外星人抢先注册！");
				mv.addObject("jumpto", pagename);
				mv.setViewName("jumperback");
				return mv;
			} else {
				svcb.updateVcurriculumById(subject_id, student_group_id, user_id, semester, is_actived, subject_name,
						student_group_name, user_name, id);

			}
			// ----------保存前检查逻辑问题结束------------

			mv.addObject("message", "信息已经修改！");

		}
			break;

		default:
			System.out.println(this.getClass().getName() + "没有对应的operate=" + operate);
			break;
		}

		mv.addObject("jumpto", referer);
		mv.setViewName("jumper");

		return mv;
	}

	// TODO: GET-vevaluation
	@RequestMapping(value = { "/vevaluation", "/vevaluation/", "/vevaluation/index.html" }, method = RequestMethod.GET)
	public ModelAndView vevaluationGET(ModelAndView mv, @RequestParam(value = "kw", required = false) String kw,
			@RequestParam(value = "clrkw", required = false) String clrkw,
			@RequestParam(value = "operate", required = false) String operate,
			@RequestParam(value = "pn", required = false) Integer pn,
			@RequestParam(value = "ps", required = false) Integer ps,
			@RequestParam(value = "id", required = false) Integer id, HttpServletRequest request, HttpSession session) {
		logger.info(this.getClass().getName());
		System.out.println(this.getClass().getName() + ",operate=" + operate + ",id=" + id + ",pn=" + pn + ",ps=" + ps
				+ ",kw=" + kw + ",clrkw=" + clrkw);
		mv.addObject("navitem", "Vevaluation");// 菜单项显示当前项
		String pagename = "test/vevaluation";
		// 新增和编辑，列表页面筛选也需要使用，页面部分都有一些预先读取的内容
		if (StringUtils.isBlank(operate) || operate.equals("add") || operate.equals("edit")) {
			// 新建、编辑、列表的条件筛选
			// 用于制作彩色的标签
			mv.addObject("tagpostfixlist", Common.tagPostfix);
			mv.addObject("curriculumlist", svcb.listCurriculumOrderByAsc(Curriculum.ID));
			mv.addObject("curriculummap", svcb.mapCurriculum());
			mv.addObject("subjectlist", svcb.listSubjectOrderByAsc(Subject.ID));
			mv.addObject("subjectmap", svcb.mapSubject());
			mv.addObject("student_grouplist", svcb.listStudent_groupOrderByAsc(Student_group.ID));
			mv.addObject("student_groupmap", svcb.mapStudent_group());
		}
		// 新增和编辑，列表页面筛选也需要使用，页面部分都有一些预先读取的内容
		if (!StringUtils.isBlank(operate)) {
			// 操作不为空，增删改
			mv.addObject("operate", operate);
			switch (operate) {
			case "add": {
				mv.addObject("pagetitle", "管理VIEW");
				mv.addObject("subtitle", "新增VIEW");
				mv.addObject("formtitle", "新增VIEW");
				mv.addObject("pagename", pagename);
				// 默认作者是当前用户
				UserShiro userShiro = (UserShiro) SecurityUtils.getSubject().getPrincipal();
				mv.addObject("author", userShiro.getLogin_name());
				// 默认置顶3天
				Calendar calendar = Calendar.getInstance();
				calendar.add(Calendar.DATE, 3);
				SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
				String toptill_date = sdf.format(new Date(calendar.getTimeInMillis()));
				mv.addObject("toptill_date", toptill_date);
				// 默认头像
				mv.addObject("wechat_headimgurl", Common.userheadimgurl);
				mv.setViewName(pagename);
			}
				break;
			case "edit": {

				mv.addObject("pagetitle", "管理VIEW");
				mv.addObject("subtitle", "修改VIEW");
				mv.addObject("formtitle", "修改VIEW");
				mv.addObject("pagename", pagename);
				mv.addObject("referer", Common.getRefererUrl());

				// 读取当前已有信息
				Vevaluation it = svcb.getVevaluationById(id);
				// 修正信息：如默认头像
				mv.addObject("it", it);
				mv.setViewName(pagename);
			}
				break;
			case "delete": {

				boolean rtv = false;
				try {
					// 视图需要定制删除方法！
					// rtv = svc.removeVevaluationById(id);
				} catch (Exception e) {
					e.printStackTrace();
				}
				if (rtv) {

					mv.addObject("message", "信息已经删除！");
					mv.addObject("jumpto", Common.getRefererUrl());
					mv.setViewName("jumper");
				} else {

					mv.addObject("message", "删除操作被外星人强行终止！");
					mv.addObject("jumpto", Common.getRefererUrl());
					mv.setViewName("jumperclick");
				}
			}
				break;
			case "hideitem":
			case "showitem": {
				UserShiro userShiro = (UserShiro) SecurityUtils.getSubject().getPrincipal();
				// svcb.updateVevaluationById(operate, id);
				mv.addObject("jumpto", Common.getRefererUrl());
				mv.setViewName("jumperatonce");
			}
				break;
			case "moveup":
			case "movedown": {
				if (!svcb.moveVevaluation(operate, "movedown", id, Vevaluation.SORTID)) {

					mv.addObject("message", "移动操作被外星人强行终止！");
					mv.addObject("jumpto", Common.getRefererUrl());
					mv.setViewName("jumperclick");
				} else {

					mv.addObject("jumpto", Common.getRefererUrl());
					mv.setViewName("jumperatonce");

				}
			}
				break;

			default: {

			}
				break;
			}
		} else {
			// 操作为空,默认为搜索,显示列表
			String qs = "";
			Integer pagenumber = Common.recordToSession(session, "pagenumber", pn + "", 1);
			Integer pagesize = Common.recordToSession(session, "pagesize", ps + "", 10);
			String keyword = Util.replaceSqlChar(kw);
			keyword = Common.recordToSession(session, "keyword_vevaluation", keyword, "");
			// 清除搜索条件
			if (!StringUtils.isBlank(clrkw)) {
				session.removeAttribute("keyword_vevaluation");
				keyword = null;
			}

			// 读取url中是否包含筛选条件
			Map<String, String> sqlin = new HashMap<String, String>();

			if (!StringUtils.isBlank(request.getParameter("curriculum_id"))) {
				sqlin.put(Vevaluation.CURRICULUM_ID + "_id", request.getParameter("curriculum_id"));
				mv.addObject(Vevaluation.CURRICULUM_ID + "_map",
						Util.splitToInteger(request.getParameter("curriculum_id"), ","));
				qs += Vevaluation.CURRICULUM_ID + "=" + request.getParameter("curriculum_id") + "&";
			}

			if (!StringUtils.isBlank(request.getParameter("subject_id"))) {
				sqlin.put(Vevaluation.SUBJECT_ID + "_id", request.getParameter("subject_id"));
				mv.addObject(Vevaluation.SUBJECT_ID + "_map",
						Util.splitToInteger(request.getParameter("subject_id"), ","));
				qs += Vevaluation.SUBJECT_ID + "=" + request.getParameter("subject_id") + "&";
			}

			if (!StringUtils.isBlank(request.getParameter("student_group_id"))) {
				sqlin.put(Vevaluation.STUDENT_GROUP_ID + "_id", request.getParameter("student_group_id"));
				mv.addObject(Vevaluation.STUDENT_GROUP_ID + "_map",
						Util.splitToInteger(request.getParameter("student_group_id"), ","));
				qs += Vevaluation.STUDENT_GROUP_ID + "=" + request.getParameter("student_group_id") + "&";
			}

			mv.addObject("pagetitle", "管理VIEW");
			mv.addObject("subtitle", "分页列表");
			mv.addObject("tabletitle", "管理");
			mv.addObject("pagename", pagename);// 当前页面的url

			if (!StringUtils.isBlank(keyword)) {
				mv.addObject("kw", keyword);
				qs += "kw=" + keyword + "&";
			}
			mv.addObject("qs", qs);

			// 在列表中需要筛选的条件
			Map<String, Object> params = new HashMap<String, Object>();
			// params.put(Vevaluation.ID, 0);
			// params.put(Vevaluation.IS_ACTIVED, 0);// 筛选条件1
			List<KeyAndValue> ordlist = new ArrayList<KeyAndValue>();
			ordlist.add(new KeyAndValue(Vevaluation.ID, "desc"));
			PagerList<Vevaluation> pagerlist = svcb.pagerListVevaluation(pagenumber, pagesize, keyword, sqlin, params,
					ordlist);
			if (pagerlist.getPager().getRecordsSize() == 0 && pagerlist.getPager().getPages() != 0
					&& pagerlist.getPager().getCurrent() > pagerlist.getPager().getPages()) {
				String url = Common.getBasePath() + pagename + "?" + qs + "pn=" + pagerlist.getPager().getPages();
				mv.addObject("jumpto", url);
				// System.out.println("Test.VevaluationGET()url=" + url);
				mv.setViewName("jumperatonce");
			} else {
				// Pager<Vevaluation> pager = new Pager<Vevaluation>(page);
				// System.out.println("Test.VevaluationGET()pager=" + pager.toString());
				mv.addObject("qs", qs);
				mv.addObject("pager", pagerlist.getPager());
				mv.addObject("list", pagerlist.getList());
				mv.setViewName(pagename);
			}
		}

		return mv;

	}

	// TODO: POST-vevaluation
	@RequestMapping(value = { "/vevaluation", "/vevaluation/", "/vevaluation/index.html" }, method = RequestMethod.POST)
	public ModelAndView vevaluationPOST(ModelAndView mv, HttpServletRequest request, HttpSession session)
			throws Exception {

		System.out.println(this.getClass().getName() + "POST");
		String pagename = "admin/vevaluation";
		UserShiro userShiro = (UserShiro) SecurityUtils.getSubject().getPrincipal();
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		String operate = request.getParameter("operate");
		// --------编辑修改共有的部分---------
		Boolean is_actived = StringUtils.isBlank(request.getParameter("is_actived")) ? false : true;
		Long begin_gmt = sdf.parse(request.getParameter("begin_gmt_date")).getTime();
		begin_gmt = begin_gmt > 0 ? begin_gmt : 0;
		Long end_gmt = sdf.parse(request.getParameter("end_gmt_date")).getTime();
		end_gmt = end_gmt > 0 ? end_gmt : 0;
		String content = "";
		if (!StringUtils.isBlank(request.getParameter("content"))) {
			content = request.getParameter("content");
		}
		content = Util.restrictLength(content, 50);
		String title = "";
		if (!StringUtils.isBlank(request.getParameter("title"))) {
			title = request.getParameter("title");
		}
		title = Util.restrictLength(title, 100);
		Integer sortid = 0;
		if (!StringUtils.isBlank(request.getParameter("sortid"))) {
			sortid = Integer.parseInt(request.getParameter("sortid"));
		}
		Integer curriculum_id = 0;
		if (!StringUtils.isBlank(request.getParameter("curriculum_id"))) {
			curriculum_id = Integer.parseInt(request.getParameter("curriculum_id"));
		}
		Integer subject_id = 0;
		if (!StringUtils.isBlank(request.getParameter("subject_id"))) {
			subject_id = Integer.parseInt(request.getParameter("subject_id"));
		}
		String subject_name = "";
		if (!StringUtils.isBlank(request.getParameter("subject_name"))) {
			subject_name = request.getParameter("subject_name");
		}
		subject_name = Util.restrictLength(subject_name, 45);
		Integer student_group_id = 0;
		if (!StringUtils.isBlank(request.getParameter("student_group_id"))) {
			student_group_id = Integer.parseInt(request.getParameter("student_group_id"));
		}
		String student_group_name = "";
		if (!StringUtils.isBlank(request.getParameter("student_group_name"))) {
			student_group_name = request.getParameter("student_group_name");
		}
		student_group_name = Util.restrictLength(student_group_name, 45);
		String student_group_code = "";
		if (!StringUtils.isBlank(request.getParameter("student_group_code"))) {
			student_group_code = request.getParameter("student_group_code");
		}
		student_group_code = Util.restrictLength(student_group_code, 8);
		// --------编辑修改共有的部分-结束---------
		// Integer create_userid = userShiro.getId();
		// 来源页面
		String referer = request.getParameter("referer");
		switch (operate) {
		case "addform": {

			// String password_digest = DigestUtils.md5Hex(password);
			// Integer sortid = (int) Math.round(svcb.maxVevaluation(Vevaluation.SORTID)) +
			// 1;
			Vevaluation it = new Vevaluation(is_actived, begin_gmt, end_gmt, content, title, sortid, curriculum_id,
					subject_id, subject_name, student_group_id, student_group_name, student_group_code);

			// ----------保存前检查逻辑问题---------------
			// 如：用户名必须唯一，手机号必须唯一
			Map<String, Object> params = new HashMap<String, Object>();
			// params.put(Vevaluation.ID, id);
			List<Vevaluation> list = svcb.listVevaluationByMap(params);
			if (StringUtils.isBlank("") || StringUtils.isBlank("")) {

				mv.addObject("message", "你输入的信息没有通过星际外交部的严格审核，请重新输入！");
				mv.addObject("jumpto", pagename);
				mv.setViewName("jumperback");
				return mv;
			} else if (list.size() > 0) {

				// 输入内容中，有些内容要求值唯一！
				mv.addObject("message", "你输入的信息已经被外星人抢先注册！");
				mv.addObject("jumpto", pagename);
				mv.setViewName("jumperback");
				return mv;
			} else {

				// 视图需要定制新增方法！
				// svcb.saveVevaluation(it);
			}
			// ----------保存前检查逻辑问题结束------------

			mv.addObject("message", "信息已经保存！");
		}
			break;
		case "editform": {
			Integer id = 0;
			if (!StringUtils.isBlank(request.getParameter("id"))) {
				id = Integer.parseInt(request.getParameter("id"));
			}
			// update_gmt = sdf.parse(request.getParameter("update_gmt_date")).getTime();
			// String password_digest = DigestUtils.md5Hex(password);

			// ----------保存前检查逻辑上是否有冲突---------------
			// 如：用户名必须唯一，手机号必须唯一
			Map<String, Object> params = new HashMap<String, Object>();
			params.put(Vevaluation.ID, id);
			List<Vevaluation> list = svcb.listVevaluationByMap(params);
			if (list.size() > 1 || (list.size() == 1 && list.get(0).getId() != id)) {

				mv.addObject("message", "你输入的手机号码已经被外星人抢先注册！");
				mv.addObject("jumpto", pagename);
				mv.setViewName("jumperback");
				return mv;
			} else {
				svcb.updateVevaluationById(is_actived, begin_gmt, end_gmt, content, title, sortid, curriculum_id,
						new Date().getTime(), subject_id, subject_name, student_group_id, student_group_name,
						student_group_code, id);

			}
			// ----------保存前检查逻辑问题结束------------

			mv.addObject("message", "信息已经修改！");

		}
			break;

		default:
			System.out.println(this.getClass().getName() + "没有对应的operate=" + operate);
			break;
		}

		mv.addObject("jumpto", referer);
		mv.setViewName("jumper");

		return mv;
	}

	// TODO: GET-vevaluation_point
	@RequestMapping(value = { "/vevaluation_point", "/vevaluation_point/",
			"/vevaluation_point/index.html" }, method = RequestMethod.GET)
	public ModelAndView vevaluation_pointGET(ModelAndView mv, @RequestParam(value = "kw", required = false) String kw,
			@RequestParam(value = "clrkw", required = false) String clrkw,
			@RequestParam(value = "operate", required = false) String operate,
			@RequestParam(value = "pn", required = false) Integer pn,
			@RequestParam(value = "ps", required = false) Integer ps,
			@RequestParam(value = "id", required = false) Integer id, HttpServletRequest request, HttpSession session) {
		logger.info(this.getClass().getName());
		System.out.println(this.getClass().getName() + ",operate=" + operate + ",id=" + id + ",pn=" + pn + ",ps=" + ps
				+ ",kw=" + kw + ",clrkw=" + clrkw);
		mv.addObject("navitem", "Vevaluation_point");// 菜单项显示当前项
		String pagename = "test/vevaluation_point";
		// 新增和编辑，列表页面筛选也需要使用，页面部分都有一些预先读取的内容
		if (StringUtils.isBlank(operate) || operate.equals("add") || operate.equals("edit")) {
			// 新建、编辑、列表的条件筛选
			// 用于制作彩色的标签
			mv.addObject("tagpostfixlist", Common.tagPostfix);
			mv.addObject("subjectlist", svcb.listSubjectOrderByAsc(Subject.ID));
			mv.addObject("subjectmap", svcb.mapSubject());
		}
		// 新增和编辑，列表页面筛选也需要使用，页面部分都有一些预先读取的内容
		if (!StringUtils.isBlank(operate)) {
			// 操作不为空，增删改
			mv.addObject("operate", operate);
			switch (operate) {
			case "add": {
				mv.addObject("pagetitle", "管理VIEW");
				mv.addObject("subtitle", "新增VIEW");
				mv.addObject("formtitle", "新增VIEW");
				mv.addObject("pagename", pagename);
				// 默认作者是当前用户
				UserShiro userShiro = (UserShiro) SecurityUtils.getSubject().getPrincipal();
				mv.addObject("author", userShiro.getLogin_name());
				// 默认置顶3天
				Calendar calendar = Calendar.getInstance();
				calendar.add(Calendar.DATE, 3);
				SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
				String toptill_date = sdf.format(new Date(calendar.getTimeInMillis()));
				mv.addObject("toptill_date", toptill_date);
				// 默认头像
				mv.addObject("wechat_headimgurl", Common.userheadimgurl);
				mv.setViewName(pagename);
			}
				break;
			case "edit": {

				mv.addObject("pagetitle", "管理VIEW");
				mv.addObject("subtitle", "修改VIEW");
				mv.addObject("formtitle", "修改VIEW");
				mv.addObject("pagename", pagename);
				mv.addObject("referer", Common.getRefererUrl());

				// 读取当前已有信息
				Vevaluation_point it = svcb.getVevaluation_pointById(id);
				// 修正信息：如默认头像
				mv.addObject("it", it);
				mv.setViewName(pagename);
			}
				break;
			case "delete": {

				boolean rtv = false;
				try {
					// 视图需要定制删除方法！
					// rtv = svc.removeVevaluation_pointById(id);
				} catch (Exception e) {
					e.printStackTrace();
				}
				if (rtv) {

					mv.addObject("message", "信息已经删除！");
					mv.addObject("jumpto", Common.getRefererUrl());
					mv.setViewName("jumper");
				} else {

					mv.addObject("message", "删除操作被外星人强行终止！");
					mv.addObject("jumpto", Common.getRefererUrl());
					mv.setViewName("jumperclick");
				}
			}
				break;
			case "hideitem":
			case "showitem": {
				UserShiro userShiro = (UserShiro) SecurityUtils.getSubject().getPrincipal();
				// svcb.updateVevaluation_pointById(operate, id);
				mv.addObject("jumpto", Common.getRefererUrl());
				mv.setViewName("jumperatonce");
			}
				break;

			default: {

			}
				break;
			}
		} else {
			// 操作为空,默认为搜索,显示列表
			String qs = "";
			Integer pagenumber = Common.recordToSession(session, "pagenumber", pn + "", 1);
			Integer pagesize = Common.recordToSession(session, "pagesize", ps + "", 10);
			String keyword = Util.replaceSqlChar(kw);
			keyword = Common.recordToSession(session, "keyword_vevaluation_point", keyword, "");
			// 清除搜索条件
			if (!StringUtils.isBlank(clrkw)) {
				session.removeAttribute("keyword_vevaluation_point");
				keyword = null;
			}

			// 读取url中是否包含筛选条件
			Map<String, String> sqlin = new HashMap<String, String>();

			if (!StringUtils.isBlank(request.getParameter("subject_id"))) {
				sqlin.put(Vevaluation_point.SUBJECT_ID + "_id", request.getParameter("subject_id"));
				mv.addObject(Vevaluation_point.SUBJECT_ID + "_map",
						Util.splitToInteger(request.getParameter("subject_id"), ","));
				qs += Vevaluation_point.SUBJECT_ID + "=" + request.getParameter("subject_id") + "&";
			}

			mv.addObject("pagetitle", "管理VIEW");
			mv.addObject("subtitle", "分页列表");
			mv.addObject("tabletitle", "管理");
			mv.addObject("pagename", pagename);// 当前页面的url

			if (!StringUtils.isBlank(keyword)) {
				mv.addObject("kw", keyword);
				qs += "kw=" + keyword + "&";
			}
			mv.addObject("qs", qs);

			// 在列表中需要筛选的条件
			Map<String, Object> params = new HashMap<String, Object>();
			// params.put(Vevaluation_point.ID, 0);
			// params.put(Vevaluation_point.SUBJECT_ID, 0);// 筛选条件1
			List<KeyAndValue> ordlist = new ArrayList<KeyAndValue>();
			ordlist.add(new KeyAndValue(Vevaluation_point.ID, "desc"));
			PagerList<Vevaluation_point> pagerlist = svcb.pagerListVevaluation_point(pagenumber, pagesize, keyword,
					sqlin, params, ordlist);
			if (pagerlist.getPager().getRecordsSize() == 0 && pagerlist.getPager().getPages() != 0
					&& pagerlist.getPager().getCurrent() > pagerlist.getPager().getPages()) {
				String url = Common.getBasePath() + pagename + "?" + qs + "pn=" + pagerlist.getPager().getPages();
				mv.addObject("jumpto", url);
				// System.out.println("Test.Vevaluation_pointGET()url=" + url);
				mv.setViewName("jumperatonce");
			} else {
				// Pager<Vevaluation_point> pager = new Pager<Vevaluation_point>(page);
				// System.out.println("Test.Vevaluation_pointGET()pager=" + pager.toString());
				mv.addObject("qs", qs);
				mv.addObject("pager", pagerlist.getPager());
				mv.addObject("list", pagerlist.getList());
				mv.setViewName(pagename);
			}
		}

		return mv;

	}

	// TODO: POST-vevaluation_point
	@RequestMapping(value = { "/vevaluation_point", "/vevaluation_point/",
			"/vevaluation_point/index.html" }, method = RequestMethod.POST)
	public ModelAndView vevaluation_pointPOST(ModelAndView mv, HttpServletRequest request, HttpSession session)
			throws Exception {

		System.out.println(this.getClass().getName() + "POST");
		String pagename = "admin/vevaluation_point";
		UserShiro userShiro = (UserShiro) SecurityUtils.getSubject().getPrincipal();
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		String operate = request.getParameter("operate");
		// --------编辑修改共有的部分---------
		Integer subject_id = 0;
		if (!StringUtils.isBlank(request.getParameter("subject_id"))) {
			subject_id = Integer.parseInt(request.getParameter("subject_id"));
		}
		Boolean is_actived = StringUtils.isBlank(request.getParameter("is_actived")) ? false : true;
		Integer type = 0;
		if (!StringUtils.isBlank(request.getParameter("type"))) {
			type = Integer.parseInt(request.getParameter("type"));
		}
		Integer difficulty = 0;
		if (!StringUtils.isBlank(request.getParameter("difficulty"))) {
			difficulty = Integer.parseInt(request.getParameter("difficulty"));
		}
		String content = "";
		if (!StringUtils.isBlank(request.getParameter("content"))) {
			content = request.getParameter("content");
		}
		content = Util.restrictLength(content, 65535);
		String subject_name = "";
		if (!StringUtils.isBlank(request.getParameter("subject_name"))) {
			subject_name = request.getParameter("subject_name");
		}
		subject_name = Util.restrictLength(subject_name, 45);
		String evaluation_type_name = "";
		if (!StringUtils.isBlank(request.getParameter("evaluation_type_name"))) {
			evaluation_type_name = request.getParameter("evaluation_type_name");
		}
		evaluation_type_name = Util.restrictLength(evaluation_type_name, 45);
		Boolean subject_is_actived = StringUtils.isBlank(request.getParameter("subject_is_actived")) ? false : true;
		// --------编辑修改共有的部分-结束---------
		// Integer create_userid = userShiro.getId();
		// 来源页面
		String referer = request.getParameter("referer");
		switch (operate) {
		case "addform": {

			// String password_digest = DigestUtils.md5Hex(password);
			// Integer sortid = (int)
			// Math.round(svcb.maxVevaluation_point(Vevaluation_point.SORTID)) + 1;
			Vevaluation_point it = new Vevaluation_point(subject_id, is_actived, type, difficulty, content,
					subject_name, evaluation_type_name, subject_is_actived);

			// ----------保存前检查逻辑问题---------------
			// 如：用户名必须唯一，手机号必须唯一
			Map<String, Object> params = new HashMap<String, Object>();
			// params.put(Vevaluation_point.ID, id);
			List<Vevaluation_point> list = svcb.listVevaluation_pointByMap(params);
			if (StringUtils.isBlank("") || StringUtils.isBlank("")) {

				mv.addObject("message", "你输入的信息没有通过星际外交部的严格审核，请重新输入！");
				mv.addObject("jumpto", pagename);
				mv.setViewName("jumperback");
				return mv;
			} else if (list.size() > 0) {

				// 输入内容中，有些内容要求值唯一！
				mv.addObject("message", "你输入的信息已经被外星人抢先注册！");
				mv.addObject("jumpto", pagename);
				mv.setViewName("jumperback");
				return mv;
			} else {

				// 视图需要定制新增方法！
				// svcb.saveVevaluation_point(it);
			}
			// ----------保存前检查逻辑问题结束------------

			mv.addObject("message", "信息已经保存！");
		}
			break;
		case "editform": {
			Integer id = 0;
			if (!StringUtils.isBlank(request.getParameter("id"))) {
				id = Integer.parseInt(request.getParameter("id"));
			}
			// update_gmt = sdf.parse(request.getParameter("update_gmt_date")).getTime();
			// String password_digest = DigestUtils.md5Hex(password);

			// ----------保存前检查逻辑上是否有冲突---------------
			// 如：用户名必须唯一，手机号必须唯一
			Map<String, Object> params = new HashMap<String, Object>();
			params.put(Vevaluation_point.ID, id);
			List<Vevaluation_point> list = svcb.listVevaluation_pointByMap(params);
			if (list.size() > 1 || (list.size() == 1 && list.get(0).getId() != id)) {

				mv.addObject("message", "你输入的手机号码已经被外星人抢先注册！");
				mv.addObject("jumpto", pagename);
				mv.setViewName("jumperback");
				return mv;
			} else {
				svcb.updateVevaluation_pointById(subject_id, is_actived, type, difficulty, content,
						new Date().getTime(), subject_name, evaluation_type_name, subject_is_actived, id);

			}
			// ----------保存前检查逻辑问题结束------------

			mv.addObject("message", "信息已经修改！");

		}
			break;

		default:
			System.out.println(this.getClass().getName() + "没有对应的operate=" + operate);
			break;
		}

		mv.addObject("jumpto", referer);
		mv.setViewName("jumper");

		return mv;
	}

	// TODO: GET-vexperiment_record
	@RequestMapping(value = { "/vexperiment_record", "/vexperiment_record/",
			"/vexperiment_record/index.html" }, method = RequestMethod.GET)
	public ModelAndView vexperiment_recordGET(ModelAndView mv, @RequestParam(value = "kw", required = false) String kw,
			@RequestParam(value = "clrkw", required = false) String clrkw,
			@RequestParam(value = "operate", required = false) String operate,
			@RequestParam(value = "pn", required = false) Integer pn,
			@RequestParam(value = "ps", required = false) Integer ps,
			@RequestParam(value = "id", required = false) Integer id, HttpServletRequest request, HttpSession session) {
		logger.info(this.getClass().getName());
		System.out.println(this.getClass().getName() + ",operate=" + operate + ",id=" + id + ",pn=" + pn + ",ps=" + ps
				+ ",kw=" + kw + ",clrkw=" + clrkw);
		mv.addObject("navitem", "Vexperiment_record");// 菜单项显示当前项
		String pagename = "test/vexperiment_record";
		// 新增和编辑，列表页面筛选也需要使用，页面部分都有一些预先读取的内容
		if (StringUtils.isBlank(operate) || operate.equals("add") || operate.equals("edit")) {
			// 新建、编辑、列表的条件筛选
			// 用于制作彩色的标签
			mv.addObject("tagpostfixlist", Common.tagPostfix);
			mv.addObject("studentlist", svcb.listStudentOrderByAsc(Student.ID));
			mv.addObject("studentmap", svcb.mapStudent());
			mv.addObject("experimentlist", svcb.listExperimentOrderByAsc(Experiment.ID));
			mv.addObject("experimentmap", svcb.mapExperiment());
			mv.addObject("curriculumlist", svcb.listCurriculumOrderByAsc(Curriculum.ID));
			mv.addObject("curriculummap", svcb.mapCurriculum());
			mv.addObject("subjectlist", svcb.listSubjectOrderByAsc(Subject.ID));
			mv.addObject("subjectmap", svcb.mapSubject());
			mv.addObject("userlist", svcb.listUserOrderByAsc(User.ID));
			mv.addObject("usermap", svcb.mapUser());
			mv.addObject("student_grouplist", svcb.listStudent_groupOrderByAsc(Student_group.ID));
			mv.addObject("student_groupmap", svcb.mapStudent_group());
		}
		// 新增和编辑，列表页面筛选也需要使用，页面部分都有一些预先读取的内容
		if (!StringUtils.isBlank(operate)) {
			// 操作不为空，增删改
			mv.addObject("operate", operate);
			switch (operate) {
			case "add": {
				mv.addObject("pagetitle", "管理VIEW");
				mv.addObject("subtitle", "新增VIEW");
				mv.addObject("formtitle", "新增VIEW");
				mv.addObject("pagename", pagename);
				// 默认作者是当前用户
				UserShiro userShiro = (UserShiro) SecurityUtils.getSubject().getPrincipal();
				mv.addObject("author", userShiro.getLogin_name());
				// 默认置顶3天
				Calendar calendar = Calendar.getInstance();
				calendar.add(Calendar.DATE, 3);
				SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
				String toptill_date = sdf.format(new Date(calendar.getTimeInMillis()));
				mv.addObject("toptill_date", toptill_date);
				// 默认头像
				mv.addObject("wechat_headimgurl", Common.userheadimgurl);
				mv.setViewName(pagename);
			}
				break;
			case "edit": {

				mv.addObject("pagetitle", "管理VIEW");
				mv.addObject("subtitle", "修改VIEW");
				mv.addObject("formtitle", "修改VIEW");
				mv.addObject("pagename", pagename);
				mv.addObject("referer", Common.getRefererUrl());

				// 读取当前已有信息
				Vexperiment_record it = svcb.getVexperiment_recordById(id);
				// 修正信息：如默认头像
				mv.addObject("it", it);
				mv.setViewName(pagename);
			}
				break;
			case "delete": {

				boolean rtv = false;
				try {
					// 视图需要定制删除方法！
					// rtv = svc.removeVexperiment_recordById(id);
				} catch (Exception e) {
					e.printStackTrace();
				}
				if (rtv) {

					mv.addObject("message", "信息已经删除！");
					mv.addObject("jumpto", Common.getRefererUrl());
					mv.setViewName("jumper");
				} else {

					mv.addObject("message", "删除操作被外星人强行终止！");
					mv.addObject("jumpto", Common.getRefererUrl());
					mv.setViewName("jumperclick");
				}
			}
				break;
			case "hideitem":
			case "showitem": {
				UserShiro userShiro = (UserShiro) SecurityUtils.getSubject().getPrincipal();
				// svcb.updateVexperiment_recordById(operate, id);
				mv.addObject("jumpto", Common.getRefererUrl());
				mv.setViewName("jumperatonce");
			}
				break;

			default: {

			}
				break;
			}
		} else {
			// 操作为空,默认为搜索,显示列表
			String qs = "";
			Integer pagenumber = Common.recordToSession(session, "pagenumber", pn + "", 1);
			Integer pagesize = Common.recordToSession(session, "pagesize", ps + "", 10);
			String keyword = Util.replaceSqlChar(kw);
			keyword = Common.recordToSession(session, "keyword_vexperiment_record", keyword, "");
			// 清除搜索条件
			if (!StringUtils.isBlank(clrkw)) {
				session.removeAttribute("keyword_vexperiment_record");
				keyword = null;
			}

			// 读取url中是否包含筛选条件
			Map<String, String> sqlin = new HashMap<String, String>();

			if (!StringUtils.isBlank(request.getParameter("student_id"))) {
				sqlin.put(Vexperiment_record.STUDENT_ID + "_id", request.getParameter("student_id"));
				mv.addObject(Vexperiment_record.STUDENT_ID + "_map",
						Util.splitToInteger(request.getParameter("student_id"), ","));
				qs += Vexperiment_record.STUDENT_ID + "=" + request.getParameter("student_id") + "&";
			}

			if (!StringUtils.isBlank(request.getParameter("experiment_id"))) {
				sqlin.put(Vexperiment_record.EXPERIMENT_ID + "_id", request.getParameter("experiment_id"));
				mv.addObject(Vexperiment_record.EXPERIMENT_ID + "_map",
						Util.splitToInteger(request.getParameter("experiment_id"), ","));
				qs += Vexperiment_record.EXPERIMENT_ID + "=" + request.getParameter("experiment_id") + "&";
			}

			if (!StringUtils.isBlank(request.getParameter("curriculum_id"))) {
				sqlin.put(Vexperiment_record.CURRICULUM_ID + "_id", request.getParameter("curriculum_id"));
				mv.addObject(Vexperiment_record.CURRICULUM_ID + "_map",
						Util.splitToInteger(request.getParameter("curriculum_id"), ","));
				qs += Vexperiment_record.CURRICULUM_ID + "=" + request.getParameter("curriculum_id") + "&";
			}

			if (!StringUtils.isBlank(request.getParameter("subject_id"))) {
				sqlin.put(Vexperiment_record.SUBJECT_ID + "_id", request.getParameter("subject_id"));
				mv.addObject(Vexperiment_record.SUBJECT_ID + "_map",
						Util.splitToInteger(request.getParameter("subject_id"), ","));
				qs += Vexperiment_record.SUBJECT_ID + "=" + request.getParameter("subject_id") + "&";
			}

			if (!StringUtils.isBlank(request.getParameter("user_id"))) {
				sqlin.put(Vexperiment_record.USER_ID + "_id", request.getParameter("user_id"));
				mv.addObject(Vexperiment_record.USER_ID + "_map",
						Util.splitToInteger(request.getParameter("user_id"), ","));
				qs += Vexperiment_record.USER_ID + "=" + request.getParameter("user_id") + "&";
			}

			if (!StringUtils.isBlank(request.getParameter("student_group_id"))) {
				sqlin.put(Vexperiment_record.STUDENT_GROUP_ID + "_id", request.getParameter("student_group_id"));
				mv.addObject(Vexperiment_record.STUDENT_GROUP_ID + "_map",
						Util.splitToInteger(request.getParameter("student_group_id"), ","));
				qs += Vexperiment_record.STUDENT_GROUP_ID + "=" + request.getParameter("student_group_id") + "&";
			}

			mv.addObject("pagetitle", "管理VIEW");
			mv.addObject("subtitle", "分页列表");
			mv.addObject("tabletitle", "管理");
			mv.addObject("pagename", pagename);// 当前页面的url

			if (!StringUtils.isBlank(keyword)) {
				mv.addObject("kw", keyword);
				qs += "kw=" + keyword + "&";
			}
			mv.addObject("qs", qs);

			// 在列表中需要筛选的条件
			Map<String, Object> params = new HashMap<String, Object>();
			// params.put(Vexperiment_record.ID, 0);
			// params.put(Vexperiment_record.STUDENT_ID, 0);// 筛选条件1
			List<KeyAndValue> ordlist = new ArrayList<KeyAndValue>();
			ordlist.add(new KeyAndValue(Vexperiment_record.ID, "desc"));
			PagerList<Vexperiment_record> pagerlist = svcb.pagerListVexperiment_record(pagenumber, pagesize, keyword,
					sqlin, params, ordlist);
			if (pagerlist.getPager().getRecordsSize() == 0 && pagerlist.getPager().getPages() != 0
					&& pagerlist.getPager().getCurrent() > pagerlist.getPager().getPages()) {
				String url = Common.getBasePath() + pagename + "?" + qs + "pn=" + pagerlist.getPager().getPages();
				mv.addObject("jumpto", url);
				// System.out.println("Test.Vexperiment_recordGET()url=" + url);
				mv.setViewName("jumperatonce");
			} else {
				// Pager<Vexperiment_record> pager = new Pager<Vexperiment_record>(page);
				// System.out.println("Test.Vexperiment_recordGET()pager=" + pager.toString());
				mv.addObject("qs", qs);
				mv.addObject("pager", pagerlist.getPager());
				mv.addObject("list", pagerlist.getList());
				mv.setViewName(pagename);
			}
		}

		return mv;

	}

	// TODO: POST-vexperiment_record
	@RequestMapping(value = { "/vexperiment_record", "/vexperiment_record/",
			"/vexperiment_record/index.html" }, method = RequestMethod.POST)
	public ModelAndView vexperiment_recordPOST(ModelAndView mv, HttpServletRequest request, HttpSession session)
			throws Exception {

		System.out.println(this.getClass().getName() + "POST");
		String pagename = "admin/vexperiment_record";
		UserShiro userShiro = (UserShiro) SecurityUtils.getSubject().getPrincipal();
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		String operate = request.getParameter("operate");
		// --------编辑修改共有的部分---------
		Integer student_id = 0;
		if (!StringUtils.isBlank(request.getParameter("student_id"))) {
			student_id = Integer.parseInt(request.getParameter("student_id"));
		}
		Integer experiment_id = 0;
		if (!StringUtils.isBlank(request.getParameter("experiment_id"))) {
			experiment_id = Integer.parseInt(request.getParameter("experiment_id"));
		}
		Integer curriculum_id = 0;
		if (!StringUtils.isBlank(request.getParameter("curriculum_id"))) {
			curriculum_id = Integer.parseInt(request.getParameter("curriculum_id"));
		}
		String truename = "";
		if (!StringUtils.isBlank(request.getParameter("truename"))) {
			truename = request.getParameter("truename");
		}
		truename = Util.restrictLength(truename, 20);
		String sno = "";
		if (!StringUtils.isBlank(request.getParameter("sno"))) {
			sno = request.getParameter("sno");
		}
		sno = Util.restrictLength(sno, 10);
		String sno_exp = "";
		if (!StringUtils.isBlank(request.getParameter("sno_exp"))) {
			sno_exp = request.getParameter("sno_exp");
		}
		sno_exp = Util.restrictLength(sno_exp, 10);
		String classcode = "";
		if (!StringUtils.isBlank(request.getParameter("classcode"))) {
			classcode = request.getParameter("classcode");
		}
		classcode = Util.restrictLength(classcode, 8);
		Integer score = 0;
		if (!StringUtils.isBlank(request.getParameter("score"))) {
			score = Integer.parseInt(request.getParameter("score"));
		}
		Boolean student_group_is_actived = StringUtils.isBlank(request.getParameter("student_group_is_actived")) ? false
				: true;
		Boolean student_is_actived = StringUtils.isBlank(request.getParameter("student_is_actived")) ? false : true;
		Boolean curriculum_is_actived = StringUtils.isBlank(request.getParameter("curriculum_is_actived")) ? false
				: true;
		Boolean experiment_curriculum_is_actived = StringUtils
				.isBlank(request.getParameter("experiment_curriculum_is_actived")) ? false : true;
		Boolean subject_is_actived = StringUtils.isBlank(request.getParameter("subject_is_actived")) ? false : true;
		String student_group_code = "";
		if (!StringUtils.isBlank(request.getParameter("student_group_code"))) {
			student_group_code = request.getParameter("student_group_code");
		}
		student_group_code = Util.restrictLength(student_group_code, 8);
		String student_group_name = "";
		if (!StringUtils.isBlank(request.getParameter("student_group_name"))) {
			student_group_name = request.getParameter("student_group_name");
		}
		student_group_name = Util.restrictLength(student_group_name, 45);
		String comment = "";
		if (!StringUtils.isBlank(request.getParameter("comment"))) {
			comment = request.getParameter("comment");
		}
		comment = Util.restrictLength(comment, 100);
		String mainflow = "";
		if (!StringUtils.isBlank(request.getParameter("mainflow"))) {
			mainflow = request.getParameter("mainflow");
		}
		//mainflow = Util.restrictLength(mainflow, 4294967295);
		String report = "";
		if (!StringUtils.isBlank(request.getParameter("report"))) {
			report = request.getParameter("report");
		}
		report = Util.restrictLength(report, 65535);
		String result = "";
		if (!StringUtils.isBlank(request.getParameter("result"))) {
			result = request.getParameter("result");
		}
		result = Util.restrictLength(result, 65535);
		Long submit = sdf.parse(request.getParameter("submit_date")).getTime();
		submit = submit > 0 ? submit : 0;
		String scorescript = "";
		if (!StringUtils.isBlank(request.getParameter("scorescript"))) {
			scorescript = request.getParameter("scorescript");
		}
		scorescript = Util.restrictLength(scorescript, 45);
		String wechat_openid = "";
		if (!StringUtils.isBlank(request.getParameter("wechat_openid"))) {
			wechat_openid = request.getParameter("wechat_openid");
		}
		wechat_openid = Util.restrictLength(wechat_openid, 45);
		String experiment_title = "";
		if (!StringUtils.isBlank(request.getParameter("experiment_title"))) {
			experiment_title = request.getParameter("experiment_title");
		}
		experiment_title = Util.restrictLength(experiment_title, 45);
		String experiment_content = "";
		if (!StringUtils.isBlank(request.getParameter("experiment_content"))) {
			experiment_content = request.getParameter("experiment_content");
		}
		experiment_content = Util.restrictLength(experiment_content, 65535);
		String experiment_purposes_requirement = "";
		if (!StringUtils.isBlank(request.getParameter("experiment_purposes_requirement"))) {
			experiment_purposes_requirement = request.getParameter("experiment_purposes_requirement");
		}
		experiment_purposes_requirement = Util.restrictLength(experiment_purposes_requirement, 65535);
		String subject_name = "";
		if (!StringUtils.isBlank(request.getParameter("subject_name"))) {
			subject_name = request.getParameter("subject_name");
		}
		subject_name = Util.restrictLength(subject_name, 45);
		Integer subject_id = 0;
		if (!StringUtils.isBlank(request.getParameter("subject_id"))) {
			subject_id = Integer.parseInt(request.getParameter("subject_id"));
		}
		Integer user_id = 0;
		if (!StringUtils.isBlank(request.getParameter("user_id"))) {
			user_id = Integer.parseInt(request.getParameter("user_id"));
		}
		Long closing_gmt = sdf.parse(request.getParameter("closing_gmt_date")).getTime();
		closing_gmt = closing_gmt > 0 ? closing_gmt : 0;
		Long opening_gmt = sdf.parse(request.getParameter("opening_gmt_date")).getTime();
		opening_gmt = opening_gmt > 0 ? opening_gmt : 0;
		Integer curriculum_student_groupid = 0;
		if (!StringUtils.isBlank(request.getParameter("curriculum_student_groupid"))) {
			curriculum_student_groupid = Integer.parseInt(request.getParameter("curriculum_student_groupid"));
		}
		Integer student_group_id = 0;
		if (!StringUtils.isBlank(request.getParameter("student_group_id"))) {
			student_group_id = Integer.parseInt(request.getParameter("student_group_id"));
		}
		Integer reviewstate = 0;
		if (!StringUtils.isBlank(request.getParameter("reviewstate"))) {
			reviewstate = Integer.parseInt(request.getParameter("reviewstate"));
		}
		Integer experiment_curriculumid = 0;
		if (!StringUtils.isBlank(request.getParameter("experiment_curriculumid"))) {
			experiment_curriculumid = Integer.parseInt(request.getParameter("experiment_curriculumid"));
		}
		// --------编辑修改共有的部分-结束---------
		// Integer create_userid = userShiro.getId();
		// 来源页面
		String referer = request.getParameter("referer");
		switch (operate) {
		case "addform": {

			// String password_digest = DigestUtils.md5Hex(password);
			// Integer sortid = (int)
			// Math.round(svcb.maxVexperiment_record(Vexperiment_record.SORTID)) + 1;
			Vexperiment_record it = new Vexperiment_record(student_id, experiment_id, curriculum_id, truename, sno,
					sno_exp, classcode, score, student_group_is_actived, student_is_actived, curriculum_is_actived,
					experiment_curriculum_is_actived, subject_is_actived, student_group_code, student_group_name,
					comment, mainflow, report, result, submit, scorescript, wechat_openid, experiment_title,
					experiment_content, experiment_purposes_requirement, subject_name, subject_id, user_id, closing_gmt,
					opening_gmt, curriculum_student_groupid, student_group_id, reviewstate, experiment_curriculumid);

			// ----------保存前检查逻辑问题---------------
			// 如：用户名必须唯一，手机号必须唯一
			Map<String, Object> params = new HashMap<String, Object>();
			// params.put(Vexperiment_record.ID, id);
			List<Vexperiment_record> list = svcb.listVexperiment_recordByMap(params);
			if (StringUtils.isBlank("") || StringUtils.isBlank("")) {

				mv.addObject("message", "你输入的信息没有通过星际外交部的严格审核，请重新输入！");
				mv.addObject("jumpto", pagename);
				mv.setViewName("jumperback");
				return mv;
			} else if (list.size() > 0) {

				// 输入内容中，有些内容要求值唯一！
				mv.addObject("message", "你输入的信息已经被外星人抢先注册！");
				mv.addObject("jumpto", pagename);
				mv.setViewName("jumperback");
				return mv;
			} else {

				// 视图需要定制新增方法！
				// svcb.saveVexperiment_record(it);
			}
			// ----------保存前检查逻辑问题结束------------

			mv.addObject("message", "信息已经保存！");
		}
			break;
		case "editform": {
			Integer id = 0;
			if (!StringUtils.isBlank(request.getParameter("id"))) {
				id = Integer.parseInt(request.getParameter("id"));
			}
			// update_gmt = sdf.parse(request.getParameter("update_gmt_date")).getTime();
			// String password_digest = DigestUtils.md5Hex(password);

			// ----------保存前检查逻辑上是否有冲突---------------
			// 如：用户名必须唯一，手机号必须唯一
			Map<String, Object> params = new HashMap<String, Object>();
			params.put(Vexperiment_record.ID, id);
			List<Vexperiment_record> list = svcb.listVexperiment_recordByMap(params);
			if (list.size() > 1 || (list.size() == 1 && list.get(0).getId() != id)) {

				mv.addObject("message", "你输入的手机号码已经被外星人抢先注册！");
				mv.addObject("jumpto", pagename);
				mv.setViewName("jumperback");
				return mv;
			} else {
				svcb.updateVexperiment_recordById(student_id, experiment_id, curriculum_id, truename, sno, sno_exp,
						classcode, score, student_group_is_actived, student_is_actived, curriculum_is_actived,
						experiment_curriculum_is_actived, subject_is_actived, student_group_code, student_group_name,
						comment, mainflow, report, result, submit, scorescript, new Date().getTime(), wechat_openid,
						experiment_title, experiment_content, experiment_purposes_requirement, subject_name, subject_id,
						user_id, closing_gmt, opening_gmt, curriculum_student_groupid, student_group_id, reviewstate,
						experiment_curriculumid, id);

			}
			// ----------保存前检查逻辑问题结束------------

			mv.addObject("message", "信息已经修改！");

		}
			break;

		default:
			System.out.println(this.getClass().getName() + "没有对应的operate=" + operate);
			break;
		}

		mv.addObject("jumpto", referer);
		mv.setViewName("jumper");

		return mv;
	}

	// TODO: GET-vexperiment_record_mini
	@RequestMapping(value = { "/vexperiment_record_mini", "/vexperiment_record_mini/",
			"/vexperiment_record_mini/index.html" }, method = RequestMethod.GET)
	public ModelAndView vexperiment_record_miniGET(ModelAndView mv,
			@RequestParam(value = "kw", required = false) String kw,
			@RequestParam(value = "clrkw", required = false) String clrkw,
			@RequestParam(value = "operate", required = false) String operate,
			@RequestParam(value = "pn", required = false) Integer pn,
			@RequestParam(value = "ps", required = false) Integer ps,
			@RequestParam(value = "id", required = false) Integer id, HttpServletRequest request, HttpSession session) {
		logger.info(this.getClass().getName());
		System.out.println(this.getClass().getName() + ",operate=" + operate + ",id=" + id + ",pn=" + pn + ",ps=" + ps
				+ ",kw=" + kw + ",clrkw=" + clrkw);
		mv.addObject("navitem", "Vexperiment_record_mini");// 菜单项显示当前项
		String pagename = "test/vexperiment_record_mini";
		// 新增和编辑，列表页面筛选也需要使用，页面部分都有一些预先读取的内容
		if (StringUtils.isBlank(operate) || operate.equals("add") || operate.equals("edit")) {
			// 新建、编辑、列表的条件筛选
			// 用于制作彩色的标签
			mv.addObject("tagpostfixlist", Common.tagPostfix);
			mv.addObject("studentlist", svcb.listStudentOrderByAsc(Student.ID));
			mv.addObject("studentmap", svcb.mapStudent());
			mv.addObject("experimentlist", svcb.listExperimentOrderByAsc(Experiment.ID));
			mv.addObject("experimentmap", svcb.mapExperiment());
			mv.addObject("curriculumlist", svcb.listCurriculumOrderByAsc(Curriculum.ID));
			mv.addObject("curriculummap", svcb.mapCurriculum());
			mv.addObject("subjectlist", svcb.listSubjectOrderByAsc(Subject.ID));
			mv.addObject("subjectmap", svcb.mapSubject());
			mv.addObject("userlist", svcb.listUserOrderByAsc(User.ID));
			mv.addObject("usermap", svcb.mapUser());
			mv.addObject("student_grouplist", svcb.listStudent_groupOrderByAsc(Student_group.ID));
			mv.addObject("student_groupmap", svcb.mapStudent_group());
		}
		// 新增和编辑，列表页面筛选也需要使用，页面部分都有一些预先读取的内容
		if (!StringUtils.isBlank(operate)) {
			// 操作不为空，增删改
			mv.addObject("operate", operate);
			switch (operate) {
			case "add": {
				mv.addObject("pagetitle", "管理VIEW");
				mv.addObject("subtitle", "新增VIEW");
				mv.addObject("formtitle", "新增VIEW");
				mv.addObject("pagename", pagename);
				// 默认作者是当前用户
				UserShiro userShiro = (UserShiro) SecurityUtils.getSubject().getPrincipal();
				mv.addObject("author", userShiro.getLogin_name());
				// 默认置顶3天
				Calendar calendar = Calendar.getInstance();
				calendar.add(Calendar.DATE, 3);
				SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
				String toptill_date = sdf.format(new Date(calendar.getTimeInMillis()));
				mv.addObject("toptill_date", toptill_date);
				// 默认头像
				mv.addObject("wechat_headimgurl", Common.userheadimgurl);
				mv.setViewName(pagename);
			}
				break;
			case "edit": {

				mv.addObject("pagetitle", "管理VIEW");
				mv.addObject("subtitle", "修改VIEW");
				mv.addObject("formtitle", "修改VIEW");
				mv.addObject("pagename", pagename);
				mv.addObject("referer", Common.getRefererUrl());

				// 读取当前已有信息
				Vexperiment_record_mini it = svcb.getVexperiment_record_miniById(id);
				// 修正信息：如默认头像
				mv.addObject("it", it);
				mv.setViewName(pagename);
			}
				break;
			case "delete": {

				boolean rtv = false;
				try {
					// 视图需要定制删除方法！
					// rtv = svc.removeVexperiment_record_miniById(id);
				} catch (Exception e) {
					e.printStackTrace();
				}
				if (rtv) {

					mv.addObject("message", "信息已经删除！");
					mv.addObject("jumpto", Common.getRefererUrl());
					mv.setViewName("jumper");
				} else {

					mv.addObject("message", "删除操作被外星人强行终止！");
					mv.addObject("jumpto", Common.getRefererUrl());
					mv.setViewName("jumperclick");
				}
			}
				break;
			case "hideitem":
			case "showitem": {
				UserShiro userShiro = (UserShiro) SecurityUtils.getSubject().getPrincipal();
				// svcb.updateVexperiment_record_miniById(operate, id);
				mv.addObject("jumpto", Common.getRefererUrl());
				mv.setViewName("jumperatonce");
			}
				break;

			default: {

			}
				break;
			}
		} else {
			// 操作为空,默认为搜索,显示列表
			String qs = "";
			Integer pagenumber = Common.recordToSession(session, "pagenumber", pn + "", 1);
			Integer pagesize = Common.recordToSession(session, "pagesize", ps + "", 10);
			String keyword = Util.replaceSqlChar(kw);
			keyword = Common.recordToSession(session, "keyword_vexperiment_record_mini", keyword, "");
			// 清除搜索条件
			if (!StringUtils.isBlank(clrkw)) {
				session.removeAttribute("keyword_vexperiment_record_mini");
				keyword = null;
			}

			// 读取url中是否包含筛选条件
			Map<String, String> sqlin = new HashMap<String, String>();

			if (!StringUtils.isBlank(request.getParameter("student_id"))) {
				sqlin.put(Vexperiment_record_mini.STUDENT_ID + "_id", request.getParameter("student_id"));
				mv.addObject(Vexperiment_record_mini.STUDENT_ID + "_map",
						Util.splitToInteger(request.getParameter("student_id"), ","));
				qs += Vexperiment_record_mini.STUDENT_ID + "=" + request.getParameter("student_id") + "&";
			}

			if (!StringUtils.isBlank(request.getParameter("experiment_id"))) {
				sqlin.put(Vexperiment_record_mini.EXPERIMENT_ID + "_id", request.getParameter("experiment_id"));
				mv.addObject(Vexperiment_record_mini.EXPERIMENT_ID + "_map",
						Util.splitToInteger(request.getParameter("experiment_id"), ","));
				qs += Vexperiment_record_mini.EXPERIMENT_ID + "=" + request.getParameter("experiment_id") + "&";
			}

			if (!StringUtils.isBlank(request.getParameter("curriculum_id"))) {
				sqlin.put(Vexperiment_record_mini.CURRICULUM_ID + "_id", request.getParameter("curriculum_id"));
				mv.addObject(Vexperiment_record_mini.CURRICULUM_ID + "_map",
						Util.splitToInteger(request.getParameter("curriculum_id"), ","));
				qs += Vexperiment_record_mini.CURRICULUM_ID + "=" + request.getParameter("curriculum_id") + "&";
			}

			if (!StringUtils.isBlank(request.getParameter("subject_id"))) {
				sqlin.put(Vexperiment_record_mini.SUBJECT_ID + "_id", request.getParameter("subject_id"));
				mv.addObject(Vexperiment_record_mini.SUBJECT_ID + "_map",
						Util.splitToInteger(request.getParameter("subject_id"), ","));
				qs += Vexperiment_record_mini.SUBJECT_ID + "=" + request.getParameter("subject_id") + "&";
			}

			if (!StringUtils.isBlank(request.getParameter("user_id"))) {
				sqlin.put(Vexperiment_record_mini.USER_ID + "_id", request.getParameter("user_id"));
				mv.addObject(Vexperiment_record_mini.USER_ID + "_map",
						Util.splitToInteger(request.getParameter("user_id"), ","));
				qs += Vexperiment_record_mini.USER_ID + "=" + request.getParameter("user_id") + "&";
			}

			if (!StringUtils.isBlank(request.getParameter("student_group_id"))) {
				sqlin.put(Vexperiment_record_mini.STUDENT_GROUP_ID + "_id", request.getParameter("student_group_id"));
				mv.addObject(Vexperiment_record_mini.STUDENT_GROUP_ID + "_map",
						Util.splitToInteger(request.getParameter("student_group_id"), ","));
				qs += Vexperiment_record_mini.STUDENT_GROUP_ID + "=" + request.getParameter("student_group_id") + "&";
			}

			mv.addObject("pagetitle", "管理VIEW");
			mv.addObject("subtitle", "分页列表");
			mv.addObject("tabletitle", "管理");
			mv.addObject("pagename", pagename);// 当前页面的url

			if (!StringUtils.isBlank(keyword)) {
				mv.addObject("kw", keyword);
				qs += "kw=" + keyword + "&";
			}
			mv.addObject("qs", qs);

			// 在列表中需要筛选的条件
			Map<String, Object> params = new HashMap<String, Object>();
			// params.put(Vexperiment_record_mini.ID, 0);
			// params.put(Vexperiment_record_mini.STUDENT_ID, 0);// 筛选条件1
			List<KeyAndValue> ordlist = new ArrayList<KeyAndValue>();
			ordlist.add(new KeyAndValue(Vexperiment_record_mini.ID, "desc"));
			PagerList<Vexperiment_record_mini> pagerlist = svcb.pagerListVexperiment_record_mini(pagenumber, pagesize,
					keyword, sqlin, params, ordlist);
			if (pagerlist.getPager().getRecordsSize() == 0 && pagerlist.getPager().getPages() != 0
					&& pagerlist.getPager().getCurrent() > pagerlist.getPager().getPages()) {
				String url = Common.getBasePath() + pagename + "?" + qs + "pn=" + pagerlist.getPager().getPages();
				mv.addObject("jumpto", url);
				// System.out.println("Test.Vexperiment_record_miniGET()url=" + url);
				mv.setViewName("jumperatonce");
			} else {
				// Pager<Vexperiment_record_mini> pager = new
				// Pager<Vexperiment_record_mini>(page);
				// System.out.println("Test.Vexperiment_record_miniGET()pager=" +
				// pager.toString());
				mv.addObject("qs", qs);
				mv.addObject("pager", pagerlist.getPager());
				mv.addObject("list", pagerlist.getList());
				mv.setViewName(pagename);
			}
		}

		return mv;

	}

	// TODO: POST-vexperiment_record_mini
	@RequestMapping(value = { "/vexperiment_record_mini", "/vexperiment_record_mini/",
			"/vexperiment_record_mini/index.html" }, method = RequestMethod.POST)
	public ModelAndView vexperiment_record_miniPOST(ModelAndView mv, HttpServletRequest request, HttpSession session)
			throws Exception {

		System.out.println(this.getClass().getName() + "POST");
		String pagename = "admin/vexperiment_record_mini";
		UserShiro userShiro = (UserShiro) SecurityUtils.getSubject().getPrincipal();
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		String operate = request.getParameter("operate");
		// --------编辑修改共有的部分---------
		Integer student_id = 0;
		if (!StringUtils.isBlank(request.getParameter("student_id"))) {
			student_id = Integer.parseInt(request.getParameter("student_id"));
		}
		Integer experiment_id = 0;
		if (!StringUtils.isBlank(request.getParameter("experiment_id"))) {
			experiment_id = Integer.parseInt(request.getParameter("experiment_id"));
		}
		Integer curriculum_id = 0;
		if (!StringUtils.isBlank(request.getParameter("curriculum_id"))) {
			curriculum_id = Integer.parseInt(request.getParameter("curriculum_id"));
		}
		String truename = "";
		if (!StringUtils.isBlank(request.getParameter("truename"))) {
			truename = request.getParameter("truename");
		}
		truename = Util.restrictLength(truename, 20);
		String sno = "";
		if (!StringUtils.isBlank(request.getParameter("sno"))) {
			sno = request.getParameter("sno");
		}
		sno = Util.restrictLength(sno, 10);
		String sno_exp = "";
		if (!StringUtils.isBlank(request.getParameter("sno_exp"))) {
			sno_exp = request.getParameter("sno_exp");
		}
		sno_exp = Util.restrictLength(sno_exp, 10);
		String classcode = "";
		if (!StringUtils.isBlank(request.getParameter("classcode"))) {
			classcode = request.getParameter("classcode");
		}
		classcode = Util.restrictLength(classcode, 8);
		Integer score = 0;
		if (!StringUtils.isBlank(request.getParameter("score"))) {
			score = Integer.parseInt(request.getParameter("score"));
		}
		Boolean student_group_is_actived = StringUtils.isBlank(request.getParameter("student_group_is_actived")) ? false
				: true;
		Boolean student_is_actived = StringUtils.isBlank(request.getParameter("student_is_actived")) ? false : true;
		Boolean curriculum_is_actived = StringUtils.isBlank(request.getParameter("curriculum_is_actived")) ? false
				: true;
		Boolean experiment_curriculum_is_actived = StringUtils
				.isBlank(request.getParameter("experiment_curriculum_is_actived")) ? false : true;
		Boolean subject_is_actived = StringUtils.isBlank(request.getParameter("subject_is_actived")) ? false : true;
		String student_group_code = "";
		if (!StringUtils.isBlank(request.getParameter("student_group_code"))) {
			student_group_code = request.getParameter("student_group_code");
		}
		student_group_code = Util.restrictLength(student_group_code, 8);
		String student_group_name = "";
		if (!StringUtils.isBlank(request.getParameter("student_group_name"))) {
			student_group_name = request.getParameter("student_group_name");
		}
		student_group_name = Util.restrictLength(student_group_name, 45);
		Long submit = sdf.parse(request.getParameter("submit_date")).getTime();
		submit = submit > 0 ? submit : 0;
		String scorescript = "";
		if (!StringUtils.isBlank(request.getParameter("scorescript"))) {
			scorescript = request.getParameter("scorescript");
		}
		scorescript = Util.restrictLength(scorescript, 45);
		String wechat_openid = "";
		if (!StringUtils.isBlank(request.getParameter("wechat_openid"))) {
			wechat_openid = request.getParameter("wechat_openid");
		}
		wechat_openid = Util.restrictLength(wechat_openid, 45);
		String experiment_title = "";
		if (!StringUtils.isBlank(request.getParameter("experiment_title"))) {
			experiment_title = request.getParameter("experiment_title");
		}
		experiment_title = Util.restrictLength(experiment_title, 45);
		Boolean experiment_is_actived = StringUtils.isBlank(request.getParameter("experiment_is_actived")) ? false
				: true;
		String subject_name = "";
		if (!StringUtils.isBlank(request.getParameter("subject_name"))) {
			subject_name = request.getParameter("subject_name");
		}
		subject_name = Util.restrictLength(subject_name, 45);
		Integer subject_id = 0;
		if (!StringUtils.isBlank(request.getParameter("subject_id"))) {
			subject_id = Integer.parseInt(request.getParameter("subject_id"));
		}
		Integer user_id = 0;
		if (!StringUtils.isBlank(request.getParameter("user_id"))) {
			user_id = Integer.parseInt(request.getParameter("user_id"));
		}
		Long closing_gmt = sdf.parse(request.getParameter("closing_gmt_date")).getTime();
		closing_gmt = closing_gmt > 0 ? closing_gmt : 0;
		Long opening_gmt = sdf.parse(request.getParameter("opening_gmt_date")).getTime();
		opening_gmt = opening_gmt > 0 ? opening_gmt : 0;
		Integer curriculum_student_groupid = 0;
		if (!StringUtils.isBlank(request.getParameter("curriculum_student_groupid"))) {
			curriculum_student_groupid = Integer.parseInt(request.getParameter("curriculum_student_groupid"));
		}
		Integer student_group_id = 0;
		if (!StringUtils.isBlank(request.getParameter("student_group_id"))) {
			student_group_id = Integer.parseInt(request.getParameter("student_group_id"));
		}
		Integer reviewstate = 0;
		if (!StringUtils.isBlank(request.getParameter("reviewstate"))) {
			reviewstate = Integer.parseInt(request.getParameter("reviewstate"));
		}
		Integer experiment_curriculumid = 0;
		if (!StringUtils.isBlank(request.getParameter("experiment_curriculumid"))) {
			experiment_curriculumid = Integer.parseInt(request.getParameter("experiment_curriculumid"));
		}
		// --------编辑修改共有的部分-结束---------
		// Integer create_userid = userShiro.getId();
		// 来源页面
		String referer = request.getParameter("referer");
		switch (operate) {
		case "addform": {

			// String password_digest = DigestUtils.md5Hex(password);
			// Integer sortid = (int)
			// Math.round(svcb.maxVexperiment_record_mini(Vexperiment_record_mini.SORTID)) +
			// 1;
			Vexperiment_record_mini it = new Vexperiment_record_mini(student_id, experiment_id, curriculum_id, truename,
					sno, sno_exp, classcode, score, student_group_is_actived, student_is_actived, curriculum_is_actived,
					experiment_curriculum_is_actived, subject_is_actived, student_group_code, student_group_name,
					submit, scorescript, wechat_openid, experiment_title, experiment_is_actived, subject_name,
					subject_id, user_id, closing_gmt, opening_gmt, curriculum_student_groupid, student_group_id,
					reviewstate, experiment_curriculumid);

			// ----------保存前检查逻辑问题---------------
			// 如：用户名必须唯一，手机号必须唯一
			Map<String, Object> params = new HashMap<String, Object>();
			// params.put(Vexperiment_record_mini.ID, id);
			List<Vexperiment_record_mini> list = svcb.listVexperiment_record_miniByMap(params);
			if (StringUtils.isBlank("") || StringUtils.isBlank("")) {

				mv.addObject("message", "你输入的信息没有通过星际外交部的严格审核，请重新输入！");
				mv.addObject("jumpto", pagename);
				mv.setViewName("jumperback");
				return mv;
			} else if (list.size() > 0) {

				// 输入内容中，有些内容要求值唯一！
				mv.addObject("message", "你输入的信息已经被外星人抢先注册！");
				mv.addObject("jumpto", pagename);
				mv.setViewName("jumperback");
				return mv;
			} else {

				// 视图需要定制新增方法！
				// svcb.saveVexperiment_record_mini(it);
			}
			// ----------保存前检查逻辑问题结束------------

			mv.addObject("message", "信息已经保存！");
		}
			break;
		case "editform": {
			Integer id = 0;
			if (!StringUtils.isBlank(request.getParameter("id"))) {
				id = Integer.parseInt(request.getParameter("id"));
			}
			// update_gmt = sdf.parse(request.getParameter("update_gmt_date")).getTime();
			// String password_digest = DigestUtils.md5Hex(password);

			// ----------保存前检查逻辑上是否有冲突---------------
			// 如：用户名必须唯一，手机号必须唯一
			Map<String, Object> params = new HashMap<String, Object>();
			params.put(Vexperiment_record_mini.ID, id);
			List<Vexperiment_record_mini> list = svcb.listVexperiment_record_miniByMap(params);
			if (list.size() > 1 || (list.size() == 1 && list.get(0).getId() != id)) {

				mv.addObject("message", "你输入的手机号码已经被外星人抢先注册！");
				mv.addObject("jumpto", pagename);
				mv.setViewName("jumperback");
				return mv;
			} else {
				svcb.updateVexperiment_record_miniById(student_id, experiment_id, curriculum_id, truename, sno, sno_exp,
						classcode, score, student_group_is_actived, student_is_actived, curriculum_is_actived,
						experiment_curriculum_is_actived, subject_is_actived, student_group_code, student_group_name,
						submit, scorescript, new Date().getTime(), wechat_openid, experiment_title,
						experiment_is_actived, subject_name, subject_id, user_id, closing_gmt, opening_gmt,
						curriculum_student_groupid, student_group_id, reviewstate, experiment_curriculumid, id);

			}
			// ----------保存前检查逻辑问题结束------------

			mv.addObject("message", "信息已经修改！");

		}
			break;

		default:
			System.out.println(this.getClass().getName() + "没有对应的operate=" + operate);
			break;
		}

		mv.addObject("jumpto", referer);
		mv.setViewName("jumper");

		return mv;
	}

	// TODO: GET-vlink_experiment_curriculum
	@RequestMapping(value = { "/vlink_experiment_curriculum", "/vlink_experiment_curriculum/",
			"/vlink_experiment_curriculum/index.html" }, method = RequestMethod.GET)
	public ModelAndView vlink_experiment_curriculumGET(ModelAndView mv,
			@RequestParam(value = "kw", required = false) String kw,
			@RequestParam(value = "clrkw", required = false) String clrkw,
			@RequestParam(value = "operate", required = false) String operate,
			@RequestParam(value = "pn", required = false) Integer pn,
			@RequestParam(value = "ps", required = false) Integer ps,
			@RequestParam(value = "id", required = false) Integer id, HttpServletRequest request, HttpSession session) {
		logger.info(this.getClass().getName());
		System.out.println(this.getClass().getName() + ",operate=" + operate + ",id=" + id + ",pn=" + pn + ",ps=" + ps
				+ ",kw=" + kw + ",clrkw=" + clrkw);
		mv.addObject("navitem", "Vlink_experiment_curriculum");// 菜单项显示当前项
		String pagename = "test/vlink_experiment_curriculum";
		// 新增和编辑，列表页面筛选也需要使用，页面部分都有一些预先读取的内容
		if (StringUtils.isBlank(operate) || operate.equals("add") || operate.equals("edit")) {
			// 新建、编辑、列表的条件筛选
			// 用于制作彩色的标签
			mv.addObject("tagpostfixlist", Common.tagPostfix);
			mv.addObject("experimentlist", svcb.listExperimentOrderByAsc(Experiment.ID));
			mv.addObject("experimentmap", svcb.mapExperiment());
			mv.addObject("curriculumlist", svcb.listCurriculumOrderByAsc(Curriculum.ID));
			mv.addObject("curriculummap", svcb.mapCurriculum());
			mv.addObject("subjectlist", svcb.listSubjectOrderByAsc(Subject.ID));
			mv.addObject("subjectmap", svcb.mapSubject());
			mv.addObject("student_grouplist", svcb.listStudent_groupOrderByAsc(Student_group.ID));
			mv.addObject("student_groupmap", svcb.mapStudent_group());
			mv.addObject("userlist", svcb.listUserOrderByAsc(User.ID));
			mv.addObject("usermap", svcb.mapUser());
		}
		// 新增和编辑，列表页面筛选也需要使用，页面部分都有一些预先读取的内容
		if (!StringUtils.isBlank(operate)) {
			// 操作不为空，增删改
			mv.addObject("operate", operate);
			switch (operate) {
			case "add": {
				mv.addObject("pagetitle", "管理VIEW");
				mv.addObject("subtitle", "新增VIEW");
				mv.addObject("formtitle", "新增VIEW");
				mv.addObject("pagename", pagename);
				// 默认作者是当前用户
				UserShiro userShiro = (UserShiro) SecurityUtils.getSubject().getPrincipal();
				mv.addObject("author", userShiro.getLogin_name());
				// 默认置顶3天
				Calendar calendar = Calendar.getInstance();
				calendar.add(Calendar.DATE, 3);
				SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
				String toptill_date = sdf.format(new Date(calendar.getTimeInMillis()));
				mv.addObject("toptill_date", toptill_date);
				// 默认头像
				mv.addObject("wechat_headimgurl", Common.userheadimgurl);
				mv.setViewName(pagename);
			}
				break;
			case "edit": {

				mv.addObject("pagetitle", "管理VIEW");
				mv.addObject("subtitle", "修改VIEW");
				mv.addObject("formtitle", "修改VIEW");
				mv.addObject("pagename", pagename);
				mv.addObject("referer", Common.getRefererUrl());

				// 读取当前已有信息
				Vlink_experiment_curriculum it = svcb.getVlink_experiment_curriculumById(id);
				// 修正信息：如默认头像
				mv.addObject("it", it);
				mv.setViewName(pagename);
			}
				break;
			case "delete": {

				boolean rtv = false;
				try {
					// 视图需要定制删除方法！
					// rtv = svc.removeVlink_experiment_curriculumById(id);
				} catch (Exception e) {
					e.printStackTrace();
				}
				if (rtv) {

					mv.addObject("message", "信息已经删除！");
					mv.addObject("jumpto", Common.getRefererUrl());
					mv.setViewName("jumper");
				} else {

					mv.addObject("message", "删除操作被外星人强行终止！");
					mv.addObject("jumpto", Common.getRefererUrl());
					mv.setViewName("jumperclick");
				}
			}
				break;
			case "hideitem":
			case "showitem": {
				UserShiro userShiro = (UserShiro) SecurityUtils.getSubject().getPrincipal();
				// svcb.updateVlink_experiment_curriculumById(operate, id);
				mv.addObject("jumpto", Common.getRefererUrl());
				mv.setViewName("jumperatonce");
			}
				break;
			case "moveup":
			case "movedown": {
				if (!svcb.moveVlink_experiment_curriculum(operate, "movedown", id,
						Vlink_experiment_curriculum.SORTID)) {

					mv.addObject("message", "移动操作被外星人强行终止！");
					mv.addObject("jumpto", Common.getRefererUrl());
					mv.setViewName("jumperclick");
				} else {

					mv.addObject("jumpto", Common.getRefererUrl());
					mv.setViewName("jumperatonce");

				}
			}
				break;

			default: {

			}
				break;
			}
		} else {
			// 操作为空,默认为搜索,显示列表
			String qs = "";
			Integer pagenumber = Common.recordToSession(session, "pagenumber", pn + "", 1);
			Integer pagesize = Common.recordToSession(session, "pagesize", ps + "", 10);
			String keyword = Util.replaceSqlChar(kw);
			keyword = Common.recordToSession(session, "keyword_vlink_experiment_curriculum", keyword, "");
			// 清除搜索条件
			if (!StringUtils.isBlank(clrkw)) {
				session.removeAttribute("keyword_vlink_experiment_curriculum");
				keyword = null;
			}

			// 读取url中是否包含筛选条件
			Map<String, String> sqlin = new HashMap<String, String>();

			if (!StringUtils.isBlank(request.getParameter("experiment_id"))) {
				sqlin.put(Vlink_experiment_curriculum.EXPERIMENT_ID + "_id", request.getParameter("experiment_id"));
				mv.addObject(Vlink_experiment_curriculum.EXPERIMENT_ID + "_map",
						Util.splitToInteger(request.getParameter("experiment_id"), ","));
				qs += Vlink_experiment_curriculum.EXPERIMENT_ID + "=" + request.getParameter("experiment_id") + "&";
			}

			if (!StringUtils.isBlank(request.getParameter("curriculum_id"))) {
				sqlin.put(Vlink_experiment_curriculum.CURRICULUM_ID + "_id", request.getParameter("curriculum_id"));
				mv.addObject(Vlink_experiment_curriculum.CURRICULUM_ID + "_map",
						Util.splitToInteger(request.getParameter("curriculum_id"), ","));
				qs += Vlink_experiment_curriculum.CURRICULUM_ID + "=" + request.getParameter("curriculum_id") + "&";
			}

			if (!StringUtils.isBlank(request.getParameter("subject_id"))) {
				sqlin.put(Vlink_experiment_curriculum.SUBJECT_ID + "_id", request.getParameter("subject_id"));
				mv.addObject(Vlink_experiment_curriculum.SUBJECT_ID + "_map",
						Util.splitToInteger(request.getParameter("subject_id"), ","));
				qs += Vlink_experiment_curriculum.SUBJECT_ID + "=" + request.getParameter("subject_id") + "&";
			}

			if (!StringUtils.isBlank(request.getParameter("student_group_id"))) {
				sqlin.put(Vlink_experiment_curriculum.STUDENT_GROUP_ID + "_id",
						request.getParameter("student_group_id"));
				mv.addObject(Vlink_experiment_curriculum.STUDENT_GROUP_ID + "_map",
						Util.splitToInteger(request.getParameter("student_group_id"), ","));
				qs += Vlink_experiment_curriculum.STUDENT_GROUP_ID + "=" + request.getParameter("student_group_id")
						+ "&";
			}

			if (!StringUtils.isBlank(request.getParameter("user_id"))) {
				sqlin.put(Vlink_experiment_curriculum.USER_ID + "_id", request.getParameter("user_id"));
				mv.addObject(Vlink_experiment_curriculum.USER_ID + "_map",
						Util.splitToInteger(request.getParameter("user_id"), ","));
				qs += Vlink_experiment_curriculum.USER_ID + "=" + request.getParameter("user_id") + "&";
			}

			mv.addObject("pagetitle", "管理VIEW");
			mv.addObject("subtitle", "分页列表");
			mv.addObject("tabletitle", "管理");
			mv.addObject("pagename", pagename);// 当前页面的url

			if (!StringUtils.isBlank(keyword)) {
				mv.addObject("kw", keyword);
				qs += "kw=" + keyword + "&";
			}
			mv.addObject("qs", qs);

			// 在列表中需要筛选的条件
			Map<String, Object> params = new HashMap<String, Object>();
			// params.put(Vlink_experiment_curriculum.ID, 0);
			// params.put(Vlink_experiment_curriculum.EXPERIMENT_ID, 0);// 筛选条件1
			List<KeyAndValue> ordlist = new ArrayList<KeyAndValue>();
			ordlist.add(new KeyAndValue(Vlink_experiment_curriculum.ID, "desc"));
			PagerList<Vlink_experiment_curriculum> pagerlist = svcb.pagerListVlink_experiment_curriculum(pagenumber,
					pagesize, keyword, sqlin, params, ordlist);
			if (pagerlist.getPager().getRecordsSize() == 0 && pagerlist.getPager().getPages() != 0
					&& pagerlist.getPager().getCurrent() > pagerlist.getPager().getPages()) {
				String url = Common.getBasePath() + pagename + "?" + qs + "pn=" + pagerlist.getPager().getPages();
				mv.addObject("jumpto", url);
				// System.out.println("Test.Vlink_experiment_curriculumGET()url=" + url);
				mv.setViewName("jumperatonce");
			} else {
				// Pager<Vlink_experiment_curriculum> pager = new
				// Pager<Vlink_experiment_curriculum>(page);
				// System.out.println("Test.Vlink_experiment_curriculumGET()pager=" +
				// pager.toString());
				mv.addObject("qs", qs);
				mv.addObject("pager", pagerlist.getPager());
				mv.addObject("list", pagerlist.getList());
				mv.setViewName(pagename);
			}
		}

		return mv;

	}

	// TODO: POST-vlink_experiment_curriculum
	@RequestMapping(value = { "/vlink_experiment_curriculum", "/vlink_experiment_curriculum/",
			"/vlink_experiment_curriculum/index.html" }, method = RequestMethod.POST)
	public ModelAndView vlink_experiment_curriculumPOST(ModelAndView mv, HttpServletRequest request,
			HttpSession session) throws Exception {

		System.out.println(this.getClass().getName() + "POST");
		String pagename = "admin/vlink_experiment_curriculum";
		UserShiro userShiro = (UserShiro) SecurityUtils.getSubject().getPrincipal();
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		String operate = request.getParameter("operate");
		// --------编辑修改共有的部分---------
		Integer experiment_id = 0;
		if (!StringUtils.isBlank(request.getParameter("experiment_id"))) {
			experiment_id = Integer.parseInt(request.getParameter("experiment_id"));
		}
		Integer curriculum_id = 0;
		if (!StringUtils.isBlank(request.getParameter("curriculum_id"))) {
			curriculum_id = Integer.parseInt(request.getParameter("curriculum_id"));
		}
		Integer subject_id = 0;
		if (!StringUtils.isBlank(request.getParameter("subject_id"))) {
			subject_id = Integer.parseInt(request.getParameter("subject_id"));
		}
		Long opening_gmt = sdf.parse(request.getParameter("opening_gmt_date")).getTime();
		opening_gmt = opening_gmt > 0 ? opening_gmt : 0;
		Long closing_gmt = sdf.parse(request.getParameter("closing_gmt_date")).getTime();
		closing_gmt = closing_gmt > 0 ? closing_gmt : 0;
		Integer sortid = 0;
		if (!StringUtils.isBlank(request.getParameter("sortid"))) {
			sortid = Integer.parseInt(request.getParameter("sortid"));
		}
		Boolean experiment_curriculum_is_actived = StringUtils
				.isBlank(request.getParameter("experiment_curriculum_is_actived")) ? false : true;
		String experiment_content = "";
		if (!StringUtils.isBlank(request.getParameter("experiment_content"))) {
			experiment_content = request.getParameter("experiment_content");
		}
		experiment_content = Util.restrictLength(experiment_content, 65535);
		String experiment_intro = "";
		if (!StringUtils.isBlank(request.getParameter("experiment_intro"))) {
			experiment_intro = request.getParameter("experiment_intro");
		}
		experiment_intro = Util.restrictLength(experiment_intro, 200);
		String experiment_title = "";
		if (!StringUtils.isBlank(request.getParameter("experiment_title"))) {
			experiment_title = request.getParameter("experiment_title");
		}
		experiment_title = Util.restrictLength(experiment_title, 45);
		Boolean experiment_is_actived = StringUtils.isBlank(request.getParameter("experiment_is_actived")) ? false
				: true;
		String purposes_requirement = "";
		if (!StringUtils.isBlank(request.getParameter("purposes_requirement"))) {
			purposes_requirement = request.getParameter("purposes_requirement");
		}
		purposes_requirement = Util.restrictLength(purposes_requirement, 65535);
		Integer filesize = 0;
		if (!StringUtils.isBlank(request.getParameter("filesize"))) {
			filesize = Integer.parseInt(request.getParameter("filesize"));
		}
		Integer student_group_id = 0;
		if (!StringUtils.isBlank(request.getParameter("student_group_id"))) {
			student_group_id = Integer.parseInt(request.getParameter("student_group_id"));
		}
		Integer user_id = 0;
		if (!StringUtils.isBlank(request.getParameter("user_id"))) {
			user_id = Integer.parseInt(request.getParameter("user_id"));
		}
		String semester = "";
		if (!StringUtils.isBlank(request.getParameter("semester"))) {
			semester = request.getParameter("semester");
		}
		semester = Util.restrictLength(semester, 45);
		String student_group_name = "";
		if (!StringUtils.isBlank(request.getParameter("student_group_name"))) {
			student_group_name = request.getParameter("student_group_name");
		}
		student_group_name = Util.restrictLength(student_group_name, 45);
		Boolean subject_is_actived = StringUtils.isBlank(request.getParameter("subject_is_actived")) ? false : true;
		String subject_intro = "";
		if (!StringUtils.isBlank(request.getParameter("subject_intro"))) {
			subject_intro = request.getParameter("subject_intro");
		}
		subject_intro = Util.restrictLength(subject_intro, 255);
		String subject_name = "";
		if (!StringUtils.isBlank(request.getParameter("subject_name"))) {
			subject_name = request.getParameter("subject_name");
		}
		subject_name = Util.restrictLength(subject_name, 45);
		String subject_illustration = "";
		if (!StringUtils.isBlank(request.getParameter("subject_illustration"))) {
			subject_illustration = request.getParameter("subject_illustration");
		}
		subject_illustration = Util.restrictLength(subject_illustration, 45);
		Boolean curriculum_is_actived = StringUtils.isBlank(request.getParameter("curriculum_is_actived")) ? false
				: true;
		Integer subject_sortid = 0;
		if (!StringUtils.isBlank(request.getParameter("subject_sortid"))) {
			subject_sortid = Integer.parseInt(request.getParameter("subject_sortid"));
		}
		// --------编辑修改共有的部分-结束---------
		// Integer create_userid = userShiro.getId();
		// 来源页面
		String referer = request.getParameter("referer");
		switch (operate) {
		case "addform": {

			// String password_digest = DigestUtils.md5Hex(password);
			// Integer sortid = (int)
			// Math.round(svcb.maxVlink_experiment_curriculum(Vlink_experiment_curriculum.SORTID))
			// + 1;
			Vlink_experiment_curriculum it = new Vlink_experiment_curriculum(experiment_id, curriculum_id, subject_id,
					opening_gmt, closing_gmt, sortid, experiment_curriculum_is_actived, experiment_content,
					experiment_intro, experiment_title, experiment_is_actived, purposes_requirement, filesize,
					student_group_id, user_id, semester, student_group_name, subject_is_actived, subject_intro,
					subject_name, subject_illustration, curriculum_is_actived, subject_sortid);

			// ----------保存前检查逻辑问题---------------
			// 如：用户名必须唯一，手机号必须唯一
			Map<String, Object> params = new HashMap<String, Object>();
			// params.put(Vlink_experiment_curriculum.ID, id);
			List<Vlink_experiment_curriculum> list = svcb.listVlink_experiment_curriculumByMap(params);
			if (StringUtils.isBlank("") || StringUtils.isBlank("")) {

				mv.addObject("message", "你输入的信息没有通过星际外交部的严格审核，请重新输入！");
				mv.addObject("jumpto", pagename);
				mv.setViewName("jumperback");
				return mv;
			} else if (list.size() > 0) {

				// 输入内容中，有些内容要求值唯一！
				mv.addObject("message", "你输入的信息已经被外星人抢先注册！");
				mv.addObject("jumpto", pagename);
				mv.setViewName("jumperback");
				return mv;
			} else {

				// 视图需要定制新增方法！
				// svcb.saveVlink_experiment_curriculum(it);
			}
			// ----------保存前检查逻辑问题结束------------

			mv.addObject("message", "信息已经保存！");
		}
			break;
		case "editform": {
			Integer id = 0;
			if (!StringUtils.isBlank(request.getParameter("id"))) {
				id = Integer.parseInt(request.getParameter("id"));
			}
			// update_gmt = sdf.parse(request.getParameter("update_gmt_date")).getTime();
			// String password_digest = DigestUtils.md5Hex(password);

			// ----------保存前检查逻辑上是否有冲突---------------
			// 如：用户名必须唯一，手机号必须唯一
			Map<String, Object> params = new HashMap<String, Object>();
			params.put(Vlink_experiment_curriculum.ID, id);
			List<Vlink_experiment_curriculum> list = svcb.listVlink_experiment_curriculumByMap(params);
			if (list.size() > 1 || (list.size() == 1 && list.get(0).getId() != id)) {

				mv.addObject("message", "你输入的手机号码已经被外星人抢先注册！");
				mv.addObject("jumpto", pagename);
				mv.setViewName("jumperback");
				return mv;
			} else {
				svcb.updateVlink_experiment_curriculumById(experiment_id, curriculum_id, subject_id, opening_gmt,
						closing_gmt, sortid, experiment_curriculum_is_actived, experiment_content, experiment_intro,
						experiment_title, experiment_is_actived, purposes_requirement, filesize, student_group_id,
						user_id, semester, student_group_name, subject_is_actived, subject_intro, subject_name,
						subject_illustration, curriculum_is_actived, subject_sortid, id);

			}
			// ----------保存前检查逻辑问题结束------------

			mv.addObject("message", "信息已经修改！");

		}
			break;

		default:
			System.out.println(this.getClass().getName() + "没有对应的operate=" + operate);
			break;
		}

		mv.addObject("jumpto", referer);
		mv.setViewName("jumper");

		return mv;
	}

	// TODO: GET-vlink_experiment_curriculum_min
	@RequestMapping(value = { "/vlink_experiment_curriculum_min", "/vlink_experiment_curriculum_min/",
			"/vlink_experiment_curriculum_min/index.html" }, method = RequestMethod.GET)
	public ModelAndView vlink_experiment_curriculum_minGET(ModelAndView mv,
			@RequestParam(value = "kw", required = false) String kw,
			@RequestParam(value = "clrkw", required = false) String clrkw,
			@RequestParam(value = "operate", required = false) String operate,
			@RequestParam(value = "pn", required = false) Integer pn,
			@RequestParam(value = "ps", required = false) Integer ps,
			@RequestParam(value = "id", required = false) Integer id, HttpServletRequest request, HttpSession session) {
		logger.info(this.getClass().getName());
		System.out.println(this.getClass().getName() + ",operate=" + operate + ",id=" + id + ",pn=" + pn + ",ps=" + ps
				+ ",kw=" + kw + ",clrkw=" + clrkw);
		mv.addObject("navitem", "Vlink_experiment_curriculum_min");// 菜单项显示当前项
		String pagename = "test/vlink_experiment_curriculum_min";
		// 新增和编辑，列表页面筛选也需要使用，页面部分都有一些预先读取的内容
		if (StringUtils.isBlank(operate) || operate.equals("add") || operate.equals("edit")) {
			// 新建、编辑、列表的条件筛选
			// 用于制作彩色的标签
			mv.addObject("tagpostfixlist", Common.tagPostfix);
			mv.addObject("experimentlist", svcb.listExperimentOrderByAsc(Experiment.ID));
			mv.addObject("experimentmap", svcb.mapExperiment());
			mv.addObject("curriculumlist", svcb.listCurriculumOrderByAsc(Curriculum.ID));
			mv.addObject("curriculummap", svcb.mapCurriculum());
			mv.addObject("subjectlist", svcb.listSubjectOrderByAsc(Subject.ID));
			mv.addObject("subjectmap", svcb.mapSubject());
			mv.addObject("student_grouplist", svcb.listStudent_groupOrderByAsc(Student_group.ID));
			mv.addObject("student_groupmap", svcb.mapStudent_group());
			mv.addObject("userlist", svcb.listUserOrderByAsc(User.ID));
			mv.addObject("usermap", svcb.mapUser());
		}
		// 新增和编辑，列表页面筛选也需要使用，页面部分都有一些预先读取的内容
		if (!StringUtils.isBlank(operate)) {
			// 操作不为空，增删改
			mv.addObject("operate", operate);
			switch (operate) {
			case "add": {
				mv.addObject("pagetitle", "管理VIEW");
				mv.addObject("subtitle", "新增VIEW");
				mv.addObject("formtitle", "新增VIEW");
				mv.addObject("pagename", pagename);
				// 默认作者是当前用户
				UserShiro userShiro = (UserShiro) SecurityUtils.getSubject().getPrincipal();
				mv.addObject("author", userShiro.getLogin_name());
				// 默认置顶3天
				Calendar calendar = Calendar.getInstance();
				calendar.add(Calendar.DATE, 3);
				SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
				String toptill_date = sdf.format(new Date(calendar.getTimeInMillis()));
				mv.addObject("toptill_date", toptill_date);
				// 默认头像
				mv.addObject("wechat_headimgurl", Common.userheadimgurl);
				mv.setViewName(pagename);
			}
				break;
			case "edit": {

				mv.addObject("pagetitle", "管理VIEW");
				mv.addObject("subtitle", "修改VIEW");
				mv.addObject("formtitle", "修改VIEW");
				mv.addObject("pagename", pagename);
				mv.addObject("referer", Common.getRefererUrl());

				// 读取当前已有信息
				Vlink_experiment_curriculum_min it = svcb.getVlink_experiment_curriculum_minById(id);
				// 修正信息：如默认头像
				mv.addObject("it", it);
				mv.setViewName(pagename);
			}
				break;
			case "delete": {

				boolean rtv = false;
				try {
					// 视图需要定制删除方法！
					// rtv = svc.removeVlink_experiment_curriculum_minById(id);
				} catch (Exception e) {
					e.printStackTrace();
				}
				if (rtv) {

					mv.addObject("message", "信息已经删除！");
					mv.addObject("jumpto", Common.getRefererUrl());
					mv.setViewName("jumper");
				} else {

					mv.addObject("message", "删除操作被外星人强行终止！");
					mv.addObject("jumpto", Common.getRefererUrl());
					mv.setViewName("jumperclick");
				}
			}
				break;
			case "hideitem":
			case "showitem": {
				UserShiro userShiro = (UserShiro) SecurityUtils.getSubject().getPrincipal();
				// svcb.updateVlink_experiment_curriculum_minById(operate, id);
				mv.addObject("jumpto", Common.getRefererUrl());
				mv.setViewName("jumperatonce");
			}
				break;
			case "moveup":
			case "movedown": {
				if (!svcb.moveVlink_experiment_curriculum_min(operate, "movedown", id,
						Vlink_experiment_curriculum_min.SORTID)) {

					mv.addObject("message", "移动操作被外星人强行终止！");
					mv.addObject("jumpto", Common.getRefererUrl());
					mv.setViewName("jumperclick");
				} else {

					mv.addObject("jumpto", Common.getRefererUrl());
					mv.setViewName("jumperatonce");

				}
			}
				break;

			default: {

			}
				break;
			}
		} else {
			// 操作为空,默认为搜索,显示列表
			String qs = "";
			Integer pagenumber = Common.recordToSession(session, "pagenumber", pn + "", 1);
			Integer pagesize = Common.recordToSession(session, "pagesize", ps + "", 10);
			String keyword = Util.replaceSqlChar(kw);
			keyword = Common.recordToSession(session, "keyword_vlink_experiment_curriculum_min", keyword, "");
			// 清除搜索条件
			if (!StringUtils.isBlank(clrkw)) {
				session.removeAttribute("keyword_vlink_experiment_curriculum_min");
				keyword = null;
			}

			// 读取url中是否包含筛选条件
			Map<String, String> sqlin = new HashMap<String, String>();

			if (!StringUtils.isBlank(request.getParameter("experiment_id"))) {
				sqlin.put(Vlink_experiment_curriculum_min.EXPERIMENT_ID + "_id", request.getParameter("experiment_id"));
				mv.addObject(Vlink_experiment_curriculum_min.EXPERIMENT_ID + "_map",
						Util.splitToInteger(request.getParameter("experiment_id"), ","));
				qs += Vlink_experiment_curriculum_min.EXPERIMENT_ID + "=" + request.getParameter("experiment_id") + "&";
			}

			if (!StringUtils.isBlank(request.getParameter("curriculum_id"))) {
				sqlin.put(Vlink_experiment_curriculum_min.CURRICULUM_ID + "_id", request.getParameter("curriculum_id"));
				mv.addObject(Vlink_experiment_curriculum_min.CURRICULUM_ID + "_map",
						Util.splitToInteger(request.getParameter("curriculum_id"), ","));
				qs += Vlink_experiment_curriculum_min.CURRICULUM_ID + "=" + request.getParameter("curriculum_id") + "&";
			}

			if (!StringUtils.isBlank(request.getParameter("subject_id"))) {
				sqlin.put(Vlink_experiment_curriculum_min.SUBJECT_ID + "_id", request.getParameter("subject_id"));
				mv.addObject(Vlink_experiment_curriculum_min.SUBJECT_ID + "_map",
						Util.splitToInteger(request.getParameter("subject_id"), ","));
				qs += Vlink_experiment_curriculum_min.SUBJECT_ID + "=" + request.getParameter("subject_id") + "&";
			}

			if (!StringUtils.isBlank(request.getParameter("student_group_id"))) {
				sqlin.put(Vlink_experiment_curriculum_min.STUDENT_GROUP_ID + "_id",
						request.getParameter("student_group_id"));
				mv.addObject(Vlink_experiment_curriculum_min.STUDENT_GROUP_ID + "_map",
						Util.splitToInteger(request.getParameter("student_group_id"), ","));
				qs += Vlink_experiment_curriculum_min.STUDENT_GROUP_ID + "=" + request.getParameter("student_group_id")
						+ "&";
			}

			if (!StringUtils.isBlank(request.getParameter("user_id"))) {
				sqlin.put(Vlink_experiment_curriculum_min.USER_ID + "_id", request.getParameter("user_id"));
				mv.addObject(Vlink_experiment_curriculum_min.USER_ID + "_map",
						Util.splitToInteger(request.getParameter("user_id"), ","));
				qs += Vlink_experiment_curriculum_min.USER_ID + "=" + request.getParameter("user_id") + "&";
			}

			mv.addObject("pagetitle", "管理VIEW");
			mv.addObject("subtitle", "分页列表");
			mv.addObject("tabletitle", "管理");
			mv.addObject("pagename", pagename);// 当前页面的url

			if (!StringUtils.isBlank(keyword)) {
				mv.addObject("kw", keyword);
				qs += "kw=" + keyword + "&";
			}
			mv.addObject("qs", qs);

			// 在列表中需要筛选的条件
			Map<String, Object> params = new HashMap<String, Object>();
			// params.put(Vlink_experiment_curriculum_min.ID, 0);
			// params.put(Vlink_experiment_curriculum_min.EXPERIMENT_ID, 0);// 筛选条件1
			List<KeyAndValue> ordlist = new ArrayList<KeyAndValue>();
			ordlist.add(new KeyAndValue(Vlink_experiment_curriculum_min.ID, "desc"));
			PagerList<Vlink_experiment_curriculum_min> pagerlist = svcb
					.pagerListVlink_experiment_curriculum_min(pagenumber, pagesize, keyword, sqlin, params, ordlist);
			if (pagerlist.getPager().getRecordsSize() == 0 && pagerlist.getPager().getPages() != 0
					&& pagerlist.getPager().getCurrent() > pagerlist.getPager().getPages()) {
				String url = Common.getBasePath() + pagename + "?" + qs + "pn=" + pagerlist.getPager().getPages();
				mv.addObject("jumpto", url);
				// System.out.println("Test.Vlink_experiment_curriculum_minGET()url=" + url);
				mv.setViewName("jumperatonce");
			} else {
				// Pager<Vlink_experiment_curriculum_min> pager = new
				// Pager<Vlink_experiment_curriculum_min>(page);
				// System.out.println("Test.Vlink_experiment_curriculum_minGET()pager=" +
				// pager.toString());
				mv.addObject("qs", qs);
				mv.addObject("pager", pagerlist.getPager());
				mv.addObject("list", pagerlist.getList());
				mv.setViewName(pagename);
			}
		}

		return mv;

	}

	// TODO: POST-vlink_experiment_curriculum_min
	@RequestMapping(value = { "/vlink_experiment_curriculum_min", "/vlink_experiment_curriculum_min/",
			"/vlink_experiment_curriculum_min/index.html" }, method = RequestMethod.POST)
	public ModelAndView vlink_experiment_curriculum_minPOST(ModelAndView mv, HttpServletRequest request,
			HttpSession session) throws Exception {

		System.out.println(this.getClass().getName() + "POST");
		String pagename = "admin/vlink_experiment_curriculum_min";
		UserShiro userShiro = (UserShiro) SecurityUtils.getSubject().getPrincipal();
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		String operate = request.getParameter("operate");
		// --------编辑修改共有的部分---------
		Integer experiment_id = 0;
		if (!StringUtils.isBlank(request.getParameter("experiment_id"))) {
			experiment_id = Integer.parseInt(request.getParameter("experiment_id"));
		}
		Integer curriculum_id = 0;
		if (!StringUtils.isBlank(request.getParameter("curriculum_id"))) {
			curriculum_id = Integer.parseInt(request.getParameter("curriculum_id"));
		}
		Integer subject_id = 0;
		if (!StringUtils.isBlank(request.getParameter("subject_id"))) {
			subject_id = Integer.parseInt(request.getParameter("subject_id"));
		}
		Long opening_gmt = sdf.parse(request.getParameter("opening_gmt_date")).getTime();
		opening_gmt = opening_gmt > 0 ? opening_gmt : 0;
		Long closing_gmt = sdf.parse(request.getParameter("closing_gmt_date")).getTime();
		closing_gmt = closing_gmt > 0 ? closing_gmt : 0;
		Integer sortid = 0;
		if (!StringUtils.isBlank(request.getParameter("sortid"))) {
			sortid = Integer.parseInt(request.getParameter("sortid"));
		}
		Boolean experiment_curriculum_is_actived = StringUtils
				.isBlank(request.getParameter("experiment_curriculum_is_actived")) ? false : true;
		String experiment_title = "";
		if (!StringUtils.isBlank(request.getParameter("experiment_title"))) {
			experiment_title = request.getParameter("experiment_title");
		}
		experiment_title = Util.restrictLength(experiment_title, 45);
		Integer filesize = 0;
		if (!StringUtils.isBlank(request.getParameter("filesize"))) {
			filesize = Integer.parseInt(request.getParameter("filesize"));
		}
		Integer student_group_id = 0;
		if (!StringUtils.isBlank(request.getParameter("student_group_id"))) {
			student_group_id = Integer.parseInt(request.getParameter("student_group_id"));
		}
		Integer user_id = 0;
		if (!StringUtils.isBlank(request.getParameter("user_id"))) {
			user_id = Integer.parseInt(request.getParameter("user_id"));
		}
		String semester = "";
		if (!StringUtils.isBlank(request.getParameter("semester"))) {
			semester = request.getParameter("semester");
		}
		semester = Util.restrictLength(semester, 45);
		String student_group_name = "";
		if (!StringUtils.isBlank(request.getParameter("student_group_name"))) {
			student_group_name = request.getParameter("student_group_name");
		}
		student_group_name = Util.restrictLength(student_group_name, 45);
		Boolean subject_is_actived = StringUtils.isBlank(request.getParameter("subject_is_actived")) ? false : true;
		String subject_intro = "";
		if (!StringUtils.isBlank(request.getParameter("subject_intro"))) {
			subject_intro = request.getParameter("subject_intro");
		}
		subject_intro = Util.restrictLength(subject_intro, 255);
		String subject_name = "";
		if (!StringUtils.isBlank(request.getParameter("subject_name"))) {
			subject_name = request.getParameter("subject_name");
		}
		subject_name = Util.restrictLength(subject_name, 45);
		String subject_illustration = "";
		if (!StringUtils.isBlank(request.getParameter("subject_illustration"))) {
			subject_illustration = request.getParameter("subject_illustration");
		}
		subject_illustration = Util.restrictLength(subject_illustration, 45);
		Boolean curriculum_is_actived = StringUtils.isBlank(request.getParameter("curriculum_is_actived")) ? false
				: true;
		Integer subject_sortid = 0;
		if (!StringUtils.isBlank(request.getParameter("subject_sortid"))) {
			subject_sortid = Integer.parseInt(request.getParameter("subject_sortid"));
		}
		// --------编辑修改共有的部分-结束---------
		// Integer create_userid = userShiro.getId();
		// 来源页面
		String referer = request.getParameter("referer");
		switch (operate) {
		case "addform": {

			// String password_digest = DigestUtils.md5Hex(password);
			// Integer sortid = (int)
			// Math.round(svcb.maxVlink_experiment_curriculum_min(Vlink_experiment_curriculum_min.SORTID))
			// + 1;
			Vlink_experiment_curriculum_min it = new Vlink_experiment_curriculum_min(experiment_id, curriculum_id,
					subject_id, opening_gmt, closing_gmt, sortid, experiment_curriculum_is_actived, experiment_title,
					filesize, student_group_id, user_id, semester, student_group_name, subject_is_actived,
					subject_intro, subject_name, subject_illustration, curriculum_is_actived, subject_sortid);

			// ----------保存前检查逻辑问题---------------
			// 如：用户名必须唯一，手机号必须唯一
			Map<String, Object> params = new HashMap<String, Object>();
			// params.put(Vlink_experiment_curriculum_min.ID, id);
			List<Vlink_experiment_curriculum_min> list = svcb.listVlink_experiment_curriculum_minByMap(params);
			if (StringUtils.isBlank("") || StringUtils.isBlank("")) {

				mv.addObject("message", "你输入的信息没有通过星际外交部的严格审核，请重新输入！");
				mv.addObject("jumpto", pagename);
				mv.setViewName("jumperback");
				return mv;
			} else if (list.size() > 0) {

				// 输入内容中，有些内容要求值唯一！
				mv.addObject("message", "你输入的信息已经被外星人抢先注册！");
				mv.addObject("jumpto", pagename);
				mv.setViewName("jumperback");
				return mv;
			} else {

				// 视图需要定制新增方法！
				// svcb.saveVlink_experiment_curriculum_min(it);
			}
			// ----------保存前检查逻辑问题结束------------

			mv.addObject("message", "信息已经保存！");
		}
			break;
		case "editform": {
			Integer id = 0;
			if (!StringUtils.isBlank(request.getParameter("id"))) {
				id = Integer.parseInt(request.getParameter("id"));
			}
			// update_gmt = sdf.parse(request.getParameter("update_gmt_date")).getTime();
			// String password_digest = DigestUtils.md5Hex(password);

			// ----------保存前检查逻辑上是否有冲突---------------
			// 如：用户名必须唯一，手机号必须唯一
			Map<String, Object> params = new HashMap<String, Object>();
			params.put(Vlink_experiment_curriculum_min.ID, id);
			List<Vlink_experiment_curriculum_min> list = svcb.listVlink_experiment_curriculum_minByMap(params);
			if (list.size() > 1 || (list.size() == 1 && list.get(0).getId() != id)) {

				mv.addObject("message", "你输入的手机号码已经被外星人抢先注册！");
				mv.addObject("jumpto", pagename);
				mv.setViewName("jumperback");
				return mv;
			} else {
				svcb.updateVlink_experiment_curriculum_minById(experiment_id, curriculum_id, subject_id, opening_gmt,
						closing_gmt, sortid, experiment_curriculum_is_actived, experiment_title, filesize,
						student_group_id, user_id, semester, student_group_name, subject_is_actived, subject_intro,
						subject_name, subject_illustration, curriculum_is_actived, subject_sortid, id);

			}
			// ----------保存前检查逻辑问题结束------------

			mv.addObject("message", "信息已经修改！");

		}
			break;

		default:
			System.out.println(this.getClass().getName() + "没有对应的operate=" + operate);
			break;
		}

		mv.addObject("jumpto", referer);
		mv.setViewName("jumper");

		return mv;
	}

	// TODO: GET-vlink_student2group
	@RequestMapping(value = { "/vlink_student2group", "/vlink_student2group/",
			"/vlink_student2group/index.html" }, method = RequestMethod.GET)
	public ModelAndView vlink_student2groupGET(ModelAndView mv, @RequestParam(value = "kw", required = false) String kw,
			@RequestParam(value = "clrkw", required = false) String clrkw,
			@RequestParam(value = "operate", required = false) String operate,
			@RequestParam(value = "pn", required = false) Integer pn,
			@RequestParam(value = "ps", required = false) Integer ps,
			@RequestParam(value = "id", required = false) Integer id, HttpServletRequest request, HttpSession session) {
		logger.info(this.getClass().getName());
		System.out.println(this.getClass().getName() + ",operate=" + operate + ",id=" + id + ",pn=" + pn + ",ps=" + ps
				+ ",kw=" + kw + ",clrkw=" + clrkw);
		mv.addObject("navitem", "Vlink_student2group");// 菜单项显示当前项
		String pagename = "test/vlink_student2group";
		// 新增和编辑，列表页面筛选也需要使用，页面部分都有一些预先读取的内容
		if (StringUtils.isBlank(operate) || operate.equals("add") || operate.equals("edit")) {
			// 新建、编辑、列表的条件筛选
			// 用于制作彩色的标签
			mv.addObject("tagpostfixlist", Common.tagPostfix);
			mv.addObject("studentlist", svcb.listStudentOrderByAsc(Student.ID));
			mv.addObject("studentmap", svcb.mapStudent());
			mv.addObject("student_grouplist", svcb.listStudent_groupOrderByAsc(Student_group.ID));
			mv.addObject("student_groupmap", svcb.mapStudent_group());
		}
		// 新增和编辑，列表页面筛选也需要使用，页面部分都有一些预先读取的内容
		if (!StringUtils.isBlank(operate)) {
			// 操作不为空，增删改
			mv.addObject("operate", operate);
			switch (operate) {
			case "add": {
				mv.addObject("pagetitle", "管理VIEW");
				mv.addObject("subtitle", "新增VIEW");
				mv.addObject("formtitle", "新增VIEW");
				mv.addObject("pagename", pagename);
				// 默认作者是当前用户
				UserShiro userShiro = (UserShiro) SecurityUtils.getSubject().getPrincipal();
				mv.addObject("author", userShiro.getLogin_name());
				// 默认置顶3天
				Calendar calendar = Calendar.getInstance();
				calendar.add(Calendar.DATE, 3);
				SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
				String toptill_date = sdf.format(new Date(calendar.getTimeInMillis()));
				mv.addObject("toptill_date", toptill_date);
				// 默认头像
				mv.addObject("wechat_headimgurl", Common.userheadimgurl);
				mv.setViewName(pagename);
			}
				break;
			case "edit": {

				mv.addObject("pagetitle", "管理VIEW");
				mv.addObject("subtitle", "修改VIEW");
				mv.addObject("formtitle", "修改VIEW");
				mv.addObject("pagename", pagename);
				mv.addObject("referer", Common.getRefererUrl());

				// 读取当前已有信息
				Vlink_student2group it = svcb.getVlink_student2groupById(id);
				// 修正信息：如默认头像
				mv.addObject("it", it);
				mv.setViewName(pagename);
			}
				break;
			case "delete": {

				boolean rtv = false;
				try {
					// 视图需要定制删除方法！
					// rtv = svc.removeVlink_student2groupById(id);
				} catch (Exception e) {
					e.printStackTrace();
				}
				if (rtv) {

					mv.addObject("message", "信息已经删除！");
					mv.addObject("jumpto", Common.getRefererUrl());
					mv.setViewName("jumper");
				} else {

					mv.addObject("message", "删除操作被外星人强行终止！");
					mv.addObject("jumpto", Common.getRefererUrl());
					mv.setViewName("jumperclick");
				}
			}
				break;
			case "hideitem":
			case "showitem": {
				UserShiro userShiro = (UserShiro) SecurityUtils.getSubject().getPrincipal();
				// svcb.updateVlink_student2groupById(operate, id);
				mv.addObject("jumpto", Common.getRefererUrl());
				mv.setViewName("jumperatonce");
			}
				break;

			default: {

			}
				break;
			}
		} else {
			// 操作为空,默认为搜索,显示列表
			String qs = "";
			Integer pagenumber = Common.recordToSession(session, "pagenumber", pn + "", 1);
			Integer pagesize = Common.recordToSession(session, "pagesize", ps + "", 10);
			String keyword = Util.replaceSqlChar(kw);
			keyword = Common.recordToSession(session, "keyword_vlink_student2group", keyword, "");
			// 清除搜索条件
			if (!StringUtils.isBlank(clrkw)) {
				session.removeAttribute("keyword_vlink_student2group");
				keyword = null;
			}

			// 读取url中是否包含筛选条件
			Map<String, String> sqlin = new HashMap<String, String>();

			if (!StringUtils.isBlank(request.getParameter("student_id"))) {
				sqlin.put(Vlink_student2group.STUDENT_ID + "_id", request.getParameter("student_id"));
				mv.addObject(Vlink_student2group.STUDENT_ID + "_map",
						Util.splitToInteger(request.getParameter("student_id"), ","));
				qs += Vlink_student2group.STUDENT_ID + "=" + request.getParameter("student_id") + "&";
			}

			if (!StringUtils.isBlank(request.getParameter("student_group_id"))) {
				sqlin.put(Vlink_student2group.STUDENT_GROUP_ID + "_id", request.getParameter("student_group_id"));
				mv.addObject(Vlink_student2group.STUDENT_GROUP_ID + "_map",
						Util.splitToInteger(request.getParameter("student_group_id"), ","));
				qs += Vlink_student2group.STUDENT_GROUP_ID + "=" + request.getParameter("student_group_id") + "&";
			}

			mv.addObject("pagetitle", "管理VIEW");
			mv.addObject("subtitle", "分页列表");
			mv.addObject("tabletitle", "管理");
			mv.addObject("pagename", pagename);// 当前页面的url

			if (!StringUtils.isBlank(keyword)) {
				mv.addObject("kw", keyword);
				qs += "kw=" + keyword + "&";
			}
			mv.addObject("qs", qs);

			// 在列表中需要筛选的条件
			Map<String, Object> params = new HashMap<String, Object>();
			// params.put(Vlink_student2group.ID, 0);
			// params.put(Vlink_student2group.STUDENT_ID, 0);// 筛选条件1
			List<KeyAndValue> ordlist = new ArrayList<KeyAndValue>();
			ordlist.add(new KeyAndValue(Vlink_student2group.ID, "desc"));
			PagerList<Vlink_student2group> pagerlist = svcb.pagerListVlink_student2group(pagenumber, pagesize, keyword,
					sqlin, params, ordlist);
			if (pagerlist.getPager().getRecordsSize() == 0 && pagerlist.getPager().getPages() != 0
					&& pagerlist.getPager().getCurrent() > pagerlist.getPager().getPages()) {
				String url = Common.getBasePath() + pagename + "?" + qs + "pn=" + pagerlist.getPager().getPages();
				mv.addObject("jumpto", url);
				// System.out.println("Test.Vlink_student2groupGET()url=" + url);
				mv.setViewName("jumperatonce");
			} else {
				// Pager<Vlink_student2group> pager = new Pager<Vlink_student2group>(page);
				// System.out.println("Test.Vlink_student2groupGET()pager=" + pager.toString());
				mv.addObject("qs", qs);
				mv.addObject("pager", pagerlist.getPager());
				mv.addObject("list", pagerlist.getList());
				mv.setViewName(pagename);
			}
		}

		return mv;

	}

	// TODO: POST-vlink_student2group
	@RequestMapping(value = { "/vlink_student2group", "/vlink_student2group/",
			"/vlink_student2group/index.html" }, method = RequestMethod.POST)
	public ModelAndView vlink_student2groupPOST(ModelAndView mv, HttpServletRequest request, HttpSession session)
			throws Exception {

		System.out.println(this.getClass().getName() + "POST");
		String pagename = "admin/vlink_student2group";
		UserShiro userShiro = (UserShiro) SecurityUtils.getSubject().getPrincipal();
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		String operate = request.getParameter("operate");
		// --------编辑修改共有的部分---------
		Integer student_id = 0;
		if (!StringUtils.isBlank(request.getParameter("student_id"))) {
			student_id = Integer.parseInt(request.getParameter("student_id"));
		}
		Integer student_group_id = 0;
		if (!StringUtils.isBlank(request.getParameter("student_group_id"))) {
			student_group_id = Integer.parseInt(request.getParameter("student_group_id"));
		}
		Boolean student_is_actived = StringUtils.isBlank(request.getParameter("student_is_actived")) ? false : true;
		Boolean student_group_is_actived = StringUtils.isBlank(request.getParameter("student_group_is_actived")) ? false
				: true;
		String sno = "";
		if (!StringUtils.isBlank(request.getParameter("sno"))) {
			sno = request.getParameter("sno");
		}
		sno = Util.restrictLength(sno, 10);
		String name = "";
		if (!StringUtils.isBlank(request.getParameter("name"))) {
			name = request.getParameter("name");
		}
		name = Util.restrictLength(name, 20);
		String email = "";
		if (!StringUtils.isBlank(request.getParameter("email"))) {
			email = request.getParameter("email");
		}
		email = Util.restrictLength(email, 50);
		String mobile = "";
		if (!StringUtils.isBlank(request.getParameter("mobile"))) {
			mobile = request.getParameter("mobile");
		}
		mobile = Util.restrictLength(mobile, 50);
		String qq = "";
		if (!StringUtils.isBlank(request.getParameter("qq"))) {
			qq = request.getParameter("qq");
		}
		qq = Util.restrictLength(qq, 50);
		String classcode = "";
		if (!StringUtils.isBlank(request.getParameter("classcode"))) {
			classcode = request.getParameter("classcode");
		}
		classcode = Util.restrictLength(classcode, 8);
		Integer login_method = 0;
		if (!StringUtils.isBlank(request.getParameter("login_method"))) {
			login_method = Integer.parseInt(request.getParameter("login_method"));
		}
		String student_group_name = "";
		if (!StringUtils.isBlank(request.getParameter("student_group_name"))) {
			student_group_name = request.getParameter("student_group_name");
		}
		student_group_name = Util.restrictLength(student_group_name, 45);
		String student_group_code = "";
		if (!StringUtils.isBlank(request.getParameter("student_group_code"))) {
			student_group_code = request.getParameter("student_group_code");
		}
		student_group_code = Util.restrictLength(student_group_code, 8);
		// --------编辑修改共有的部分-结束---------
		// Integer create_userid = userShiro.getId();
		// 来源页面
		String referer = request.getParameter("referer");
		switch (operate) {
		case "addform": {

			// String password_digest = DigestUtils.md5Hex(password);
			// Integer sortid = (int)
			// Math.round(svcb.maxVlink_student2group(Vlink_student2group.SORTID)) + 1;
			Vlink_student2group it = new Vlink_student2group(student_id, student_group_id, student_is_actived,
					student_group_is_actived, sno, name, email, mobile, qq, classcode, login_method, student_group_name,
					student_group_code);

			// ----------保存前检查逻辑问题---------------
			// 如：用户名必须唯一，手机号必须唯一
			Map<String, Object> params = new HashMap<String, Object>();
			// params.put(Vlink_student2group.ID, id);
			List<Vlink_student2group> list = svcb.listVlink_student2groupByMap(params);
			if (StringUtils.isBlank("") || StringUtils.isBlank("")) {

				mv.addObject("message", "你输入的信息没有通过星际外交部的严格审核，请重新输入！");
				mv.addObject("jumpto", pagename);
				mv.setViewName("jumperback");
				return mv;
			} else if (list.size() > 0) {

				// 输入内容中，有些内容要求值唯一！
				mv.addObject("message", "你输入的信息已经被外星人抢先注册！");
				mv.addObject("jumpto", pagename);
				mv.setViewName("jumperback");
				return mv;
			} else {

				// 视图需要定制新增方法！
				// svcb.saveVlink_student2group(it);
			}
			// ----------保存前检查逻辑问题结束------------

			mv.addObject("message", "信息已经保存！");
		}
			break;
		case "editform": {
			Integer id = 0;
			if (!StringUtils.isBlank(request.getParameter("id"))) {
				id = Integer.parseInt(request.getParameter("id"));
			}
			// update_gmt = sdf.parse(request.getParameter("update_gmt_date")).getTime();
			// String password_digest = DigestUtils.md5Hex(password);

			// ----------保存前检查逻辑上是否有冲突---------------
			// 如：用户名必须唯一，手机号必须唯一
			Map<String, Object> params = new HashMap<String, Object>();
			params.put(Vlink_student2group.ID, id);
			List<Vlink_student2group> list = svcb.listVlink_student2groupByMap(params);
			if (list.size() > 1 || (list.size() == 1 && list.get(0).getId() != id)) {

				mv.addObject("message", "你输入的手机号码已经被外星人抢先注册！");
				mv.addObject("jumpto", pagename);
				mv.setViewName("jumperback");
				return mv;
			} else {
				svcb.updateVlink_student2groupById(student_id, student_group_id, student_is_actived,
						student_group_is_actived, sno, name, email, mobile, qq, classcode, login_method,
						student_group_name, student_group_code, id);

			}
			// ----------保存前检查逻辑问题结束------------

			mv.addObject("message", "信息已经修改！");

		}
			break;

		default:
			System.out.println(this.getClass().getName() + "没有对应的operate=" + operate);
			break;
		}

		mv.addObject("jumpto", referer);
		mv.setViewName("jumper");

		return mv;
	}

}
